from typing import Tuple, Set, Iterable, List, overload


class DockCornerChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class GH_AlignWidget(GH_Widget):
    def __init__(self): ...
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def Render(self, canvas: GH_Canvas) -> None: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...


class GH_CanvasWidget_FixedObject(GH_Widget):
    def CanvasLocation(self, vp: GH_Viewport) -> PointF: ...
    def ControlLocation(self, vp: GH_Viewport) -> Point: ...
    @property
    def Padding(self) -> int: ...
    @property
    def Ratio(self) -> SizeF: ...
    @property
    def Size(self) -> Size: ...
    def Render(self, canvas: GH_Canvas) -> None: ...
    @Ratio.setter
    def Ratio(self, Value: SizeF) -> None: ...


class GH_CompassWidget(GH_CanvasWidget_FixedObject):
    def __init__(self): ...
    def add_WidgetDrawModeChanged(obj: WidgetDrawModeChangedEventHandler) -> None: ...
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DrawObjects() -> bool: ...
    @property
    def DrawSelectionOnly() -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Padding(self) -> int: ...
    @property
    def Radius(self) -> int: ...
    @property
    def Ratio(self) -> SizeF: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Visible(self) -> bool: ...
    def remove_WidgetDrawModeChanged(obj: WidgetDrawModeChangedEventHandler) -> None: ...
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @DrawObjects.setter
    def DrawObjects(Value: bool) -> None: ...
    @DrawSelectionOnly.setter
    def DrawSelectionOnly(Value: bool) -> None: ...
    @Ratio.setter
    def Ratio(self, Value: SizeF) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...


class GH_MarkovWidget(GH_Widget):
    def __init__(self): ...
    def add_DockCornerChanged(obj: DockCornerChangedEventHandler) -> None: ...
    def add_IconLimitChanged(obj: IconLimitChangedEventHandler) -> None: ...
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DockCorner() -> GH_MarkovWidgetDock: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def IconLimit() -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def Visible(self) -> bool: ...
    def remove_DockCornerChanged(obj: DockCornerChangedEventHandler) -> None: ...
    def remove_IconLimitChanged(obj: IconLimitChangedEventHandler) -> None: ...
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def Render(self, Canvas: GH_Canvas) -> None: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @DockCorner.setter
    def DockCorner(Value: GH_MarkovWidgetDock) -> None: ...
    @IconLimit.setter
    def IconLimit(Value: int) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...


class GH_MarkovWidgetDock:
    TopLeft = 0
    BottomLeft = 1
    TopRight = 2
    BottomRight = 3


class GH_MessageWidget(GH_Widget):
    def __init__(self): ...
    def add_WidgetLevelChanged(obj: WidgetLevelChangedEventHandler) -> None: ...
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def Visible(self) -> bool: ...
    def remove_WidgetLevelChanged(obj: WidgetLevelChangedEventHandler) -> None: ...
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def Render(self, canvas: GH_Canvas) -> None: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...


class GH_ProfilerWidget(GH_Widget):
    def __init__(self): ...
    def add_ProfilerThresholdChanged(obj: ProfilerThresholdChangedEventHandler) -> None: ...
    def add_ShowDurationChanged(obj: ShowDurationChangedEventHandler) -> None: ...
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def ShowDuration() -> bool: ...
    @property
    def Threshold() -> int: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def remove_ProfilerThresholdChanged(obj: ProfilerThresholdChangedEventHandler) -> None: ...
    def remove_ShowDurationChanged(obj: ShowDurationChangedEventHandler) -> None: ...
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    def Render(self, Canvas: GH_Canvas) -> None: ...
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @ShowDuration.setter
    def ShowDuration(Value: bool) -> None: ...
    @Threshold.setter
    def Threshold(Value: int) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...


class GH_Widget:
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    def Render(self, Canvas: GH_Canvas) -> None: ...
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...


class IconLimitChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class IGH_Widget:
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def Render(self, Canvas: GH_Canvas) -> None: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...


class ProfilerThresholdChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class ShowDurationChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetDrawModeChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetLevelChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetVisibleChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetVisibleChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetVisibleChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetVisibleChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class WidgetVisibleChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...
