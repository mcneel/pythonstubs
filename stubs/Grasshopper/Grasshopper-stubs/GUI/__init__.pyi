__all__ = ['Alignment','Base','Canvas','Colours','Equations','Gradient','HTML','IconEditor','Layout','MRU','RemotePanel','Ribbon','Script','SettingsControls','Stacks','StringDisplay','Theme','Widgets']
from typing import Tuple, Set, Iterable, List, overload


class AggregateShortcutMenuItemsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_MenuShortcutEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_MenuShortcutEventArgs) -> None: ...


class AttributesAcceptedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MarkupAttributesDialog, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MarkupAttributesDialog) -> None: ...


class AttributesChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MarkupAttributesDialog, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MarkupAttributesDialog) -> None: ...


class AttributesDeniedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MarkupAttributesDialog, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MarkupAttributesDialog) -> None: ...


class ColourChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class ColourChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_ColourPickerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_ColourPickerEventArgs) -> None: ...


class ColourChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_ColourSwatchEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_ColourSwatchEventArgs) -> None: ...


class ColoursChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_PreviewSettingsChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_PreviewSettingsChangedEventArgs) -> None: ...


class DataChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class DocumentSavedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class EditorFoldStateChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_DocumentEditor, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_DocumentEditor, e: EventArgs) -> None: ...


class FileChangedDelegate:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_AsynchFileData, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_AsynchFileData) -> None: ...


class FileDeleteClickedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class FileLoadClickedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class GH_AlignWidgetSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_AnimatedProcessPanel(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def BezierPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def BugColonyPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def CharacterTumblePaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def CirclePaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def CodeBreakerPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def DeformPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def DelaunayPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def EulerTrianglePaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def FeynmanDiagramPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def GaussianPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    @property
    def OverlayDelegate(self) -> GH_PaintDelegate: ...
    @property
    def PaintDelegate(self) -> GH_PaintDelegate: ...
    @property
    def ParticleCount(self) -> int: ...
    @property
    def ParticleDirections(self) -> List: ...
    @property
    def Particles(self) -> List: ...
    @property
    def ParticleSpeed(self) -> float: ...
    def HilbertCurvePaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def kdTreePaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def LightConePaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def MetaballPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def OildropPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def OrreryPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def ParticleDusterPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def PoincareDiscPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def PrismPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def ProximityPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    @OverlayDelegate.setter
    def OverlayDelegate(self, Value: GH_PaintDelegate) -> None: ...
    @PaintDelegate.setter
    def PaintDelegate(self, Value: GH_PaintDelegate) -> None: ...
    @ParticleCount.setter
    def ParticleCount(self, Value: int) -> None: ...
    @ParticleSpeed.setter
    def ParticleSpeed(self, Value: float) -> None: ...
    def SyrpinskiPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def VennDiagramPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...
    def VoronoiPaintDelegate(control: Control, e: PaintEventArgs) -> None: ...


class GH_AnimationPhase:
    Before = 0
    During = 1
    After = 2


class GH_Animator:
    @overload
    def DecimalAnimator(A: Decimal, B: Decimal) -> GH_Animator: ...
    @overload
    def DecimalAnimator(A: Decimal, B: Decimal, duration: int) -> GH_Animator: ...
    @overload
    def DecimalAnimator(A: Decimal, B: Decimal, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    @overload
    def DoubleAnimator(A: float, B: float) -> GH_Animator: ...
    @overload
    def DoubleAnimator(A: float, B: float, duration: int) -> GH_Animator: ...
    @overload
    def DoubleAnimator(A: float, B: float, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    @overload
    def IntegerAnimator(A: int, B: int) -> GH_Animator: ...
    @overload
    def IntegerAnimator(A: int, B: int, duration: int) -> GH_Animator: ...
    @overload
    def IntegerAnimator(A: int, B: int, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    def InterpolateDecimal(A: Decimal, B: Decimal, factor: float) -> Decimal: ...
    def InterpolateDouble(A: float, B: float, factor: float) -> float: ...
    def InterpolateInteger(A: int, B: int, factor: float) -> int: ...
    def InterpolatePoint(A: Point, B: Point, factor: float) -> Point: ...
    def InterpolatePointF(A: PointF, B: PointF, factor: float) -> PointF: ...
    def InterpolateRectangle(A: Rectangle, B: Rectangle, factor: float) -> Rectangle: ...
    def InterpolateRectangleF(A: RectangleF, B: RectangleF, factor: float) -> RectangleF: ...
    def InterpolateSingle(A: Single, B: Single, factor: float) -> Single: ...
    @overload
    def PointAnimator(A: Point, B: Point) -> GH_Animator: ...
    @overload
    def PointAnimator(A: Point, B: Point, duration: int) -> GH_Animator: ...
    @overload
    def PointAnimator(A: Point, B: Point, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    @overload
    def PointFAnimator(A: PointF, B: PointF) -> GH_Animator: ...
    @overload
    def PointFAnimator(A: PointF, B: PointF, duration: int) -> GH_Animator: ...
    @overload
    def PointFAnimator(A: PointF, B: PointF, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    @overload
    def RectangleAnimator(A: Rectangle, B: Rectangle) -> GH_Animator: ...
    @overload
    def RectangleAnimator(A: Rectangle, B: Rectangle, duration: int) -> GH_Animator: ...
    @overload
    def RectangleAnimator(A: Rectangle, B: Rectangle, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    @overload
    def RectangleFAnimator(A: RectangleF, B: RectangleF) -> GH_Animator: ...
    @overload
    def RectangleFAnimator(A: RectangleF, B: RectangleF, duration: int) -> GH_Animator: ...
    @overload
    def RectangleFAnimator(A: RectangleF, B: RectangleF, time0: DateTime, time1: DateTime) -> GH_Animator: ...
    @overload
    def SingleAnimator(A: Single, B: Single) -> GH_Animator: ...
    @overload
    def SingleAnimator(A: Single, B: Single, duration: int) -> GH_Animator: ...
    @overload
    def SingleAnimator(A: Single, B: Single, time0: DateTime, time1: DateTime) -> GH_Animator: ...




class GH_ArrowControl:
    def __init__(self): ...


class GH_AssemblyInfoDialog:
    def __init__(self): ...
    @property
    def Assembly(self) -> GH_AssemblyInfo: ...
    def RegisterProxies(self, proxies: Iterable[IGH_ObjectProxy]) -> None: ...
    @Assembly.setter
    def Assembly(self, AutoPropertyValue: GH_AssemblyInfo) -> None: ...


class GH_ASSERT_DIALOG:
    def __init__(self): ...
    def AddFrame(self, method: str, type: str, file: str, line: str) -> None: ...
    @property
    def GUID(self) -> Guid: ...
    @property
    def Message(self) -> str: ...
    @GUID.setter
    def GUID(self, Value: Guid) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...


class GH_AsynchFileData:
    def __init__(self, filePath: str, harvestThumbnail: bool, callback: FileChangedDelegate): ...
    def Dispose(self) -> None: ...
    @property
    def Callback(self) -> FileChangedDelegate: ...
    @property
    def FileCreated(self) -> DateTime: ...
    @property
    def FileExists(self) -> bool: ...
    @property
    def FileLastChanged(self) -> DateTime: ...
    @property
    def FileSize(self) -> Int64: ...
    @property
    def FileThumbnail(self) -> Bitmap: ...
    @property
    def HarvestThumbnail(self) -> bool: ...
    @property
    def IsFileData(self) -> bool: ...
    @Callback.setter
    def Callback(self, AutoPropertyValue: FileChangedDelegate) -> None: ...
    @HarvestThumbnail.setter
    def HarvestThumbnail(self, AutoPropertyValue: bool) -> None: ...
    def UpdateProperties(self) -> None: ...


class GH_AuthorSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_AuthorSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_AutoSaveLastChanceForm:
    def __init__(self): ...
    @property
    def RecoveryAction(self) -> GH_FileRecoveryAction: ...


class GH_AutoSaveSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_Banner:
    def __init__(self): ...
    def AddAllAssemblyInfo(self) -> None: ...
    def AddAssemblyInfo(self, info: GH_AssemblyInfo) -> None: ...
    @property
    def ShowLibraryIcons(self) -> bool: ...
    def HideBanner(self) -> None: ...
    @ShowLibraryIcons.setter
    def ShowLibraryIcons(self, Value: bool) -> None: ...
    def UpdateLibraryUI(self) -> None: ...


class GH_BezierSolver:
    def __init__(self): ...
    def AngleAt(P0: PointF, P1: PointF, P2: PointF, P3: PointF, t: Single) -> Tuple[Single, PointF, PointF, PointF, PointF]: ...
    def PointAt(P0: PointF, P1: PointF, P2: PointF, P3: PointF, t: Single) -> Tuple[PointF, PointF, PointF, PointF, PointF]: ...
    def TangentAt(P0: PointF, P1: PointF, P2: PointF, P3: PointF, t: Single) -> Tuple[SizeF, PointF, PointF, PointF, PointF]: ...


class GH_CanvasMouseEvent:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, vp: GH_Viewport, e_args: MouseEventArgs): ...
    @overload
    def __init__(self, pt_control: Point, pt_canvas: PointF, mButton: MouseButtons, iClicks: int, iDelta: int): ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def CanvasLocation(self) -> PointF: ...
    @property
    def CanvasX(self) -> Single: ...
    @property
    def CanvasY(self) -> Single: ...
    @property
    def Clicks(self) -> int: ...
    @property
    def ControlLocation(self) -> Point: ...
    @property
    def ControlX(self) -> int: ...
    @property
    def ControlY(self) -> int: ...
    @property
    def Delta(self) -> int: ...
    @property
    def WinFormsEventArgs(self) -> MouseEventArgs: ...


class GH_CanvasObjectMouseDownEventArgs:
    def __init__(self, sender: GH_Canvas, object: GH_RelevantObjectData): ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Object(self) -> GH_RelevantObjectData: ...


class GH_CanvasOverlaySettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_CanvasZuiSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_CapsuleDisabledPaletteSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_CapsuleErrorPaletteSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_CapsuleHiddenPaletteSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_CapsuleStandardPaletteSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_CapsuleWarningPaletteSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_ClusterGateWayProperties:
    def __init__(self): ...
    @property
    def CustomDescription(self) -> str: ...
    @property
    def CustomName(self) -> str: ...
    @property
    def CustomNickName(self) -> str: ...
    @CustomDescription.setter
    def CustomDescription(self, Value: str) -> None: ...
    @CustomName.setter
    def CustomName(self, Value: str) -> None: ...
    @CustomNickName.setter
    def CustomNickName(self, Value: str) -> None: ...


class GH_ClusterPasswordWindow:
    def __init__(self): ...


class GH_ClusterPropertiesEditor:
    def __init__(self): ...
    @overload
    def LoadCluster(self, cluster: GH_Cluster_OBSOLETE) -> None: ...
    @overload
    def LoadCluster(self, cluster: GH_Cluster) -> None: ...
    def SaveCluster(self, cluster: GH_Cluster_OBSOLETE) -> None: ...
    def WriteToCluster(self, cluster: GH_Cluster) -> None: ...


class GH_ColourPicker:
    def __init__(self): ...
    def add_ColourChanged(self, obj: ColourChangedEventHandler) -> None: ...
    @property
    def AllowNumericInput(self) -> bool: ...
    @property
    def Colour(self) -> Color: ...
    @property
    def DesiredHeight(self) -> int: ...
    @property
    def ShowAlphaSlider(self) -> bool: ...
    @property
    def ShowChannelSliders(self) -> bool: ...
    @property
    def SliceRectangle(self) -> Rectangle: ...
    def remove_ColourChanged(self, obj: ColourChangedEventHandler) -> None: ...
    def RespondToEnter(self) -> GH_ToolstripItemKeyHandlerResult: ...
    def RespondToEscape(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @AllowNumericInput.setter
    def AllowNumericInput(self, Value: bool) -> None: ...
    @Colour.setter
    def Colour(self, Value: Color) -> None: ...
    @ShowAlphaSlider.setter
    def ShowAlphaSlider(self, Value: bool) -> None: ...
    @ShowChannelSliders.setter
    def ShowChannelSliders(self, Value: bool) -> None: ...


class GH_ColourSwatchControl(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def add_ColourChanged(self, obj: ColourChangedEventHandler) -> None: ...
    @property
    def Colour(self) -> Color: ...
    def remove_ColourChanged(self, obj: ColourChangedEventHandler) -> None: ...
    @Colour.setter
    def Colour(self, Value: Color) -> None: ...


class GH_ColourSwatchEventArgs:
    def __init__(self, colour: Color): ...
    @property
    def Colour(self) -> Color: ...


class GH_CompassWidgetSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_ComponentAggregateForm:
    def __init__(self): ...
    @property
    def ProxyCount(self) -> int: ...
    def PopProxy(self) -> IGH_ObjectProxy: ...
    def PushProxy(self, proxy: IGH_ObjectProxy) -> None: ...


class GH_ComponentGuidConflictDialog:
    def __init__(self): ...
    @property
    def ConflictingProxy(self) -> IGH_ObjectProxy: ...
    @property
    def LoadedProxy(self) -> IGH_ObjectProxy: ...
    @property
    def Solution(self) -> GH_GuidConflictSolution: ...
    def SetupDialog(self, cLoaded: IGH_ObjectProxy, cConflicted: IGH_ObjectProxy) -> None: ...


class GH_ComponentInfoForm:
    def __init__(self): ...
    @property
    def MarkerType(self) -> GH_MarkerType: ...
    def SetupMarker(self, control: Control, target: Rectangle, type: GH_MarkerType) -> None: ...


class GH_ComponentMenuSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_Constraint:
    #None = 0
    Vertical = 1
    Horizontal = 2


class GH_ControlKnobOptionsForm:
    def __init__(self): ...
    @property
    def Decimals(self) -> int: ...
    @property
    def DisplayFormat(self) -> str: ...
    @property
    def KnobName(self) -> str: ...
    @property
    def LimitValue(self) -> bool: ...
    @property
    def MaximumValue(self) -> Decimal: ...
    @property
    def MinimumValue(self) -> Decimal: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Range(self) -> Decimal: ...
    @property
    def Value(self) -> Decimal: ...
    @Decimals.setter
    def Decimals(self, Value: int) -> None: ...
    @DisplayFormat.setter
    def DisplayFormat(self, Value: str) -> None: ...
    @KnobName.setter
    def KnobName(self, Value: str) -> None: ...
    @LimitValue.setter
    def LimitValue(self, Value: bool) -> None: ...
    @MaximumValue.setter
    def MaximumValue(self, Value: Decimal) -> None: ...
    @MinimumValue.setter
    def MinimumValue(self, Value: Decimal) -> None: ...
    @Range.setter
    def Range(self, Value: Decimal) -> None: ...
    @Value.setter
    def Value(self, Value: Decimal) -> None: ...


class GH_ControlKnobValueEditor:
    def __init__(self): ...
    def add_ValuesChanged(self, obj: ValuesChangedEventHandler) -> None: ...
    @property
    def Limited(self) -> bool: ...
    @property
    def LowerLimit(self) -> Decimal: ...
    @property
    def OriginalLowerLimit(self) -> Decimal: ...
    @property
    def OriginalUpperLimit(self) -> Decimal: ...
    @property
    def OriginalValue(self) -> Decimal: ...
    @property
    def tblLayout(self) -> TableLayoutPanel: ...
    @property
    def UpperLimit(self) -> Decimal: ...
    @property
    def Value(self) -> Decimal: ...
    def PrepareForCancel(self) -> None: ...
    def PrepareForCommit(self) -> None: ...
    def remove_ValuesChanged(self, obj: ValuesChangedEventHandler) -> None: ...
    @tblLayout.setter
    def tblLayout(self, WithEventsValue: TableLayoutPanel) -> None: ...
    def SetupValues(self, limit: bool, lower: Decimal, upper: Decimal, value: Decimal, decimals: int) -> None: ...


class GH_CreateStateDialog:
    def __init__(self): ...
    def AddAllDocumentObjects(self, def: GH_Document) -> None: ...
    @property
    def StateList(self) -> List: ...


class GH_CursorServer:
    def AttachCursor(self, control: Control, name: str) -> bool: ...
    def Cursor(self, name: str) -> Cursor: ...
    @property
    def Count(self) -> int: ...
    def IsCursor(self, name: str) -> bool: ...
    def ReferenceCursors(self, folder: str) -> int: ...
    def ResetCursor(self, control: Control) -> bool: ...


class GH_CustomButton:
    def __init__(self): ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def RequireCode(self) -> str: ...
    @property
    def RequireCodeInstance(self) -> GH_CustomButtonRequireFilter: ...
    @property
    def RequireDocument(self) -> bool: ...
    @property
    def RequireObjects(self) -> bool: ...
    @property
    def RequireSelection(self) -> bool: ...
    @property
    def RunCode(self) -> str: ...
    @property
    def RunCodeInstance(self) -> GH_CustomButtonRunCode: ...
    @property
    def UseCustomRequirementCode(self) -> bool: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Icon.setter
    def Icon(self, Value: Bitmap) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @RequireCode.setter
    def RequireCode(self, Value: str) -> None: ...
    @RequireDocument.setter
    def RequireDocument(self, Value: bool) -> None: ...
    @RequireObjects.setter
    def RequireObjects(self, Value: bool) -> None: ...
    @RequireSelection.setter
    def RequireSelection(self, Value: bool) -> None: ...
    @RunCode.setter
    def RunCode(self, Value: str) -> None: ...
    @UseCustomRequirementCode.setter
    def UseCustomRequirementCode(self, Value: bool) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_CustomButtonRequireFilter:
    pass


class GH_CustomButtonRunCode:
    pass


class GH_DataTreeBranchGraphic:
    def __init__(self): ...
    def RenderFullBranch(self, graphics: Graphics, colour: Color) -> None: ...
    def RenderPartialBranch(self, graphics: Graphics, colour: Color) -> None: ...


class GH_DataTreeGraphic:
    def __init__(self): ...


class GH_DateTimePicker:
    def __init__(self): ...


class GH_DebugLogForm:
    def __init__(self): ...


class GH_DefaultPreviewSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_DeveloperSettings:
    def __init__(self): ...


class GH_DigitScroller(GH_TextInputBaseControl):
    def __init__(self): ...
    def add_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @property
    def AllowRadixDrag(self) -> bool: ...
    @property
    def AllowTextInput(self) -> bool: ...
    @property
    def Amplify(self) -> bool: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def DigitAlign(self) -> GH_DigitAlign: ...
    @property
    def Digits(self) -> int: ...
    @property
    def DigitScroller(self) -> GH_DigitScrollerBase: ...
    @property
    def Epsilon(self) -> Decimal: ...
    @property
    def MaximumValue(self) -> Decimal: ...
    @property
    def MinimumValue(self) -> Decimal: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def Presets(self) -> GH_NumberPresets: ...
    @property
    def Radix(self) -> int: ...
    @property
    def Suffix(self) -> str: ...
    @property
    def Value(self) -> Decimal: ...
    def remove_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @AllowRadixDrag.setter
    def AllowRadixDrag(self, Value: bool) -> None: ...
    @AllowTextInput.setter
    def AllowTextInput(self, Value: bool) -> None: ...
    @Amplify.setter
    def Amplify(self, Value: bool) -> None: ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, Value: int) -> None: ...
    @DigitAlign.setter
    def DigitAlign(self, Value: GH_DigitAlign) -> None: ...
    @Digits.setter
    def Digits(self, Value: int) -> None: ...
    @MaximumValue.setter
    def MaximumValue(self, Value: Decimal) -> None: ...
    @MinimumValue.setter
    def MinimumValue(self, Value: Decimal) -> None: ...
    @Prefix.setter
    def Prefix(self, Value: str) -> None: ...
    @Radix.setter
    def Radix(self, Value: int) -> None: ...
    @Suffix.setter
    def Suffix(self, Value: str) -> None: ...
    @Value.setter
    def Value(self, Value: Decimal) -> None: ...


class GH_DisplaySettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_DocumentEditor:
    def __init__(self): ...
    def add_AggregateShortcutMenuItems(obj: AggregateShortcutMenuItemsEventHandler) -> None: ...
    def add_EditorFoldStateChanged(self, obj: EditorFoldStateChangedEventHandler) -> None: ...
    def ClearStatusBar(self) -> None: ...
    def CloseForReal(self) -> None: ...
    def CollapseForm(self) -> None: ...
    def DisableUI(self) -> None: ...
    def EnableUI(self) -> None: ...
    def ExpandForm(self) -> None: ...
    def FadeIn(self) -> None: ...
    def FadeOut(self) -> None: ...
    def FixCanvasToolbarState(self) -> None: ...
    @property
    def Collapsed(self) -> bool: ...
    @property
    def FormShepard(self) -> GH_FormShepard: ...
    def remove_AggregateShortcutMenuItems(obj: AggregateShortcutMenuItemsEventHandler) -> None: ...
    def remove_EditorFoldStateChanged(self, obj: EditorFoldStateChangedEventHandler) -> None: ...
    def ScriptAccess_CloseAllDocuments(self) -> bool: ...
    def ScriptAccess_CloseDocument(self) -> bool: ...
    def ScriptAccess_IsDocument(self) -> bool: ...
    def ScriptAccess_IsDocumentModified(self) -> bool: ...
    def ScriptAccess_NewDocument(self) -> bool: ...
    @overload
    def ScriptAccess_OpenDocument(self) -> bool: ...
    @overload
    def ScriptAccess_OpenDocument(self, filename: str) -> bool: ...
    def ScriptAccess_SaveDocument(self) -> bool: ...
    @overload
    def ScriptAccess_SaveDocumentAs(self) -> bool: ...
    @overload
    def ScriptAccess_SaveDocumentAs(self, path: str) -> bool: ...
    def SetStatusBarEvent(self, event: GH_RuntimeMessage) -> None: ...
    def ToggleForm(self) -> None: ...


class GH_DocumentMdiItem(GH_DoubleBufferedPanel):
    def __init__(self): ...
    @property
    def CloseArea(self) -> Rectangle: ...
    @property
    def ClusterArea(self) -> Rectangle: ...
    @property
    def DesiredHeight(self) -> int: ...
    @property
    def DesiredWidth(self) -> int: ...
    @property
    def Document(self) -> GH_Document: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...


class GH_DocumentPreviewSettings:
    def __init__(self): ...
    def add_ColoursChanged(self, obj: ColoursChangedEventHandler) -> None: ...
    @property
    def NormalColour(self) -> Color: ...
    @property
    def SelectedColour(self) -> Color: ...
    def LoadPresets(self) -> None: ...
    def remove_ColoursChanged(self, obj: ColoursChangedEventHandler) -> None: ...
    def SavePresets(self) -> None: ...
    @NormalColour.setter
    def NormalColour(self, Value: Color) -> None: ...
    @SelectedColour.setter
    def SelectedColour(self, Value: Color) -> None: ...


class GH_DocumentPreviewSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_DocumentPropertiesEditor:
    def __init__(self): ...
    def SetDocumentProperties(self, Props: GH_DocumentProperties) -> None: ...
    def UpdateIconControl(self) -> None: ...


class GH_DoubleBufferedPanel:
    def __init__(self): ...


class GH_DragDropImageRenderer:
    def __init__(self): ...
    def CompleteDrag(self) -> None: ...
    def Dispose(self) -> None: ...
    @property
    def ImageList(self) -> ImageList: ...
    @property
    def Owner(self) -> Control: ...
    def HideDragDropImage(self, hide: bool) -> None: ...
    def PaintDragDropImage(self) -> None: ...
    @ImageList.setter
    def ImageList(self, Value: ImageList) -> None: ...
    @Owner.setter
    def Owner(self, Value: Control) -> None: ...
    @overload
    def StartDrag(self, imageIndex: int) -> None: ...
    @overload
    def StartDrag(self, imageIndex: int, xOffset: int, yOffset: int) -> None: ...


class GH_DragInfo:
    def __init__(self, drag_point: Point, initial_shape: Rectangle): ...
    def Drag(self, new_point: Point) -> None: ...
    @property
    def Box_Drag(self) -> Rectangle: ...
    @property
    def Box_Start(self) -> Rectangle: ...
    @property
    def Constraint(self) -> GH_Constraint: ...
    @property
    def Point_Drag(self) -> Point: ...
    @property
    def Point_Start(self) -> Point: ...
    @property
    def Region(self) -> Rectangle: ...
    @Constraint.setter
    def Constraint(self, Value: GH_Constraint) -> None: ...
    @Region.setter
    def Region(self, Value: Rectangle) -> None: ...


class GH_EtoUtil:
    def CenterFormOnCursor(F: Window, limitToScreen: bool) -> None: ...
    def CenterFormOnEditor(F: Window, limitToScreen: bool) -> None: ...
    def CenterFormOnScreen(F: Window, limitToScreen: bool) -> None: ...
    def CenterFormOnWindow(F: Window, parentWindow: Window, limitToScreen: bool) -> None: ...


class GH_ExpressionEditor:
    def __init__(self): ...
    @property
    def Expression(self) -> str: ...
    @property
    def PreviewDelegate(self) -> GH_PreviewExpression: ...
    @property
    def Variables(self) -> Dictionary: ...
    @Expression.setter
    def Expression(self, Value: str) -> None: ...
    @PreviewDelegate.setter
    def PreviewDelegate(self, Value: GH_PreviewExpression) -> None: ...


class GH_ExternalFileConflictDialog:
    def __init__(self): ...
    @property
    def FilePathA(self) -> str: ...
    @property
    def FilePathB(self) -> str: ...
    @property
    def InfoLabel(self) -> Label: ...
    @property
    def LoadFileCode(self) -> int: ...
    @FilePathA.setter
    def FilePathA(self, Value: str) -> None: ...
    @FilePathB.setter
    def FilePathB(self, Value: str) -> None: ...
    @InfoLabel.setter
    def InfoLabel(self, WithEventsValue: Label) -> None: ...


class GH_ExternalFilePanel(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def add_FileDeleteClicked(self, obj: FileDeleteClickedEventHandler) -> None: ...
    def add_FileLoadClicked(self, obj: FileLoadClickedEventHandler) -> None: ...
    @property
    def File(self) -> str: ...
    def remove_FileDeleteClicked(self, obj: FileDeleteClickedEventHandler) -> None: ...
    def remove_FileLoadClicked(self, obj: FileLoadClickedEventHandler) -> None: ...
    @File.setter
    def File(self, Value: str) -> None: ...


class GH_FadeAnimation:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, threshold: Single): ...
    @overload
    def __init__(self, threshold: Single, duration: int): ...
    @overload
    def Evaluate(self, canvas: GH_Canvas) -> None: ...
    @overload
    def Evaluate(self, canvas: GH_Canvas, scheduleRedraw: bool) -> None: ...
    @overload
    def Evaluate(self, canvas: GH_Canvas, value: Single) -> None: ...
    @overload
    def Evaluate(self, canvas: GH_Canvas, value: Single, scheduleRedraw: bool) -> None: ...
    @property
    def Duration(self) -> int: ...
    @property
    def FadeAlpha(self) -> int: ...
    @property
    def FadeFactor(self) -> float: ...
    @property
    def IsFinished(self) -> bool: ...
    @property
    def Phase(self) -> GH_FadePhase: ...
    @property
    def Threshold(self) -> Single: ...
    @property
    def TriggerUpdate(self) -> bool: ...
    @Duration.setter
    def Duration(self, Value: int) -> None: ...
    @Threshold.setter
    def Threshold(self, Value: Single) -> None: ...
    @TriggerUpdate.setter
    def TriggerUpdate(self, Value: bool) -> None: ...


class GH_FadePhase:
    Hidden = 0
    Hiding = 1
    Shown = 2
    Showing = 3


class GH_FileRecoveryAction:
    #None = 0
    OpenRecoveryFile = 1
    SaveRecoveryFile = 2
    DeleteRecoveryFile = 3


class GH_FilesSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_FindObjectDialog:
    def __init__(self): ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def SelectedHit(self) -> int: ...
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...
    @SelectedHit.setter
    def SelectedHit(self, Value: int) -> None: ...


class GH_FolderPathBrowser:
    def __init__(self): ...
    def add_PathChanged(self, obj: PathChangedEventHandler) -> None: ...
    @property
    def BrowseText(self) -> str: ...
    @property
    def Filter(self) -> str: ...
    @property
    def IsFileBrowser(self) -> bool: ...
    @property
    def IsFolderBrowser(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @property
    def RequireExisting(self) -> bool: ...
    def IsValidPath(pathString: str) -> bool: ...
    def remove_PathChanged(self, obj: PathChangedEventHandler) -> None: ...
    @BrowseText.setter
    def BrowseText(self, Value: str) -> None: ...
    @Filter.setter
    def Filter(self, Value: str) -> None: ...
    @Path.setter
    def Path(self, Value: str) -> None: ...
    @RequireExisting.setter
    def RequireExisting(self, Value: bool) -> None: ...


class GH_FontConsoleSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_FontControl:
    def __init__(self): ...
    @property
    def AllowFamilyOverride(self) -> bool: ...
    @property
    def AllowSizeOverride(self) -> bool: ...
    @property
    def AllowStyleOverride(self) -> bool: ...
    @AllowFamilyOverride.setter
    def AllowFamilyOverride(self, Value: bool) -> None: ...
    @AllowSizeOverride.setter
    def AllowSizeOverride(self, Value: bool) -> None: ...
    @AllowStyleOverride.setter
    def AllowStyleOverride(self, Value: bool) -> None: ...


class GH_FontList(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def CreateFont(self) -> Font: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Filter(self) -> str: ...
    @property
    def FontFamily(self) -> FontFamily: ...
    @property
    def FontSize(self) -> Single: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    def RecreateFontList(self) -> None: ...
    @DisplayText.setter
    def DisplayText(self, Value: str) -> None: ...
    @Filter.setter
    def Filter(self, Value: str) -> None: ...
    @FontFamily.setter
    def FontFamily(self, Value: FontFamily) -> None: ...
    @FontSize.setter
    def FontSize(self, Value: Single) -> None: ...
    @FontStyle.setter
    def FontStyle(self, Value: FontStyle) -> None: ...


class GH_FontMappingDialog:
    def __init__(self): ...
    @property
    def lblFont(self) -> Label: ...
    @property
    def lnkSubstitution(self) -> LinkLabel: ...
    @property
    def OriginalFont(self) -> str: ...
    @property
    def Substitution(self) -> str: ...
    @lblFont.setter
    def lblFont(self, WithEventsValue: Label) -> None: ...
    @lnkSubstitution.setter
    def lnkSubstitution(self, WithEventsValue: LinkLabel) -> None: ...
    @OriginalFont.setter
    def OriginalFont(self, Value: str) -> None: ...
    @Substitution.setter
    def Substitution(self, Value: str) -> None: ...


class GH_FontPicker:
    def __init__(self): ...
    def CreateFontPickerWindow(defaultFont: Font) -> Form: ...
    @property
    def SelectedFont(self) -> Font: ...
    @SelectedFont.setter
    def SelectedFont(self, Value: Font) -> None: ...
    @overload
    def ShowFontPickerWindow(font: Font) -> Font: ...
    @overload
    def ShowFontPickerWindow(font: Font, parent: Form) -> Font: ...


class GH_FontScriptSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_FontScroller(GH_DoubleBufferedPanel):
    def __init__(self): ...
    @property
    def PostPaintDelegate(self) -> PostPaint: ...
    @PostPaintDelegate.setter
    def PostPaintDelegate(self, Value: PostPaint) -> None: ...


class GH_FontsSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_FontStandardSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_FormattingSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_FormShepard:
    def __init__(self, nOwner: Form): ...
    @property
    def Sheep(self) -> Iterable[Form]: ...
    def RegisterForm(self, dialog: Form) -> None: ...
    def UnregisterForm(self, dialog: Form) -> None: ...


class GH_GDI_PolyArc:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_GDI_PolyArc): ...
    @overload
    def AppendArc(self, Arc: Arc) -> None: ...
    @overload
    def AppendArc(self, A: Point3d, B: Point3d, Ta: Vector3d) -> None: ...
    @overload
    def AppendArc(self, Ax: float, Ay: float, Bx: float, By: float, Tx: float, Ty: float) -> None: ...
    @overload
    def AppendArc3Pt(self, A: Point3d, B: Point3d, C: Point3d) -> None: ...
    @overload
    def AppendArc3Pt(self, Ax: float, Ay: float, Bx: float, By: float, Cx: float, Cy: float) -> None: ...
    @overload
    def AppendLine(self, A: Point3d, B: Point3d) -> None: ...
    @overload
    def AppendLine(self, Ax: float, Ay: float, Bx: float, By: float) -> None: ...
    def StartNewPath(self) -> None: ...
    def ToPath(self) -> GraphicsPath: ...


class GH_GDI_Util:
    def BoxUnion(rectangles: Iterable[Rectangle]) -> List: ...
    def FilletBoxOutline(boxes: Iterable[Rectangle], radius: int) -> GraphicsPath: ...
    @overload
    def FilletPolyline(corners: Set(Point), radius: int) -> GraphicsPath: ...
    @overload
    def FilletPolyline(corners: Set(PointF), radius: Single) -> GraphicsPath: ...
    def FilletRectangle(box: Rectangle, radius: int) -> GraphicsPath: ...
    @overload
    def Freeform_Blob(content: Iterable[RectangleF], padding: int, accuracy: float) -> GraphicsPath: ...
    @overload
    def Freeform_Blob(content: Iterable[RectangleF], padding: int, accuracy: float, solver: FieldSolver, section: float) -> GraphicsPath: ...
    def SimplifyBoxes(boxes: Iterable[Rectangle]) -> Set(Rectangle): ...


class GH_GeometricFont:
    def Draw0(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw1(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw2(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw3(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw4(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw5(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw6(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw7(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw8(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def Draw9(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def DrawBracketClose(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def DrawBracketOpen(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    def DrawDash(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    @overload
    def DrawNumber(graphics: Graphics, number: UInt32, colour: Color, position: PointF) -> None: ...
    @overload
    def DrawNumber(graphics: Graphics, number: Int64, colour: Color, position: PointF) -> None: ...
    @overload
    def DrawNumber(graphics: Graphics, number: UInt64, colour: Color, position: PointF) -> None: ...
    @overload
    def DrawNumber(graphics: Graphics, number: int, colour: Color, position: PointF) -> None: ...
    def DrawPath(graphics: Graphics, path: GH_Path, colour: Color, position: PointF) -> None: ...
    def DrawSemiColon(graphics: Graphics, colour: Color, position: PointF) -> None: ...
    @property
    def Char0() -> GraphicsPath: ...
    @property
    def Char1() -> GraphicsPath: ...
    @property
    def Char2() -> GraphicsPath: ...
    @property
    def Char3() -> GraphicsPath: ...
    @property
    def Char4() -> GraphicsPath: ...
    @property
    def Char5() -> GraphicsPath: ...
    @property
    def Char6() -> GraphicsPath: ...
    @property
    def Char7() -> GraphicsPath: ...
    @property
    def Char8() -> GraphicsPath: ...
    @property
    def Char9() -> GraphicsPath: ...
    @property
    def CharBracketClose() -> GraphicsPath: ...
    @property
    def CharBracketOpen() -> GraphicsPath: ...
    @property
    def CharDash() -> GraphicsPath: ...
    @property
    def CharSemiColon() -> GraphicsPath: ...


class GH_GHALoadSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_GooProxyList(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def add_DataChanged(self, obj: DataChangedEventHandler) -> None: ...
    def add_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    @property
    def SelectedData(self) -> List: ...
    def GetData(self) -> GH_Structure: ...
    def remove_DataChanged(self, obj: DataChangedEventHandler) -> None: ...
    def remove_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    def SetData(self, data: GH_Structure, baseType: IGH_Goo) -> None: ...


class GH_GradientEditor:
    def __init__(self): ...
    @property
    def Gradient(self) -> GH_Gradient: ...
    @Gradient.setter
    def Gradient(self, Value: GH_Gradient) -> None: ...


class GH_GradientMenuItem:
    def __init__(self): ...
    @property
    def DeleteRequested(self) -> bool: ...
    @property
    def Gradient(self) -> GH_Gradient: ...
    @property
    def Index(self) -> int: ...
    @DeleteRequested.setter
    def DeleteRequested(self, Value: bool) -> None: ...
    @Gradient.setter
    def Gradient(self, Value: GH_Gradient) -> None: ...
    @Index.setter
    def Index(self, Value: int) -> None: ...


class GH_GraphEditor:
    def __init__(self): ...
    @property
    def Graph(self) -> GH_GraphContainer: ...
    def SetGraph(self, G: GH_GraphContainer) -> None: ...


class GH_GraphicsUtil:
    @overload
    def AppendArc(p0: Point3d, p1: Point3d, dir: Vector3d, path: GraphicsPath) -> None: ...
    @overload
    def AppendArc(p0: PointF, p1: PointF, dir: SizeF, path: GraphicsPath) -> None: ...
    @overload
    def BlendColour(bottom: Color, top: Color) -> Color: ...
    @overload
    def BlendColour(bottom: Color, top: Color, factor: float) -> Color: ...
    def BlendInteger(t0: float, t1: float, a0: int, a1: int, t: float) -> int: ...
    def BoxClosestArcPoint(pt: PointF, box: RectangleF) -> PointF: ...
    @overload
    def BoxClosestPoint(pt: Point, box: Rectangle) -> Point: ...
    @overload
    def BoxClosestPoint(pt: PointF, box: RectangleF) -> PointF: ...
    @overload
    def BoxFurthestPoint(pt: Point, box: Rectangle) -> Point: ...
    @overload
    def BoxFurthestPoint(pt: PointF, box: RectangleF) -> PointF: ...
    def BoxViewCone(pt: PointF, box: RectangleF) -> GraphicsPath: ...
    @overload
    def ColourARGB(r: int, g: int, b: int) -> Color: ...
    @overload
    def ColourARGB(r: float, g: float, b: float) -> Color: ...
    @overload
    def ColourARGB(a: int, r: int, g: int, b: int) -> Color: ...
    def CreateColourIcon(width: int, height: int, colour: Color) -> Bitmap: ...
    @overload
    def DentHorizontal(g: Graphics, box: Rectangle) -> None: ...
    @overload
    def DentHorizontal(g: Graphics, box: Rectangle, alphaEdge: int, alphaFill: int) -> None: ...
    @overload
    def DentVertical(g: Graphics, box: Rectangle) -> None: ...
    @overload
    def DentVertical(g: Graphics, box: Rectangle, alphaEdge: int, alphaFill: int) -> None: ...
    def Distance(a: PointF, b: PointF) -> Single: ...
    def DistanceS(a: PointF, b: PointF) -> Single: ...
    def EtchFadingHorizontal(g: Graphics, x0: int, x1: int, y: int, alphaLight: int, alphaDark: int) -> None: ...
    def EtchFadingVertical(g: Graphics, y0: int, y1: int, x: int, alphaLight: int, alphaDark: int) -> None: ...
    @overload
    def EtchHorizontal(g: Graphics, x0: Single, x1: Single, y: Single, alpha: int) -> None: ...
    @overload
    def EtchHorizontal(g: Graphics, x0: int, x1: int, y: int, alphaLight: int, alphaDark: int) -> None: ...
    @overload
    def EtchVertical(g: Graphics, x: Single, y0: Single, y1: Single, alpha: int) -> None: ...
    @overload
    def EtchVertical(g: Graphics, x: int, y0: int, y1: int, alpha: int) -> None: ...
    def FadeColour(t0: float, t1: float, t: float, col: Color) -> Color: ...
    def ForegroundColour(col: Color, contrast: int) -> Color: ...
    @property
    def UiScale() -> Single: ...
    @overload
    def Grid(g: Graphics, rec: RectangleF, density: int) -> None: ...
    @overload
    def Grid(g: Graphics, rec: RectangleF, densityX: int, densityY: int) -> None: ...
    @overload
    def Grid(g: Graphics, rec: RectangleF, densityX: int, densityY: int, colorBg: Color, colorWire: Color) -> None: ...
    def HighlightBrush() -> Brush: ...
    def HighlightPen() -> Pen: ...
    def InvertColour(col: Color) -> Color: ...
    def IsPointInEllipse(ellipse: RectangleF, point: PointF) -> bool: ...
    def LimitInteger(channel: int) -> Tuple[int]: ...
    def LimitIntegers(r: int, g: int, b: int) -> Tuple[int, int, int]: ...
    @overload
    def OffsetColour(col: Color, shift: int) -> Color: ...
    @overload
    def OffsetColour(col: Color, redShift: int, greenShift: int, blueShift: int) -> Color: ...
    @overload
    def RenderBalloonTag(g: Graphics, text: str, tip: PointF, container: RectangleF) -> None: ...
    @overload
    def RenderBalloonTag(g: Graphics, text: str, font: Font, tip: PointF, container: RectangleF) -> None: ...
    @overload
    def RenderBalloonTag(g: Graphics, text: str, font: Font, backColor: Color, foreColor: Color, tip: PointF, container: RectangleF) -> None: ...
    @overload
    def RenderBalloonTag(g: Graphics, text: str, font: Font, backColor: Color, foreColor: Color, tip: PointF, upright: bool) -> None: ...
    def RenderCenteredIcon(g: Graphics, frame: RectangleF, icon: Image, alpha: float) -> None: ...
    def RenderCenteredText(g: Graphics, text: str, font: Font, color: Color, center: PointF) -> None: ...
    def RenderColourIcon(g: Graphics, rec: Rectangle, colour: Color, scale: Single) -> None: ...
    @overload
    def RenderFadedImage(graphics: Graphics, image: Image, destination: Rectangle, alpha: int) -> None: ...
    @overload
    def RenderFadedImage(graphics: Graphics, image: Image, destination: Rectangle, fade: float) -> None: ...
    @overload
    def RenderHighlightBox(g: Graphics, box: Rectangle, cornerRadius: int) -> None: ...
    @overload
    def RenderHighlightBox(g: Graphics, box: Rectangle, cornerRadius: int, fill: Color, edge: Color) -> None: ...
    @overload
    def RenderHighlightBox(g: Graphics, box: Rectangle, cornerRadius: int, drawFill: bool, drawEdge: bool) -> None: ...
    def RenderIcon(graphics: Graphics, frame: RectangleF, icon: Image) -> None: ...
    @overload
    def RenderObjectOverlay(graphics: Graphics, obj: IGH_ObjectProxy, target: RectangleF) -> None: ...
    @overload
    def RenderObjectOverlay(graphics: Graphics, obj: IGH_DocumentObject, target: RectangleF) -> None: ...
    def RenderRoundBar(graphics: Graphics, rec: RectangleF, colour: Color) -> None: ...
    def RenderTag(g: Graphics, tag: str, font: Font, backColor: Color, foreColor: Color, frame: RectangleF, alignH: StringAlignment, alignV: StringAlignment) -> None: ...
    def RenderVerticalString(g: Graphics, text: str, font: Font, colour: Color, rec: RectangleF, format: StringFormat) -> None: ...
    def RenderWarningIcon(graphics: Graphics, center: PointF, radius: Single, alpha: int) -> None: ...
    def ScaleColour(col: Color, factor: float) -> Color: ...
    @overload
    def ShadowHorizontal(g: Graphics, x0: int, x1: int, y: int, size: int, below: bool, darkness: int) -> None: ...
    @overload
    def ShadowHorizontal(g: Graphics, x0: Single, x1: Single, y: Single, size: Single, below: bool, darkness: int) -> None: ...
    @overload
    def ShadowHorizontal(g: Graphics, x0: int, x1: int, y: int, size: int, below: bool, color: Color) -> None: ...
    @overload
    def ShadowRectangle(g: Graphics, rec: Rectangle, size: int, color: Color) -> None: ...
    @overload
    def ShadowRectangle(g: Graphics, rec: Rectangle, size: int, darkness: int) -> None: ...
    @overload
    def ShadowVertical(g: Graphics, x: int, y0: int, y1: int, size: int, right: bool, color: Color) -> None: ...
    @overload
    def ShadowVertical(g: Graphics, x: Single, y0: Single, y1: Single, size: Single, right: bool, darkness: int) -> None: ...
    @overload
    def ShadowVertical(g: Graphics, x: int, y0: int, y1: int, size: int, right: bool, darkness: int) -> None: ...
    @overload
    def SolveArc(p0: PointF, p1: PointF, dir: SizeF, box: RectangleF, angle: Single, sweep: Single) -> Tuple[bool, RectangleF, Single, Single]: ...
    @overload
    def SolveArc(p0: Point3d, p1: Point3d, dir: Vector3d, box: RectangleF, angle: Single, sweep: Single) -> Tuple[bool, RectangleF, Single, Single]: ...
    @overload
    def SolveArc(p0X: float, p0Y: float, p1X: float, p1Y: float, dx: float, dy: float, box: RectangleF, angle: Single, sweep: Single) -> Tuple[bool, RectangleF, Single, Single]: ...
    @overload
    def TransparencyMatrix(fade: float) -> ColorMatrix: ...
    @overload
    def TransparencyMatrix(alpha: int) -> ColorMatrix: ...


class GH_GumballAndMeshingSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_HiResExportForm:
    def __init__(self): ...
    @property
    def CanvasColor(self) -> Color: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def ZoomFactor(self) -> Single: ...
    def StorePersistentSettings(self) -> None: ...


class GH_HorizontalSeparator(GH_DoubleBufferedPanel):
    def __init__(self): ...
    @property
    def DisplayMode(self) -> GH_SeparatorDisplay: ...
    @DisplayMode.setter
    def DisplayMode(self, Value: GH_SeparatorDisplay) -> None: ...


class GH_IconLabel:
    def __init__(self): ...
    @property
    def LabelIcon(self) -> Bitmap: ...
    @LabelIcon.setter
    def LabelIcon(self, Value: Bitmap) -> None: ...


class GH_IconPicker:
    def __init__(self): ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def IconChanged(self) -> bool: ...
    @Icon.setter
    def Icon(self, Value: Bitmap) -> None: ...


class GH_IconTable:
    @property
    def Count() -> int: ...
    def Icon(index: int) -> Bitmap: ...
    def RegisterIcon(icon: Bitmap) -> int: ...
    def ResizeImage(img: Image, size: Size, mode: InterpolationMode, format: PixelFormat) -> Bitmap: ...
    def To32BppArgb(img: Image) -> Bitmap: ...
    def To32BppPArgb(img: Image) -> Bitmap: ...


class GH_IconVariations:
    def _IconBlackAdditionLL(icon: Bitmap) -> Bitmap: ...
    def _IconBlackAdditionLR(icon: Bitmap) -> Bitmap: ...
    def _IconBlackAdditionTL(icon: Bitmap) -> Bitmap: ...
    def _IconBlackAdditionTR(icon: Bitmap) -> Bitmap: ...
    def _IconBlackNewBottomOverlay(icon: Bitmap) -> Bitmap: ...
    def _IconBlackNewTopOverlay(icon: Bitmap) -> Bitmap: ...
    def _IconDropShadow0(icon: Bitmap) -> Bitmap: ...
    def _IconDropShadow1(icon: Bitmap) -> Bitmap: ...
    def _IconDropShadow2(icon: Bitmap) -> Bitmap: ...
    def _IconDropShadow3(icon: Bitmap) -> Bitmap: ...
    def _IconGreyScale0(icon: Bitmap) -> Bitmap: ...
    def _IconGreyScale1(icon: Bitmap) -> Bitmap: ...
    def _IconGreyScale2(icon: Bitmap) -> Bitmap: ...
    def _IconGreyScale3(icon: Bitmap) -> Bitmap: ...
    def _IconSatScale0(icon: Bitmap) -> Bitmap: ...
    def _IconSatScale1(icon: Bitmap) -> Bitmap: ...
    def _IconSatScale2(icon: Bitmap) -> Bitmap: ...
    def _IconSatScale3(icon: Bitmap) -> Bitmap: ...
    def _IconWhiteAdditionLL(icon: Bitmap) -> Bitmap: ...
    def _IconWhiteAdditionLR(icon: Bitmap) -> Bitmap: ...
    def _IconWhiteAdditionTL(icon: Bitmap) -> Bitmap: ...
    def _IconWhiteAdditionTR(icon: Bitmap) -> Bitmap: ...
    def _IconWhiteBoxBackground(icon: Bitmap) -> Bitmap: ...
    def _IconWhiteGridBackground(icon: Bitmap) -> Bitmap: ...
    def _TintCustomColour(icon: Bitmap, tint: Color) -> Bitmap: ...
    def CreateIconVariations(icon: Bitmap) -> List: ...
    def CreateIconVariationTexts() -> List: ...


class GH_ImageSamplerSettingsDialog:
    def __init__(self): ...
    def ApplySettings(self) -> None: ...
    @property
    def Sampler(self) -> GH_ImageSampler: ...
    def RevertSettings(self) -> None: ...
    @Sampler.setter
    def Sampler(self, Value: GH_ImageSampler) -> None: ...


class GH_InfoTextBox:
    def __init__(self): ...
    @overload
    def add_TextChanged(self, obj: TextChangedEventHandler) -> None: ...
    @property
    def DefaultMessage(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextBox(self) -> TextBox: ...
    @overload
    def remove_TextChanged(self, obj: TextChangedEventHandler) -> None: ...
    @DefaultMessage.setter
    def DefaultMessage(self, Value: str) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @TextBox.setter
    def TextBox(self, WithEventsValue: TextBox) -> None: ...


class GH_InfoTextBoxEventArgs:
    def __init__(self, control: GH_InfoTextBox): ...
    @property
    def Control(self) -> GH_InfoTextBox: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextBox(self) -> TextBox: ...


class GH_InterfaceSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_Interpolation:
    #None = 0
    NearestNeighbour = 1
    Linear = 2
    EaseIn = 3
    EaseOut = 4
    EaseInAndOut = 5


class GH_Interval2DPicker:
    def __init__(self): ...
    def add_IntervalChanged(self, obj: IntervalChangedEventHandler) -> None: ...
    @property
    def Interval(self) -> UVInterval: ...
    def OnIntervalChanged(self) -> None: ...
    def remove_IntervalChanged(self, obj: IntervalChangedEventHandler) -> None: ...
    @Interval.setter
    def Interval(self, Value: UVInterval) -> None: ...


class GH_KernelAssemblyCopyLocalWarning:
    def __init__(self): ...


class GH_Label(GH_DoubleBufferedPanel):
    def __init__(self): ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImageAlign(self) -> ContentAlignment: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlign(self) -> ContentAlignment: ...
    @Image.setter
    def Image(self, AutoPropertyValue: Image) -> None: ...
    @ImageAlign.setter
    def ImageAlign(self, AutoPropertyValue: ContentAlignment) -> None: ...
    @Text.setter
    def Text(self, AutoPropertyValue: str) -> None: ...
    @TextAlign.setter
    def TextAlign(self, AutoPropertyValue: ContentAlignment) -> None: ...


class GH_LexerComboEditor:
    def __init__(self): ...
    @property
    def Lexers(self) -> List: ...
    @Lexers.setter
    def Lexers(self, Value: List) -> None: ...


class GH_LexerMaskEditor:
    def __init__(self): ...


class GH_ListScroller:
    def __init__(self): ...
    def add_SelectedIndexChanged(self, obj: SelectedIndexChangedEventHandler) -> None: ...
    def AddItem(self, sItem: str) -> None: ...
    @property
    def DebugItems(self) -> bool: ...
    @property
    def ItemHeight(self) -> int: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def WrapItems(self) -> bool: ...
    def OnSelectedItemChanged(self, bIntermediate: bool) -> None: ...
    def remove_SelectedIndexChanged(self, obj: SelectedIndexChangedEventHandler) -> None: ...
    @DebugItems.setter
    def DebugItems(self, Value: bool) -> None: ...
    @ItemHeight.setter
    def ItemHeight(self, Value: int) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, Value: int) -> None: ...
    @WrapItems.setter
    def WrapItems(self, Value: bool) -> None: ...


class GH_ListScrollerChangedEventArgs:
    def __init__(self, nItem: str, nIndex: int, bIntermediate: bool): ...
    @property
    def Index(self) -> int: ...
    @property
    def Intermediate(self) -> bool: ...
    @property
    def Item(self) -> str: ...


class GH_LoadingError:
    def __init__(self): ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def ErrorTitle(self) -> str: ...
    @property
    def Folded(self) -> bool: ...
    @ErrorMessage.setter
    def ErrorMessage(self, Value: str) -> None: ...
    @ErrorTitle.setter
    def ErrorTitle(self, Value: str) -> None: ...
    @Folded.setter
    def Folded(self, Value: bool) -> None: ...


class GH_LoadingExceptionBrowser:
    def __init__(self): ...
    def LoadErrors(self, errors: List) -> None: ...


class GH_LoadProtectDialog:
    def __init__(self): ...
    def SetAssemblyName(self, name: str) -> None: ...


class GH_MarkerType:
    DocumentObject = 0
    RibbonTab = 1
    RibbonIcon = 2


class GH_MarkovWidgetSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_MarkupAttributesDialog:
    def __init__(self): ...
    def add_AttributesAccepted(self, obj: AttributesAcceptedEventHandler) -> None: ...
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def add_AttributesDenied(self, obj: AttributesDeniedEventHandler) -> None: ...
    @property
    def AcceptRegion(self) -> Rectangle: ...
    @property
    def CancelRegion(self) -> Rectangle: ...
    @property
    def ColourRegion(self) -> Rectangle: ...
    @property
    def DashRegion(self) -> Rectangle: ...
    @property
    def GripRegion(self) -> Rectangle: ...
    @property
    def ModifiedProperties(self) -> GH_MarkupProperties: ...
    @property
    def OriginalProperties(self) -> GH_MarkupProperties: ...
    @property
    def WidthRegion(self) -> Rectangle: ...
    def ReadAttributes(self, iAtt: GH_MarkupAttributes) -> None: ...
    def remove_AttributesAccepted(self, obj: AttributesAcceptedEventHandler) -> None: ...
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def remove_AttributesDenied(self, obj: AttributesDeniedEventHandler) -> None: ...
    @ModifiedProperties.setter
    def ModifiedProperties(self, AutoPropertyValue: GH_MarkupProperties) -> None: ...
    @OriginalProperties.setter
    def OriginalProperties(self, AutoPropertyValue: GH_MarkupProperties) -> None: ...
    def UndoAttributes(self, iAtt: GH_MarkupAttributes) -> None: ...
    def WriteAttributes(self, iAtt: GH_MarkupAttributes) -> None: ...


class GH_MaterialPreview:
    def __init__(self): ...
    @property
    def Colour(self) -> Color: ...
    @property
    def Selected(self) -> bool: ...
    def Image(self) -> Bitmap: ...
    @Colour.setter
    def Colour(self, Value: Color) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    def Thumbnail(self, size: int) -> Bitmap: ...


class GH_MaterialPreviewControl:
    def __init__(self): ...
    def add_ColourChanged(self, obj: ColourChangedEventHandler) -> None: ...
    def add_MaterialImagePostPaint(self, obj: MaterialImagePostPaintEventHandler) -> None: ...
    def add_SelectedChanged(self, obj: SelectedChangedEventHandler) -> None: ...
    @property
    def Colour(self) -> Color: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def SelectOnClick(self) -> bool: ...
    def remove_ColourChanged(self, obj: ColourChangedEventHandler) -> None: ...
    def remove_MaterialImagePostPaint(self, obj: MaterialImagePostPaintEventHandler) -> None: ...
    def remove_SelectedChanged(self, obj: SelectedChangedEventHandler) -> None: ...
    @Colour.setter
    def Colour(self, Value: Color) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @SelectOnClick.setter
    def SelectOnClick(self, Value: bool) -> None: ...


class GH_MDSliderDialog:
    def __init__(self): ...
    def LoadSettings(self, owner: GH_MultiDimensionalSlider) -> None: ...
    def SaveSettings(self, owner: GH_MultiDimensionalSlider) -> None: ...


class GH_MenuCustomControl:
    def __init__(self, dropdown: ToolStripDropDown, control: Control, lockFocus: bool, width: int): ...
    def add_KeyDown(self, obj: KeyDownEventHandler) -> None: ...
    def CloseEntireMenuStructure(self) -> None: ...
    @property
    def CancelItem(self) -> ToolStripMenuItem: ...
    @property
    def CommitItem(self) -> ToolStripMenuItem: ...
    @property
    def Control(self) -> Control: ...
    def remove_KeyDown(self, obj: KeyDownEventHandler) -> None: ...


class GH_MenuShortcut:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, itemPath: str): ...
    @overload
    def __init__(self, itemPath: str, shortcut: Keys, shortcutText: str): ...
    def ApplyToMenu(self, menu: MenuStrip, filter: Iterable[ToolStripMenuItem]) -> ToolStripMenuItem: ...
    @property
    def ItemHierarchy(self) -> Set(str): ...
    @property
    def ItemPath(self) -> str: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def ShortcutText(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @ItemPath.setter
    def ItemPath(self, Value: str) -> None: ...
    @Shortcut.setter
    def Shortcut(self, Value: Keys) -> None: ...
    @ShortcutText.setter
    def ShortcutText(self, Value: str) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_MenuShortcutEventArgs:
    def AppendItem(self, item: ToolStripMenuItem) -> None: ...
    @property
    def MainMenu(self) -> MenuStrip: ...
    @property
    def Owner(self) -> GH_DocumentEditor: ...


class GH_MenuShortcutSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_MenuShortCutWrapper:
    def GenerateShortcutCommand(keyCode: Keys, menu: ToolStrip) -> bool: ...


class GH_MenuStrip:
    def __init__(self): ...
    @property
    def ClickThrough(self) -> bool: ...
    @ClickThrough.setter
    def ClickThrough(self, Value: bool) -> None: ...


class GH_MenuTextBox:
    def __init__(self, dropDown: ToolStripDropDown, text: str, lockFocus: bool): ...
    def add_KeyDown(self, obj: KeyDownEventHandler) -> None: ...
    def add_TextChanged(self, obj: TextChangedEventHandler) -> None: ...
    def CloseEntireMenuStructure(self) -> None: ...
    @property
    def OriginalText(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextBoxItem(self) -> ToolStripTextBox: ...
    @property
    def Width(self) -> int: ...
    def remove_KeyDown(self, obj: KeyDownEventHandler) -> None: ...
    def remove_TextChanged(self, obj: TextChangedEventHandler) -> None: ...
    @OriginalText.setter
    def OriginalText(self, AutoPropertyValue: str) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @Width.setter
    def Width(self, Value: int) -> None: ...


class GH_MeshingParameterDialog:
    def __init__(self): ...
    @property
    def MeshingParameters(self) -> GH_MeshingParametersFrontEnd: ...
    @MeshingParameters.setter
    def MeshingParameters(self, WithEventsValue: GH_MeshingParametersFrontEnd) -> None: ...


class GH_MeshingParametersEventArgs:
    def __init__(self, parameters: MeshingParameters): ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...


class GH_MeshingParametersFrontEnd:
    def __init__(self): ...
    def add_MeshingParametersChanged(self, obj: MeshingParametersChangedEventHandler) -> None: ...
    @property
    def Parameters(self) -> MeshingParameters: ...
    def remove_MeshingParametersChanged(self, obj: MeshingParametersChangedEventHandler) -> None: ...
    @Parameters.setter
    def Parameters(self, Value: MeshingParameters) -> None: ...


class GH_MessageMustReadWindow:
    def __init__(self): ...
    @property
    def Content(self) -> str: ...
    @property
    def Delay(self) -> int: ...
    @property
    def Title(self) -> str: ...
    @Content.setter
    def Content(self, Value: str) -> None: ...
    @Delay.setter
    def Delay(self, Value: int) -> None: ...
    @Title.setter
    def Title(self, Value: str) -> None: ...


class GH_MessagesWidgetSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_MouseTracker:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialPosition: Point): ...
    @overload
    def __init__(self, initialPosition: Point, tag: Object): ...
    @overload
    def Deviation(self) -> float: ...
    @overload
    def Deviation(self, t0: DateTime, t1: DateTime) -> float: ...
    @overload
    def DropFrames(self, deviation: float) -> None: ...
    @overload
    def DropFrames(self, timeLimit: DateTime) -> None: ...
    @overload
    def DropFrames(self, deviation: float, anchor: Point) -> None: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def Frame(self, index: int) -> GH_TrackerFrame: ...
    @property
    def FrameCount(self) -> int: ...
    @property
    def MaximumDuration(self) -> TimeSpan: ...
    @property
    def MaximumFrameCount(self) -> int: ...
    @property
    def NewestFrame(self) -> GH_TrackerFrame: ...
    @property
    def OldestFrame(self) -> GH_TrackerFrame: ...
    @property
    def TemporalAccuracy(self) -> TimeSpan: ...
    def LastFrameWithinDeviation(self, deviation: float) -> int: ...
    @overload
    def Record(self, position: Point) -> None: ...
    @overload
    def Record(self, position: Point, tag: Object) -> None: ...
    @MaximumDuration.setter
    def MaximumDuration(self, Value: TimeSpan) -> None: ...
    @MaximumFrameCount.setter
    def MaximumFrameCount(self, Value: int) -> None: ...
    @TemporalAccuracy.setter
    def TemporalAccuracy(self, Value: TimeSpan) -> None: ...
    def ToString(self) -> str: ...


class GH_MRUSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_MultiDocSave:
    def __init__(self): ...
    def AddDocument(self, doc: GH_Document) -> None: ...


class GH_MultilineGooEditor:
    def __init__(self): ...
    @property
    def Modified(self) -> bool: ...
    @property
    def ParsePaths(self) -> bool: ...
    def GetDataTree(self) -> GH_Structure: ...
    @Modified.setter
    def Modified(self, Value: bool) -> None: ...
    @ParsePaths.setter
    def ParsePaths(self, Value: bool) -> None: ...
    def SetDataTree(self, data: IGH_Structure) -> None: ...


class GH_MultiSaveDocumentEntry:
    def __init__(self): ...
    def add_DocumentSaved(self, obj: DocumentSavedEventHandler) -> None: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def IsSaved(self) -> bool: ...
    def remove_DocumentSaved(self, obj: DocumentSavedEventHandler) -> None: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...


class GH_NamedViewMenuItem(GH_DoubleBufferedPanel):
    def __init__(self): ...
    @property
    def ApplyRegion(self) -> Rectangle: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def DeleteRegion(self) -> Rectangle: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def LabelRegion(self) -> Rectangle: ...
    @property
    def View(self) -> GH_NamedView: ...
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...
    @View.setter
    def View(self, Value: GH_NamedView) -> None: ...


class GH_NickNameTextBox:
    def __init__(self): ...
    def add_IconModeChanged(self, obj: IconModeChangedEventHandler) -> None: ...
    def add_NickNameChangeAccepted(self, obj: NickNameChangeAcceptedEventHandler) -> None: ...
    def add_NickNameChangeCancelled(self, obj: NickNameChangeCancelledEventHandler) -> None: ...
    def add_NickNameChanged(self, obj: NickNameChangedEventHandler) -> None: ...
    @property
    def NewIconMode(self) -> GH_IconDisplayMode: ...
    @property
    def NewNickName(self) -> str: ...
    @property
    def OldIconMode(self) -> GH_IconDisplayMode: ...
    @property
    def OldNickName(self) -> str: ...
    def remove_IconModeChanged(self, obj: IconModeChangedEventHandler) -> None: ...
    def remove_NickNameChangeAccepted(self, obj: NickNameChangeAcceptedEventHandler) -> None: ...
    def remove_NickNameChangeCancelled(self, obj: NickNameChangeCancelledEventHandler) -> None: ...
    def remove_NickNameChanged(self, obj: NickNameChangedEventHandler) -> None: ...
    @OldIconMode.setter
    def OldIconMode(self, Value: GH_IconDisplayMode) -> None: ...
    @OldNickName.setter
    def OldNickName(self, Value: str) -> None: ...


class GH_NumberPresets:
    def __init__(self): ...
    @overload
    def AddPreset(self, name: str, value: float) -> None: ...
    @overload
    def AddPreset(self, name: str, value: Decimal) -> None: ...
    @overload
    def AddPreset(self, name: str, value: float, description: str) -> None: ...
    @overload
    def AddPreset(self, name: str, value: Decimal, description: str) -> None: ...
    @property
    def Count(self) -> int: ...
    @overload
    def PopulateMenu(self, menu: ToolStrip, current: Decimal, clickDelegate: EventHandler) -> None: ...
    @overload
    def PopulateMenu(self, menu: ToolStrip, current: Decimal, format: str, clickDelegate: EventHandler) -> None: ...
    def PresetDescription(self, index: int) -> str: ...
    def PresetName(self, index: int) -> str: ...
    def PresetValue(self, index: int) -> Decimal: ...


class GH_NumberSliderPopup:
    def __init__(self): ...
    def Setup(self, owner: GH_NumberSlider) -> None: ...


class GH_NumberSliderSnappingEditor:
    def __init__(self): ...
    @property
    def SnapLines(self) -> List: ...


class GH_NumericScrollerValueEditor:
    def __init__(self): ...
    def add_OnLimitsChanged(self, obj: OnLimitsChangedEventHandler) -> None: ...
    def add_OnValueChanged(self, obj: OnValueChangedEventHandler) -> None: ...
    @property
    def LowerLimit(self) -> Decimal: ...
    @property
    def OriginalLowerLimit(self) -> Decimal: ...
    @property
    def OriginalUpperLimit(self) -> Decimal: ...
    @property
    def OriginalValue(self) -> Decimal: ...
    @property
    def tblLayout(self) -> TableLayoutPanel: ...
    @property
    def UpperLimit(self) -> Decimal: ...
    @property
    def Value(self) -> Decimal: ...
    def PrepareForCancel(self) -> None: ...
    def PrepareForCommit(self) -> None: ...
    def remove_OnLimitsChanged(self, obj: OnLimitsChangedEventHandler) -> None: ...
    def remove_OnValueChanged(self, obj: OnValueChangedEventHandler) -> None: ...
    @tblLayout.setter
    def tblLayout(self, WithEventsValue: TableLayoutPanel) -> None: ...
    def SetupValues(self, lower: Decimal, upper: Decimal, value: Decimal, decimals: int) -> None: ...


class GH_NumericTextBox:
    def __init__(self): ...
    def add_OnScrollEnd(self, obj: OnScrollEndEventHandler) -> None: ...
    def add_OnScrollStart(self, obj: OnScrollStartEventHandler) -> None: ...
    def add_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @property
    def Decimals(self) -> int: ...
    @property
    def InScrollMode(self) -> bool: ...
    @property
    def LowerLimit(self) -> float: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def PreScrollValue(self) -> float: ...
    @property
    def ScrollDamping(self) -> int: ...
    @property
    def ScrollIncrement(self) -> float: ...
    @property
    def ScrollingHasBegun(self) -> bool: ...
    @property
    def ScrollingUpwards(self) -> bool: ...
    @property
    def ScrollMethod(self) -> GH_Scroll_Method: ...
    @property
    def ScrollMouseRelation(self) -> GH_ScrollMouseRelation: ...
    @property
    def ScrollWidth(self) -> int: ...
    @property
    def Suffix(self) -> str: ...
    @property
    def UpperLimit(self) -> float: ...
    @property
    def Value(self) -> float: ...
    def OnValueChanged(self, newvalue: float, oldvalue: float, final: bool) -> None: ...
    def PrepareForCancel(self) -> None: ...
    def PrepareForCommit(self) -> None: ...
    def RefreshScrollPanel(self) -> None: ...
    def remove_OnScrollEnd(self, obj: OnScrollEndEventHandler) -> None: ...
    def remove_OnScrollStart(self, obj: OnScrollStartEventHandler) -> None: ...
    def remove_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @Decimals.setter
    def Decimals(self, val: int) -> None: ...
    @LowerLimit.setter
    def LowerLimit(self, val: float) -> None: ...
    @Prefix.setter
    def Prefix(self, Value: str) -> None: ...
    def Set(self, l_limit: float, u_limit: float, v_value: float) -> None: ...
    @ScrollDamping.setter
    def ScrollDamping(self, Value: int) -> None: ...
    @ScrollIncrement.setter
    def ScrollIncrement(self, val: float) -> None: ...
    @ScrollMethod.setter
    def ScrollMethod(self, val: GH_Scroll_Method) -> None: ...
    @ScrollMouseRelation.setter
    def ScrollMouseRelation(self, Value: GH_ScrollMouseRelation) -> None: ...
    @ScrollWidth.setter
    def ScrollWidth(self, val: int) -> None: ...
    @Suffix.setter
    def Suffix(self, Value: str) -> None: ...
    @UpperLimit.setter
    def UpperLimit(self, val: float) -> None: ...
    @Value.setter
    def Value(self, val: float) -> None: ...
    def SetDefault(self, num: float) -> None: ...


class GH_ObjectExceptionDialog:
    def __init__(self): ...


class GH_PageCurl:
    def __init__(self, anchor: Point, tip: Point): ...
    @property
    def BackgroundPath(self) -> GraphicsPath: ...
    @property
    def BackgroundShadowBrush(self) -> Brush: ...
    @property
    def BackgroundShadowPath(self) -> GraphicsPath: ...
    @property
    def CurlBrush(self) -> Brush: ...
    @property
    def CurlEdge(self) -> GraphicsPath: ...
    @property
    def CurlInterior(self) -> GraphicsPath: ...
    @property
    def CurlPath(self) -> GraphicsPath: ...
    @property
    def CurlShadowBrush(self) -> Brush: ...
    @property
    def CurlShadowPath(self) -> GraphicsPath: ...
    @property
    def CurlTip(self) -> PointF: ...
    def RenderTopology(self, g: Graphics) -> None: ...


class GH_PaintDelegate:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, control: Control, e: PaintEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, control: Control, e: PaintEventArgs) -> None: ...


class GH_PaletteSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_PanelEditor:
    def __init__(self): ...


class GH_PanelEditorControl:
    def __init__(self): ...
    @property
    def PanelContent(self) -> str: ...
    @property
    def PanelProperties(self) -> GH_PanelProperties: ...
    def PickNewFont(self) -> None: ...
    @PanelContent.setter
    def PanelContent(self, Value: str) -> None: ...
    @PanelProperties.setter
    def PanelProperties(self, Value: GH_PanelProperties) -> None: ...


class GH_ParamViewerForm:
    def __init__(self): ...
    @property
    def AutoUpdateOnPick(self) -> bool: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @AutoUpdateOnPick.setter
    def AutoUpdateOnPick(self, Value: bool) -> None: ...
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...


class GH_ParseAssemblyProgressDialog:
    def __init__(self): ...
    def SetMaxSteps(self, Steps: int) -> None: ...
    def SetStep(self, Text: str) -> None: ...


class GH_ParserFunctionViewer:
    def __init__(self): ...


class GH_PasswordBox:
    def __init__(self): ...
    def add_ValidPasswordEntered(self, obj: ValidPasswordEnteredEventHandler) -> None: ...
    @property
    def Key(self) -> Set(Byte): ...
    @property
    def Password(self) -> str: ...
    def remove_ValidPasswordEntered(self, obj: ValidPasswordEnteredEventHandler) -> None: ...
    @Key.setter
    def Key(self, Value: Set(Byte)) -> None: ...
    @Password.setter
    def Password(self, Value: str) -> None: ...


class GH_PersistentDataEditor:
    def __init__(self): ...
    def GetData(self) -> GH_Structure: ...
    def SetData(self, data: GH_Structure, typeInstance: IGH_Goo) -> None: ...


class GH_PingMessageWindow:
    def __init__(self): ...
    @property
    def Expire(self) -> DateTime: ...
    @property
    def Message(self) -> str: ...
    @Expire.setter
    def Expire(self, Value: DateTime) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...


class GH_PointCurveParamEditor:
    def __init__(self): ...
    def LoadPoint(self, pt: GH_Point) -> None: ...
    def SetDataToPoint(self) -> None: ...


class GH_PreviewExpression:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, nExpression: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, nExpression: str) -> None: ...


class GH_PreviewPreset:
    def __init__(self): ...
    def add_SelectedChanged(self, obj: SelectedChangedEventHandler) -> None: ...
    @property
    def Colour(self) -> Color: ...
    @property
    def Selected(self) -> bool: ...
    def remove_SelectedChanged(self, obj: SelectedChangedEventHandler) -> None: ...
    @Colour.setter
    def Colour(self, Value: Color) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...


class GH_PreviewSettingsChangedEventArgs:
    def __init__(self, colNormal: Color, colSelected: Color): ...
    @property
    def NormalColour(self) -> Color: ...
    @property
    def SelectedColour(self) -> Color: ...


class GH_ProfilerWidgetSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_ProgressBar:
    def __init__(self): ...
    @property
    def CurrentStep(self) -> int: ...
    @property
    def DrawPercentage(self) -> bool: ...
    @property
    def DrawSteps(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Progress(self) -> float: ...
    @DrawPercentage.setter
    def DrawPercentage(self, Value: bool) -> None: ...
    @DrawSteps.setter
    def DrawSteps(self, Value: bool) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...
    @Progress.setter
    def Progress(self, Value: float) -> None: ...
    def SetMaxSteps(self, S: int) -> None: ...
    @overload
    def SetStep(self, N: int) -> None: ...
    @overload
    def SetStep(self, N: int, sText: str) -> None: ...


class GH_PruderyFilter:
    #None = 0
    Low = 1
    Medium = 2
    High = 3
    Total = 4
    Unset = -1


class GH_PruderySettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_QuickImageEditor:
    def __init__(self): ...
    @property
    def CanvasImage(self) -> Bitmap: ...
    @property
    def FrameCrop(self) -> Rectangle: ...
    @property
    def FrameFocus(self) -> Rectangle3d: ...
    @property
    def FrameViewport(self) -> Rectangle3d: ...
    @property
    def ViewportImage(self) -> Bitmap: ...
    @property
    def ViewportName(self) -> str: ...
    @CanvasImage.setter
    def CanvasImage(self, AutoPropertyValue: Bitmap) -> None: ...
    @FrameCrop.setter
    def FrameCrop(self, AutoPropertyValue: Rectangle) -> None: ...
    @FrameFocus.setter
    def FrameFocus(self, AutoPropertyValue: Rectangle3d) -> None: ...
    @FrameViewport.setter
    def FrameViewport(self, AutoPropertyValue: Rectangle3d) -> None: ...
    @ViewportImage.setter
    def ViewportImage(self, AutoPropertyValue: Bitmap) -> None: ...
    @ViewportName.setter
    def ViewportName(self, AutoPropertyValue: str) -> None: ...


class GH_RemoteSliderControl:
    def __init__(self): ...
    def IsTarget(self, iObject: IGH_DocumentObject) -> bool: ...
    def RegisterTarget(self, iSlider: GH_NumberSlider) -> None: ...
    def UnregisterTarget(self) -> None: ...


class GH_RemoteSwitchControl:
    def __init__(self): ...
    def IsTarget(self, iObject: IGH_DocumentObject) -> bool: ...
    def RegisterTarget(self, iSwitch: GH_BooleanSwitch_Obsolete) -> None: ...
    def UnregisterTarget(self) -> None: ...


class GH_RevisionEditor:
    def __init__(self): ...


class GH_RhAttributesEditor:
    def __init__(self): ...
    def GetAttributes(self) -> ObjectAttributes: ...
    def SetDefaultAttributes(self) -> None: ...


class GH_RibbonLayoutEditor(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def add_UndoRedoChanged(self, obj: UndoRedoChangedEventHandler) -> None: ...
    def ClearUndo(self) -> None: ...
    @property
    def RedoCount(self) -> int: ...
    @property
    def RibbonLayout(self) -> GH_Layout: ...
    @property
    def UndoCount(self) -> int: ...
    def RecordUndo(self) -> None: ...
    def Redo(self) -> None: ...
    def remove_UndoRedoChanged(self, obj: UndoRedoChangedEventHandler) -> None: ...
    @RibbonLayout.setter
    def RibbonLayout(self, Value: GH_Layout) -> None: ...
    def Undo(self) -> None: ...


class GH_RibbonLayoutEditorDialog:
    def __init__(self): ...


class GH_RibbonLayoutEditorUndoRedoEventArgs:
    def __init__(self, owner: GH_RibbonLayoutEditor): ...
    @property
    def Editor(self) -> GH_RibbonLayoutEditor: ...
    @property
    def RedoCount(self) -> int: ...
    @property
    def UndoCount(self) -> int: ...


class GH_RibbonSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_RotationalFrame:
    @property
    def Angle(self) -> float: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Point(self) -> PointF: ...
    @property
    def Time(self) -> DateTime: ...
    @Angle.setter
    def Angle(self, AutoPropertyValue: float) -> None: ...
    @Pivot.setter
    def Pivot(self, AutoPropertyValue: PointF) -> None: ...
    @Point.setter
    def Point(self, AutoPropertyValue: PointF) -> None: ...
    @Time.setter
    def Time(self, AutoPropertyValue: DateTime) -> None: ...




class GH_SamplingSphere:
    def __init__(self, size: int): ...
    @property
    def SampleCount(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @overload
    def SampleSphere(self, sphere: Sphere) -> Point2d[,]: ...
    @overload
    def SampleSphere(self, sphere: Sphere, texture: GH_MemoryBitmap) -> Bitmap: ...


class GH_ScribblePropertiesDialog:
    def __init__(self): ...
    def GetUserFont(self) -> Font: ...
    def SetUserFont(self, f: Font) -> None: ...


class GH_Scroll_Method:
    none = 0
    linear = 1
    exponential = 2


class GH_ScrollMouseRelation:
    #None = 0
    Top = 1
    Bottom = 2
    Both = 3


class GH_SeparatorDisplay:
    #None = 0
    Etched = 1
    EtchedFading = 2
    Dashed = 3


class GH_SettingsCategory:
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> str: ...


class GH_SettingsGUI:
    def __init__(self): ...


class GH_SettingsServerBrowser:
    def __init__(self): ...
    @property
    def Server(self) -> GH_SettingsServer: ...
    @Server.setter
    def Server(self, Value: GH_SettingsServer) -> None: ...


class GH_Slider(GH_TextInputBaseControl):
    def __init__(self): ...
    def add_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @property
    def ControlEdgeColour(self) -> Color: ...
    @property
    def ControlShadowColour(self) -> Color: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def DrawControlBorder(self) -> bool: ...
    @property
    def DrawControlShadows(self) -> bool: ...
    @property
    def FormatMask(self) -> str: ...
    @property
    def GripBottomColour(self) -> Color: ...
    @property
    def GripDisplay(self) -> GH_SliderGripDisplay: ...
    @property
    def GripEdgeColour(self) -> Color: ...
    @property
    def GripTopColour(self) -> Color: ...
    @property
    def InternalSlider(self) -> GH_SliderBase: ...
    @property
    def Maximum(self) -> Decimal: ...
    @property
    def Minimum(self) -> Decimal: ...
    @property
    def RailBrightColour(self) -> Color: ...
    @property
    def RailDarkColour(self) -> Color: ...
    @property
    def RailDisplay(self) -> GH_SliderRailDisplay: ...
    @property
    def RailEmptyColour(self) -> Color: ...
    @property
    def RailFullColour(self) -> Color: ...
    @property
    def ShadowSize(self) -> Padding: ...
    @property
    def TextColour(self) -> Color: ...
    @property
    def TickCount(self) -> int: ...
    @property
    def TickDisplay(self) -> GH_SliderTickDisplay: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Type(self) -> GH_SliderAccuracy: ...
    @property
    def Value(self) -> Decimal: ...
    def remove_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @ControlEdgeColour.setter
    def ControlEdgeColour(self, Value: Color) -> None: ...
    @ControlShadowColour.setter
    def ControlShadowColour(self, Value: Color) -> None: ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, Value: int) -> None: ...
    @DrawControlBorder.setter
    def DrawControlBorder(self, Value: bool) -> None: ...
    @DrawControlShadows.setter
    def DrawControlShadows(self, Value: bool) -> None: ...
    @FormatMask.setter
    def FormatMask(self, Value: str) -> None: ...
    @GripBottomColour.setter
    def GripBottomColour(self, Value: Color) -> None: ...
    @GripDisplay.setter
    def GripDisplay(self, Value: GH_SliderGripDisplay) -> None: ...
    @GripEdgeColour.setter
    def GripEdgeColour(self, Value: Color) -> None: ...
    @GripTopColour.setter
    def GripTopColour(self, Value: Color) -> None: ...
    @Maximum.setter
    def Maximum(self, Value: Decimal) -> None: ...
    @Minimum.setter
    def Minimum(self, Value: Decimal) -> None: ...
    @RailBrightColour.setter
    def RailBrightColour(self, Value: Color) -> None: ...
    @RailDarkColour.setter
    def RailDarkColour(self, Value: Color) -> None: ...
    @RailDisplay.setter
    def RailDisplay(self, Value: GH_SliderRailDisplay) -> None: ...
    @RailEmptyColour.setter
    def RailEmptyColour(self, Value: Color) -> None: ...
    @RailFullColour.setter
    def RailFullColour(self, Value: Color) -> None: ...
    @ShadowSize.setter
    def ShadowSize(self, Value: Padding) -> None: ...
    @TextColour.setter
    def TextColour(self, Value: Color) -> None: ...
    @TickCount.setter
    def TickCount(self, Value: int) -> None: ...
    @TickDisplay.setter
    def TickDisplay(self, Value: GH_SliderTickDisplay) -> None: ...
    @TickFrequency.setter
    def TickFrequency(self, Value: int) -> None: ...
    @Type.setter
    def Type(self, Value: GH_SliderAccuracy) -> None: ...
    @Value.setter
    def Value(self, Value: Decimal) -> None: ...


class GH_Slider_Obsolete:
    def __init__(self): ...
    def add_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @property
    def DisplayFormat(self) -> str: ...
    @property
    def DrawRail(self) -> bool: ...
    @property
    def GripBackColor(self) -> Color: ...
    @property
    def GripForeColor(self) -> Color: ...
    @property
    def IsIntermediate(self) -> bool: ...
    @property
    def Max(self) -> float: ...
    @property
    def Min(self) -> float: ...
    @property
    def NumericFormat(self) -> str: ...
    @property
    def TextInputMode(self) -> GH_SliderInputMode: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Value(self) -> float: ...
    @property
    def ValueF(self) -> Single: ...
    def OnValueChanged(self) -> None: ...
    def remove_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    def SendMessage(hWnd: IntPtr, msg: int, wParam: int, lParam: IntPtr) -> IntPtr: ...
    @DisplayFormat.setter
    def DisplayFormat(self, Value: str) -> None: ...
    @DrawRail.setter
    def DrawRail(self, Value: bool) -> None: ...
    @GripBackColor.setter
    def GripBackColor(self, Value: Color) -> None: ...
    @GripForeColor.setter
    def GripForeColor(self, Value: Color) -> None: ...
    @Max.setter
    def Max(self, Value: float) -> None: ...
    @Min.setter
    def Min(self, Value: float) -> None: ...
    @NumericFormat.setter
    def NumericFormat(self, Value: str) -> None: ...
    @TextInputMode.setter
    def TextInputMode(self, Value: GH_SliderInputMode) -> None: ...
    @TickFrequency.setter
    def TickFrequency(self, Value: int) -> None: ...
    @Value.setter
    def Value(self, Value: float) -> None: ...
    @ValueF.setter
    def ValueF(self, Value: Single) -> None: ...


class GH_SliderAnimationSetup:
    def __init__(self): ...
    def CreatePreview(self) -> None: ...
    def FindViewport(self, view: str) -> RhinoViewport: ...
    def RegisterAnimator(self, nAnimator: GH_SliderAnimator) -> None: ...
    def RhinoViews(self) -> List: ...


class GH_SliderInputMode:
    #None = 0
    OnKeyDown = 1
    OnDoubleClick = 2
    All = 3


class GH_SolverSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_SolverSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_SourceCodeBlock:
    def __init__(self, i0: int, i1: int, b_readonly: bool): ...
    @property
    def End(self) -> int: ...
    @property
    def LineCount(self) -> int: ...
    @property
    def Readonly(self) -> bool: ...
    @property
    def Start(self) -> int: ...
    def Grow(self, line_index: int) -> None: ...


class GH_SourceCodeEditor:
    def __init__(self): ...
    @overload
    def AppendLine(self, line: GH_SourceCodeLine) -> None: ...
    @overload
    def AppendLine(self, line: str, readonly: bool) -> None: ...
    @overload
    def AppendLines(self, lines: Iterable[GH_SourceCodeLine]) -> None: ...
    @overload
    def AppendLines(self, block: str, readonly: bool) -> None: ...
    def Clear(self) -> None: ...
    def CollapseAll(self, line_index: int) -> None: ...
    def CreateManagedEditor(id: Guid) -> GH_SourceCodeEditor: ...
    def DestroyManagedEditor(id: Guid) -> bool: ...
    @property
    def CustomPanel(self) -> Panel: ...
    @property
    def ManagedID(self) -> Guid: ...
    @property
    def SC_Lines(self) -> GH_SourceCodeLines: ...
    def GetManagedEditor(id: Guid) -> GH_SourceCodeEditor: ...
    def IsManagedEditor(id: Guid) -> bool: ...
    def RegisterDefaultAssemblies(self) -> None: ...
    def RegisterDefaultGrasshopperNameSpaces(self) -> None: ...
    def RegisterDefaultRhinoCommonNameSpaces(self) -> None: ...
    def RegisterDefaultSystemNameSpaces(self) -> None: ...


class GH_SourceCodeLine:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, n_text: str): ...
    @overload
    def __init__(self, n_text: str, b_readonly: bool): ...


class GH_SourceCodeLines:
    def __init__(self): ...
    @overload
    def Add(self, text: str, readonly: bool) -> None: ...
    def FindNthBlock(self, N: int, b_include_readonly: bool, b_include_editable: bool) -> GH_SourceCodeBlock: ...
    @property
    def Blocks(self) -> List: ...
    def GetLines(self, block: GH_SourceCodeBlock) -> List: ...
    def StringSplit(delim: str, stream: str) -> List: ...


class GH_Splitter:
    def __init__(self): ...
    def AdjustNeighbour(self) -> None: ...
    def FindNeighbour(self) -> None: ...
    @property
    def MaxSize(self) -> int: ...
    @property
    def MinSize(self) -> int: ...
    @property
    def Neighbour(self) -> str: ...
    @MaxSize.setter
    def MaxSize(self, Value: int) -> None: ...
    @MinSize.setter
    def MinSize(self, Value: int) -> None: ...


class GH_StandardIcons:
    @property
    def BlankObjectIcon_24x24() -> Bitmap: ...
    @property
    def BlankParameterIcon_24x24() -> Bitmap: ...
    @property
    def ClusterIcon_24x24() -> Bitmap: ...
    @property
    def FileIconDll_32x32() -> Bitmap: ...
    @property
    def FileIconExe_32x32() -> Bitmap: ...
    @property
    def FileIconGH_32x36() -> Bitmap: ...
    @property
    def FileIconGha_32x32() -> Bitmap: ...
    @property
    def FileIconGHMissing_32x36() -> Bitmap: ...
    @property
    def FileIconGHX_32x36() -> Bitmap: ...
    @property
    def FileIconGHXMissing_32x36() -> Bitmap: ...
    @property
    def FileIconRhp_32x32() -> Bitmap: ...
    @property
    def FlattenIcon_24x24() -> Bitmap: ...
    @property
    def GraftIcon_24x24() -> Bitmap: ...
    @property
    def GroupIcon_24x24() -> Bitmap: ...
    @property
    def UnknownObjectIcon_24x24() -> Bitmap: ...
    @property
    def UserObjectIcon_24x24() -> Bitmap: ...


class GH_StateObjectFrontEnd:
    def __init__(self): ...
    @property
    def Include(self) -> bool: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Target(self) -> IGH_DocumentObject: ...
    @Include.setter
    def Include(self, Value: bool) -> None: ...
    def SetupObject(self, obj: IGH_DocumentObject) -> None: ...


class GH_TemplatePathSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_TextInputBaseControl:
    def __init__(self): ...
    @property
    def IsTextInputActive(self) -> bool: ...
    @property
    def ShowTextInputOnDoubleClick(self) -> bool: ...
    @property
    def ShowTextInputOnKeyDown(self) -> bool: ...
    @ShowTextInputOnDoubleClick.setter
    def ShowTextInputOnDoubleClick(self, Value: bool) -> None: ...
    @ShowTextInputOnKeyDown.setter
    def ShowTextInputOnKeyDown(self, Value: bool) -> None: ...


class GH_TextRenderingConstants:
    @property
    def CenterCenter() -> StringFormat: ...
    @property
    def FarCenter() -> StringFormat: ...
    @property
    def GH_CrispText() -> TextRenderingHint: ...
    @property
    def GH_SmoothText() -> TextRenderingHint: ...
    @property
    def NearCenter() -> StringFormat: ...
    def StringFormat(horizontalAlignment: StringAlignment, verticalAlignment: StringAlignment) -> StringFormat: ...


class GH_Toolstrip:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Set(ToolStripItem)): ...
    @property
    def ClickThrough(self) -> bool: ...
    @ClickThrough.setter
    def ClickThrough(self, Value: bool) -> None: ...


class GH_ToolstripItemKeyHandlerResult:
    Ignored = 0
    CloseMenu = 1
    MaintainMenu = 2


class GH_Tooltip:
    def Adjust() -> None: ...
    def AssignTooltipFields(title: str, text: str, description: str, icon: Image, diagram: Image) -> None: ...
    def Clear() -> None: ...
    @property
    def Tag() -> Object: ...
    @property
    def TooltipForm() -> GH_ToolTipForm: ...
    def IsOwner(test: Control) -> bool: ...
    def IsTag(test: Object) -> bool: ...
    def Layout() -> None: ...
    @Tag.setter
    def Tag(Value: Object) -> None: ...
    def Show(owner: Control) -> None: ...
    def TooltipDetailedInformation() -> str: ...


class GH_TooltipComponent:
    def __init__(self): ...
    def add_PopulateTooltip(self, obj: PopulateTooltipEventHandler) -> None: ...
    @property
    def Delay(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Target(self) -> Control: ...
    def Hide(self) -> None: ...
    def IsTag(self, object: Object) -> bool: ...
    def remove_PopulateTooltip(self, obj: PopulateTooltipEventHandler) -> None: ...
    @Delay.setter
    def Delay(self, Value: int) -> None: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @Tag.setter
    def Tag(self, Value: Object) -> None: ...
    @Target.setter
    def Target(self, Value: Control) -> None: ...


class GH_TooltipDisplayEventArgs:
    @property
    def Control(self) -> Control: ...
    @property
    def Description(self) -> str: ...
    @property
    def Diagram(self) -> Bitmap: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Point(self) -> Point: ...
    @property
    def Region(self) -> Rectangle: ...
    @property
    def Text(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Valid(self) -> bool: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Diagram.setter
    def Diagram(self, Value: Bitmap) -> None: ...
    @Icon.setter
    def Icon(self, Value: Bitmap) -> None: ...
    @Region.setter
    def Region(self, Value: Rectangle) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @Title.setter
    def Title(self, Value: str) -> None: ...


class GH_ToolTipForm:
    def __init__(self): ...
    @property
    def DefaultBlockWidth() -> int: ...
    @property
    def DefaultTooltipWidth() -> int: ...
    @property
    def TT_Description(self) -> str: ...
    @property
    def TT_Palette(self) -> GH_TooltipPalette: ...
    @property
    def TT_Text(self) -> str: ...
    @property
    def TT_Title(self) -> str: ...
    @TT_Description.setter
    def TT_Description(self, Value: str) -> None: ...
    @TT_Diagram.setter
    def TT_Diagram(self, Value: Image) -> None: ...
    @TT_Icon.setter
    def TT_Icon(self, Value: Image) -> None: ...
    @TT_Palette.setter
    def TT_Palette(self, Value: GH_TooltipPalette) -> None: ...
    @TT_Text.setter
    def TT_Text(self, Value: str) -> None: ...
    @TT_Title.setter
    def TT_Title(self, Value: str) -> None: ...


class GH_TooltipPalette:
    White = 0
    Black = 1
    Grey = 2
    Yellow = 3
    Orange = 4
    Red = 5
    Green = 6
    Blue = 7


class GH_TooltipWiggleSettingsUI:
    def __init__(self): ...
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class GH_TrackerFrame:
    def __init__(self, position: Point): ...


class GH_UndoRecordBrowser:
    def __init__(self): ...
    def LoadUndoRecords(self, server: GH_UndoServer) -> None: ...


class GH_UndoServerBrowser:
    def __init__(self): ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...


class GH_UnrecognizedObjectsForm:
    def __init__(self): ...


class GH_UpgradeComponentControl(GH_DoubleBufferedPanel):
    def __init__(self): ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Upgraders(self) -> List: ...
    def PopulateTooltip(self, sender: Object, e: GH_TooltipDisplayEventArgs) -> None: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...


class GH_UpgradeComponentForm:
    def __init__(self): ...


class GH_UpgradeUndoWarningDialog:
    def __init__(self): ...


class GH_UserObjectDeleteConfirmationDialog:
    def __init__(self): ...
    def SetMessage(self, objectName: str) -> None: ...


class GH_UserObjectProperties:
    def __init__(self): ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def InstanceDescription(self) -> GH_InstanceDescription: ...
    @property
    def ObjectIcon(self) -> Bitmap: ...
    @ObjectIcon.setter
    def ObjectIcon(self, Value: Bitmap) -> None: ...


class GH_ValueChangedEventArgs:
    def __init__(self, newval: float, oldval: float, final: bool): ...
    @property
    def IsFinal(self) -> bool: ...
    @property
    def NewValue(self) -> float: ...
    @property
    def OldValue(self) -> float: ...


class GH_ValueListEditor:
    def __init__(self): ...
    def AssignValues(self, values: List[GH_ValueListItem]) -> None: ...
    @property
    def Changed(self) -> bool: ...
    def RetrieveValues(self) -> List: ...


class GH_VariableParameterManager:
    def __init__(self): ...
    @overload
    def AddProxy(self, param: IGH_Param, bVariable: bool, bMutable: bool) -> None: ...
    @overload
    def AddProxy(self, sNickName: str, bVariable: bool, bMutable: bool) -> None: ...
    def ClearParameters(self) -> None: ...
    @property
    def Component(self) -> IGH_VarParamComponent: ...
    @property
    def NameConstructor(self) -> IGH_ParamNameConstructor: ...
    @property
    def Proxies(self) -> List: ...
    @property
    def Side(self) -> GH_VarParamSide: ...
    @Component.setter
    def Component(self, Value: IGH_VarParamComponent) -> None: ...
    @NameConstructor.setter
    def NameConstructor(self, Value: IGH_ParamNameConstructor) -> None: ...
    @Side.setter
    def Side(self, Value: GH_VarParamSide) -> None: ...


class GH_VariableParamProxy:
    def __init__(self): ...
    @property
    def BlankID(self) -> bool: ...
    @property
    def Deleted(self) -> bool: ...
    @property
    def ID(self) -> Guid: ...
    @property
    def Mutable(self) -> bool: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Variable(self) -> bool: ...
    @Deleted.setter
    def Deleted(self, Value: bool) -> None: ...
    @ID.setter
    def ID(self, Value: Guid) -> None: ...
    @Mutable.setter
    def Mutable(self, Value: bool) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @Variable.setter
    def Variable(self, Value: bool) -> None: ...
    def UpdateUI(self) -> None: ...


class GH_VersionHistoryForm:
    def __init__(self): ...


class GH_VersionHistoryRelease:
    def __init__(self): ...
    @property
    def Expanded(self) -> bool: ...
    def LayoutRelease(self) -> None: ...
    def PopulateRelease(self, lines: Iterable[str]) -> None: ...
    @Expanded.setter
    def Expanded(self, Value: bool) -> None: ...


class GH_VerticalScrollBar(GH_DoubleBufferedPanel):
    def __init__(self): ...
    def add_ScrollRatioChanged(self, obj: ScrollRatioChangedEventHandler) -> None: ...
    @property
    def Grip(self) -> Rectangle: ...
    @property
    def GripRegion(self) -> Rectangle: ...
    @property
    def ImpliedVerticalOffset(self) -> int: ...
    @property
    def ScreenHeight(self) -> int: ...
    @property
    def TargetHeight(self) -> int: ...
    @property
    def TargetRatio(self) -> float: ...
    def remove_ScrollRatioChanged(self, obj: ScrollRatioChangedEventHandler) -> None: ...
    @ImpliedVerticalOffset.setter
    def ImpliedVerticalOffset(self, Value: int) -> None: ...
    @ScreenHeight.setter
    def ScreenHeight(self, Value: int) -> None: ...
    @TargetHeight.setter
    def TargetHeight(self, Value: int) -> None: ...
    @TargetRatio.setter
    def TargetRatio(self, Value: float) -> None: ...


class GH_VerticalSeparator(GH_DoubleBufferedPanel):
    def __init__(self): ...


class GH_ViewportSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_VoronoiWarningForm:
    def __init__(self): ...


class GH_WidgetsSettingsCategory(GH_SettingsCategory):
    def __init__(self): ...
    @property
    def Description(self) -> str: ...


class GH_WindowsControlUtil:
    @overload
    def FixTextRenderingDefault(control: Control) -> None: ...
    @overload
    def FixTextRenderingDefault(iControls: ControlCollection) -> None: ...


class GH_WindowsFormUtil:
    def CenterFormOnCursor(F: Form, limitToScreen: bool) -> None: ...
    def CenterFormOnEditor(F: Form, limitToScreen: bool) -> None: ...
    def CenterFormOnScreen(F: Form, limitToScreen: bool) -> None: ...
    def CenterFormOnWindow(F: Form, parentWindow: Form, limitToScreen: bool) -> None: ...


class GH_YakDownloadFormEto:
    def __init__(self, items: Iterable[MissingObjectItem]): ...


class IconModeChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, new_mode: GH_IconDisplayMode, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, new_mode: GH_IconDisplayMode) -> None: ...


class IGH_Embeddable:
    def PrepareForCancel(self) -> None: ...
    def PrepareForCommit(self) -> None: ...


class IGH_FileDropTarget:
    def AcceptableFile(self, path: str) -> bool: ...
    def HandleDrop(self, path: str, mouse_pt: PointF) -> bool: ...


class IGH_FixedSizeControl:
    def NearestHeight(self, h: int) -> int: ...
    def NearestWidth(self, w: int) -> int: ...


class IGH_SettingCategory:
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Parent(self) -> str: ...


class IGH_SettingFrontend:
    @property
    def Category(self) -> str: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    def SettingsUI(self) -> Control: ...


class IGH_ToolstripItemKeyHandler:
    def RespondToEnter(self) -> GH_ToolstripItemKeyHandlerResult: ...
    def RespondToEscape(self) -> GH_ToolstripItemKeyHandlerResult: ...


class IGH_Tooltip:
    @property
    def Description(self) -> str: ...
    @property
    def Palette(self) -> GH_TooltipPalette: ...
    @property
    def Text(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Diagram.setter
    def Diagram(self, Value: Image) -> None: ...
    @Icon.setter
    def Icon(self, Value: Image) -> None: ...
    @Palette.setter
    def Palette(self, Value: GH_TooltipPalette) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @Title.setter
    def Title(self, Value: str) -> None: ...




class IntervalChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Interval2DPicker, int: UVInterval, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Interval2DPicker, int: UVInterval) -> None: ...


class KeyDownEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MenuCustomControl, e: KeyEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MenuCustomControl, e: KeyEventArgs) -> None: ...


class KeyDownEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MenuTextBox, e: KeyEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MenuTextBox, e: KeyEventArgs) -> None: ...


class MaterialImagePostPaintEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, image: Bitmap, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, image: Bitmap) -> None: ...


class MeshingParametersChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_MeshingParametersEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_MeshingParametersEventArgs) -> None: ...


class MissingObjectItem:
    def __init__(self): ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Id.setter
    def Id(self, AutoPropertyValue: Guid) -> None: ...
    @Name.setter
    def Name(self, AutoPropertyValue: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...


class NickNameChangeAcceptedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NickNameTextBox, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NickNameTextBox) -> None: ...


class NickNameChangeCancelledEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NickNameTextBox, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NickNameTextBox) -> None: ...


class NickNameChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, new_name: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, new_name: str) -> None: ...


class OnLimitsChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NumericScrollerValueEditor, lower: Decimal, upper: Decimal, value: Decimal, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NumericScrollerValueEditor, lower: Decimal, upper: Decimal, value: Decimal) -> None: ...


class OnScrollEndEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NumericTextBox, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NumericTextBox) -> None: ...


class OnScrollStartEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NumericTextBox, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NumericTextBox) -> None: ...


class OnValueChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NumericScrollerValueEditor, lower: Decimal, upper: Decimal, value: Decimal, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NumericScrollerValueEditor, lower: Decimal, upper: Decimal, value: Decimal) -> None: ...


class PathChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_FolderPathBrowser, nPath: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_FolderPathBrowser, nPath: str) -> None: ...


class PopulateTooltipEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_TooltipDisplayEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_TooltipDisplayEventArgs) -> None: ...


class PostPaint:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, graphics: Graphics, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, graphics: Graphics) -> None: ...


class ScrollRatioChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_VerticalScrollBar, ratio: float, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_VerticalScrollBar, ratio: float) -> None: ...


class SelectedChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class SelectedChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class SelectedIndexChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_ListScroller, e: GH_ListScrollerChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_ListScroller, e: GH_ListScrollerChangedEventArgs) -> None: ...


class SelectionChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class TextChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_InfoTextBoxEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_InfoTextBoxEventArgs) -> None: ...


class TextChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MenuTextBox, newText: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MenuTextBox, newText: str) -> None: ...


class UndoRedoChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_RibbonLayoutEditorUndoRedoEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_RibbonLayoutEditorUndoRedoEventArgs) -> None: ...


class ValidPasswordEnteredEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class ValueChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DigitScrollerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_DigitScrollerEventArgs) -> None: ...


class ValueChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NumericTextBox, e: GH_ValueChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NumericTextBox, e: GH_ValueChangedEventArgs) -> None: ...


class ValueChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_SliderEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_SliderEventArgs) -> None: ...


class ValueChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Slider_Obsolete, nValue: float, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Slider_Obsolete, nValue: float, bIntermediate: bool) -> None: ...


class ValuesChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_ControlKnobValueEditor, lower: Decimal, upper: Decimal, value: Decimal, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_ControlKnobValueEditor, lower: Decimal, upper: Decimal, value: Decimal) -> None: ...
