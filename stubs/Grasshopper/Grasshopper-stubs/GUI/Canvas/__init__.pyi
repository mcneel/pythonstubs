__all__ = ['Interaction','TagArtists']
from typing import Tuple, Set, Iterable, List, overload


class CanvasPaintBackgroundEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPaintBeginEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPaintEndEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPostPaintGroupsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPostPaintObjectsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPostPaintOverlayEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPostPaintWidgetsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPostPaintWiresEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPrePaintGroupsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPrePaintObjectsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPrePaintOverlayEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPrePaintWidgetsEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class CanvasPrePaintWiresEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas) -> None: ...


class Document_ModifiedChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Document, e: GH_DocModifiedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Document, e: GH_DocModifiedEventArgs) -> None: ...


class Document_ObjectsAddedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...


class Document_ObjectsDeletedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...


class Document_SettingsChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Document, e: GH_DocSettingsEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Document, e: GH_DocSettingsEventArgs) -> None: ...


class DocumentChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs) -> None: ...


class DocumentObjectMouseDownEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_CanvasObjectMouseDownEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_CanvasObjectMouseDownEventArgs) -> None: ...


class DocumentObjectsDeletedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...


class GH_Border:
    def __init__(self, rectangle: RectangleF, topology: GH_BorderTopology): ...
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def CreateBorders(box: RectangleF, borderSize: int) -> List: ...
    @overload
    def CreateBorders(box: RectangleF, padding: Padding) -> List: ...
    @overload
    def CreateBorders(box: RectangleF, borderWidth: int, borderHeight: int) -> List: ...
    @overload
    def CreateBorders(box: RectangleF, borderLeft: int, borderRight: int, borderTop: int, borderBottom: int) -> List: ...
    @property
    def Region(self) -> RectangleF: ...
    @property
    def Size_Cursor(self) -> Cursor: ...
    @property
    def Topology(self) -> GH_BorderTopology: ...


class GH_BorderTopology:
    TopRight = 0
    TopLeft = 1
    BottomLeft = 2
    BottomRight = 3
    Top = 4
    Left = 5
    Bottom = 6
    Right = 7
    #None = -2
    All = -1


class GH_Canvas:
    def __init__(self): ...
    def add_CanvasPaintBackground(self, obj: CanvasPaintBackgroundEventHandler) -> None: ...
    def add_CanvasPaintBegin(self, obj: CanvasPaintBeginEventHandler) -> None: ...
    def add_CanvasPaintEnd(self, obj: CanvasPaintEndEventHandler) -> None: ...
    def add_CanvasPostPaintGroups(self, obj: CanvasPostPaintGroupsEventHandler) -> None: ...
    def add_CanvasPostPaintObjects(self, obj: CanvasPostPaintObjectsEventHandler) -> None: ...
    def add_CanvasPostPaintOverlay(self, obj: CanvasPostPaintOverlayEventHandler) -> None: ...
    def add_CanvasPostPaintWidgets(self, obj: CanvasPostPaintWidgetsEventHandler) -> None: ...
    def add_CanvasPostPaintWires(self, obj: CanvasPostPaintWiresEventHandler) -> None: ...
    def add_CanvasPrePaintGroups(self, obj: CanvasPrePaintGroupsEventHandler) -> None: ...
    def add_CanvasPrePaintObjects(self, obj: CanvasPrePaintObjectsEventHandler) -> None: ...
    def add_CanvasPrePaintOverlay(self, obj: CanvasPrePaintOverlayEventHandler) -> None: ...
    def add_CanvasPrePaintWidgets(self, obj: CanvasPrePaintWidgetsEventHandler) -> None: ...
    def add_CanvasPrePaintWires(self, obj: CanvasPrePaintWiresEventHandler) -> None: ...
    def add_Document_ModifiedChanged(self, obj: Document_ModifiedChangedEventHandler) -> None: ...
    def add_Document_ObjectsAdded(self, obj: Document_ObjectsAddedEventHandler) -> None: ...
    def add_Document_ObjectsDeleted(self, obj: Document_ObjectsDeletedEventHandler) -> None: ...
    def add_Document_SettingsChanged(self, obj: Document_SettingsChangedEventHandler) -> None: ...
    def add_DocumentChanged(self, obj: DocumentChangedEventHandler) -> None: ...
    def add_DocumentObjectMouseDown(self, obj: DocumentObjectMouseDownEventHandler) -> None: ...
    def add_DocumentObjectsDeleted(self, obj: DocumentObjectsDeletedEventHandler) -> None: ...
    def add_ModifiersChanged(self, obj: ModifiersChangedEventHandler) -> None: ...
    def add_NavigationSettingsChanged(obj: NavigationSettingsChangedEventHandler) -> None: ...
    def add_ViewportChanged(self, obj: ViewportChangedEventHandler) -> None: ...
    def add_WidgetListCreated(obj: WidgetListCreatedEventHandler) -> None: ...
    def AddTagArtist(self, artist: IGH_TagArtist) -> None: ...
    def AddValidator(self, validator: IGH_CanvasValidator) -> None: ...
    def AutoSaveDocument(self, trigger: GH_AutoSaveTrigger) -> None: ...
    def CanvasOldSchoolMenu(self) -> ToolStripDropDownMenu: ...
    def CreateMRUPanels(self) -> None: ...
    def CreatePreview(self, size: Size) -> Bitmap: ...
    def DestroyMRUPanels(self) -> None: ...
    def GenerateHiResImage(self, rec: Rectangle, settings: GH_ImageSettings) -> Tuple[List, Size]: ...
    def GenerateHiResImageTile(self, vp: GH_Viewport, bg: Color) -> Bitmap: ...
    @property
    def ActiveInteraction(self) -> IGH_MouseInteraction: ...
    @property
    def ActiveObject(self) -> IGH_DocumentObject: ...
    @property
    def ActiveWidget(self) -> IGH_Widget: ...
    @property
    def CursorCanvasPosition(self) -> PointF: ...
    @property
    def CursorControlPosition(self) -> Point: ...
    @property
    def DisplayVoronoiWarning() -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def DrawingMode(self) -> GH_CanvasMode: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def HasControlWithFocus(self) -> bool: ...
    @property
    def IsActiveInteraction(self) -> bool: ...
    @property
    def IsActiveObject(self) -> bool: ...
    @property
    def IsActiveWidget(self) -> bool: ...
    @property
    def IsDocument(self) -> bool: ...
    @property
    def MarkovSuggestions(self) -> List: ...
    @property
    def ModifiersEnabled(self) -> bool: ...
    @property
    def NavigationPanDown() -> Keys: ...
    @property
    def NavigationPanLeft() -> Keys: ...
    @property
    def NavigationPanPixels() -> int: ...
    @property
    def NavigationPanRight() -> Keys: ...
    @property
    def NavigationPanUp() -> Keys: ...
    @property
    def NavigationZoomFactor() -> float: ...
    @property
    def NavigationZoomIn() -> Keys: ...
    @property
    def NavigationZoomOut() -> Keys: ...
    @property
    def Painter(self) -> GH_Painter: ...
    @property
    def Painting(self) -> bool: ...
    @property
    def RecordPreviewBoundary(self) -> bool: ...
    @property
    def TagArtistIDs(self) -> List: ...
    @property
    def ThumbnailSize() -> Size: ...
    @property
    def TooltipDelay(self) -> int: ...
    @property
    def Validator(self) -> IGH_CanvasValidator: ...
    @property
    def ValidGraphics(self) -> bool: ...
    @property
    def Viewport(self) -> GH_Viewport: ...
    @property
    def Widgets(self) -> List: ...
    @property
    def ZoomFadeHigh() -> int: ...
    @property
    def ZoomFadeLow() -> int: ...
    @property
    def ZoomFadeMedium() -> int: ...
    def GetCanvasScreenBuffer(self, modeOverride: GH_CanvasMode) -> Bitmap: ...
    def GetGraphicsObject(self, setupDisplayTransform: bool) -> Graphics: ...
    def HideMRUPanels(self) -> None: ...
    @overload
    def InstantiateNewObject(self, id: Guid, at: PointF, update: bool) -> bool: ...
    @overload
    def InstantiateNewObject(self, id: Guid, init_code: str, at: PointF, update: bool) -> bool: ...
    def Navigate(self, navigation: GH_CanvasNavigation) -> None: ...
    def OnViewportChanged(self) -> None: ...
    def ReevaluateMarkovSuggestions(self) -> None: ...
    def remove_CanvasPaintBackground(self, obj: CanvasPaintBackgroundEventHandler) -> None: ...
    def remove_CanvasPaintBegin(self, obj: CanvasPaintBeginEventHandler) -> None: ...
    def remove_CanvasPaintEnd(self, obj: CanvasPaintEndEventHandler) -> None: ...
    def remove_CanvasPostPaintGroups(self, obj: CanvasPostPaintGroupsEventHandler) -> None: ...
    def remove_CanvasPostPaintObjects(self, obj: CanvasPostPaintObjectsEventHandler) -> None: ...
    def remove_CanvasPostPaintOverlay(self, obj: CanvasPostPaintOverlayEventHandler) -> None: ...
    def remove_CanvasPostPaintWidgets(self, obj: CanvasPostPaintWidgetsEventHandler) -> None: ...
    def remove_CanvasPostPaintWires(self, obj: CanvasPostPaintWiresEventHandler) -> None: ...
    def remove_CanvasPrePaintGroups(self, obj: CanvasPrePaintGroupsEventHandler) -> None: ...
    def remove_CanvasPrePaintObjects(self, obj: CanvasPrePaintObjectsEventHandler) -> None: ...
    def remove_CanvasPrePaintOverlay(self, obj: CanvasPrePaintOverlayEventHandler) -> None: ...
    def remove_CanvasPrePaintWidgets(self, obj: CanvasPrePaintWidgetsEventHandler) -> None: ...
    def remove_CanvasPrePaintWires(self, obj: CanvasPrePaintWiresEventHandler) -> None: ...
    def remove_Document_ModifiedChanged(self, obj: Document_ModifiedChangedEventHandler) -> None: ...
    def remove_Document_ObjectsAdded(self, obj: Document_ObjectsAddedEventHandler) -> None: ...
    def remove_Document_ObjectsDeleted(self, obj: Document_ObjectsDeletedEventHandler) -> None: ...
    def remove_Document_SettingsChanged(self, obj: Document_SettingsChangedEventHandler) -> None: ...
    def remove_DocumentChanged(self, obj: DocumentChangedEventHandler) -> None: ...
    def remove_DocumentObjectMouseDown(self, obj: DocumentObjectMouseDownEventHandler) -> None: ...
    def remove_DocumentObjectsDeleted(self, obj: DocumentObjectsDeletedEventHandler) -> None: ...
    def remove_ModifiersChanged(self, obj: ModifiersChangedEventHandler) -> None: ...
    def remove_NavigationSettingsChanged(obj: NavigationSettingsChangedEventHandler) -> None: ...
    def remove_ViewportChanged(self, obj: ViewportChangedEventHandler) -> None: ...
    def remove_WidgetListCreated(obj: WidgetListCreatedEventHandler) -> None: ...
    def RemoveAllTagArtists(self) -> None: ...
    @overload
    def RemoveTagArtist(self, artist: IGH_TagArtist) -> int: ...
    @overload
    def RemoveTagArtist(self, artistId: Guid) -> int: ...
    def RemoveValidator(self, validator: IGH_CanvasValidator) -> None: ...
    def ScheduleRegen(self, delay: int) -> None: ...
    @ActiveInteraction.setter
    def ActiveInteraction(self, Value: IGH_MouseInteraction) -> None: ...
    @ActiveObject.setter
    def ActiveObject(self, Value: IGH_DocumentObject) -> None: ...
    @ActiveWidget.setter
    def ActiveWidget(self, Value: IGH_Widget) -> None: ...
    @DisplayVoronoiWarning.setter
    def DisplayVoronoiWarning(AutoPropertyValue: bool) -> None: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...
    @ModifiersEnabled.setter
    def ModifiersEnabled(self, Value: bool) -> None: ...
    @NavigationPanDown.setter
    def NavigationPanDown(Value: Keys) -> None: ...
    @NavigationPanLeft.setter
    def NavigationPanLeft(Value: Keys) -> None: ...
    @NavigationPanPixels.setter
    def NavigationPanPixels(Value: int) -> None: ...
    @NavigationPanRight.setter
    def NavigationPanRight(Value: Keys) -> None: ...
    @NavigationPanUp.setter
    def NavigationPanUp(Value: Keys) -> None: ...
    @NavigationZoomFactor.setter
    def NavigationZoomFactor(Value: float) -> None: ...
    @NavigationZoomIn.setter
    def NavigationZoomIn(Value: Keys) -> None: ...
    @NavigationZoomOut.setter
    def NavigationZoomOut(Value: Keys) -> None: ...
    @RecordPreviewBoundary.setter
    def RecordPreviewBoundary(self, AutoPropertyValue: bool) -> None: ...
    @ValidGraphics.setter
    def ValidGraphics(self, Value: bool) -> None: ...
    def SetSmartTextRenderingHint(self) -> None: ...
    @overload
    def ShowComponentSearchBox(self) -> bool: ...
    @overload
    def ShowComponentSearchBox(self, at: Point) -> bool: ...
    def ShowMRUPanels(self) -> None: ...
    def ShowNavigationPane(self) -> None: ...
    def ShowSearchDialog(self, centerOnCursor: bool) -> None: ...
    def StartAutoPan(self) -> None: ...
    def StopAutoPan(self) -> None: ...
    def UpdateDocumentPreview(self) -> None: ...


class GH_CanvasChannel:
    First = 0
    Groups = 0
    Wires = 10
    Objects = 20
    Overlay = 30
    Last = 30


class GH_CanvasDocumentChangedEventArgs:
    def __init__(self, newDoc: GH_Document, oldDoc: GH_Document): ...
    @property
    def NewDocument(self) -> GH_Document: ...
    @property
    def OldDocument(self) -> GH_Document: ...


class GH_CanvasDropTargetValidator(GH_CanvasValidator):
    def __init__(self): ...
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    def AppliesToDocument(self, id: Guid) -> bool: ...
    def CanAcceptObject(self, id: Guid) -> bool: ...
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @property
    def DropDelegate(self) -> Action: ...
    @property
    def DropID(self) -> Guid: ...
    @property
    def DropRegion(self) -> RectangleF: ...
    @property
    def DropText(self) -> str: ...
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @DropDelegate.setter
    def DropDelegate(self, AutoPropertyValue: Action) -> None: ...
    @DropID.setter
    def DropID(self, AutoPropertyValue: Guid) -> None: ...
    @DropRegion.setter
    def DropRegion(self, AutoPropertyValue: RectangleF) -> None: ...
    @DropText.setter
    def DropText(self, AutoPropertyValue: str) -> None: ...


class GH_CanvasMode:
    Control = 0
    Thumbnail = 1
    Export = 2


class GH_CanvasNavigation:
    #None = 0
    PanLeft = 1
    PanRight = 2
    PanUp = 3
    PanDown = 4
    ZoomIn = 5
    ZoomOut = 6


class GH_CanvasValidator:
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    def AppliesToDocument(self, id: Guid) -> bool: ...
    def CanAcceptObject(self, id: Guid) -> bool: ...
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    def CanNavigateCanvas(self) -> bool: ...
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...


class GH_CanvasViewportChangedEventArgs:
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Viewport(self) -> GH_Viewport: ...


class GH_CanvasWidgetListEventArgs:
    def AddWidget(self, widget: IGH_Widget) -> None: ...


class GH_CanvasWireValidator(GH_CanvasValidator):
    def __init__(self): ...
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    def AppliesToDocument(self, id: Guid) -> bool: ...
    def CanAcceptObject(self, id: Guid) -> bool: ...
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @property
    def WireDelegate(self) -> Action: ...
    @property
    def WireMotionText(self) -> str: ...
    @property
    def WireSource(self) -> Guid: ...
    @property
    def WireSourceText(self) -> str: ...
    @property
    def WireTarget(self) -> Guid: ...
    @property
    def WireTargetText(self) -> str: ...
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @WireDelegate.setter
    def WireDelegate(self, AutoPropertyValue: Action) -> None: ...
    @WireMotionText.setter
    def WireMotionText(self, AutoPropertyValue: str) -> None: ...
    @WireSource.setter
    def WireSource(self, AutoPropertyValue: Guid) -> None: ...
    @WireSourceText.setter
    def WireSourceText(self, AutoPropertyValue: str) -> None: ...
    @WireTarget.setter
    def WireTarget(self, AutoPropertyValue: Guid) -> None: ...
    @WireTargetText.setter
    def WireTargetText(self, AutoPropertyValue: str) -> None: ...


class GH_Capsule:
    @overload
    def AddInputGrip(self, P: PointF) -> None: ...
    @overload
    def AddInputGrip(self, P: Point) -> None: ...
    @overload
    def AddInputGrip(self, Y: Single) -> None: ...
    @overload
    def AddInputGrip(self, X: Single, Y: Single) -> None: ...
    @overload
    def AddOutputGrip(self, P: Point) -> None: ...
    @overload
    def AddOutputGrip(self, P: PointF) -> None: ...
    @overload
    def AddOutputGrip(self, Y: Single) -> None: ...
    @overload
    def AddOutputGrip(self, X: Single, Y: Single) -> None: ...
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def CreateCapsule(box: RectangleF, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    def CreateCapsule(box: Rectangle, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    def CreateCapsule(box: Rectangle, palette: GH_Palette, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateCapsule(box: RectangleF, palette: GH_Palette, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateCapsule(box: RectangleF, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateCapsule(box: Rectangle, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radii: Set(int), highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radii: Set(int), highlight: int) -> GH_Capsule: ...
    def Dispose(self) -> None: ...
    @property
    def Box(self) -> Rectangle: ...
    @property
    def Box_Content(self) -> Rectangle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def Highlight(self) -> int: ...
    @property
    def HighlightShape(self) -> GraphicsPath: ...
    @property
    def InputGrips(self) -> List: ...
    @property
    def JaggedLeft(self) -> bool: ...
    @property
    def JaggedRight(self) -> bool: ...
    @property
    def MaxRadius(self) -> int: ...
    @property
    def OutlineShape(self) -> GraphicsPath: ...
    @property
    def OutputGrips(self) -> List: ...
    @property
    def Palette(self) -> GH_Palette: ...
    @property
    def Radius(self, index: int) -> int: ...
    @property
    def RenderEngine(self) -> GH_CapsuleRenderEngine: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextOrientation(self) -> GH_Orientation: ...
    @overload
    def Render(self, G: Graphics, colour: Color) -> None: ...
    @overload
    def Render(self, G: Graphics, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, colour: Color) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Graphics, selected: bool, locked: bool, hidden: bool) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, selected: bool, locked: bool, hidden: bool) -> None: ...
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @Palette.setter
    def Palette(self, Value: GH_Palette) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @TextOrientation.setter
    def TextOrientation(self, Value: GH_Orientation) -> None: ...
    def SetJaggedEdges(self, left: bool, right: bool) -> None: ...


class GH_CapsuleRenderEngine:
    @overload
    def CreateHighlightBar(rec: Rectangle, radius: int, size: int) -> GraphicsPath: ...
    @overload
    def CreateHighlightBar(rec: Rectangle, R0: int, R1: int, size: int) -> GraphicsPath: ...
    @overload
    def CreateHighlightBar(rec: Rectangle, radius: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    def CreateHighlightBar(rec: Rectangle, R0: int, R1: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    def CreateJaggedRectangle(rec: RectangleF, R0: Single, R1: Single, R2: Single, R3: Single, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    def CreateRoundedRectangle(rec: Rectangle, radius: int) -> GraphicsPath: ...
    @overload
    def CreateRoundedRectangle(rec: RectangleF, radius: Single) -> GraphicsPath: ...
    @overload
    def CreateRoundedRectangle(rec: RectangleF, R0: Single, R1: Single, R2: Single, R3: Single) -> GraphicsPath: ...
    @overload
    def CreateRoundedRectangle(rec: Rectangle, R0: int, R1: int, R2: int, R3: int) -> GraphicsPath: ...
    def GetImpliedPalette(obj: IGH_ActiveObject) -> GH_Palette: ...
    @overload
    def GetImpliedStyle(palette: GH_Palette, attributes: IGH_Attributes) -> GH_PaletteStyle: ...
    @overload
    def GetImpliedStyle(palette: GH_Palette, selected: bool, locked: bool, hidden: bool) -> GH_PaletteStyle: ...
    def RenderAlphaFill(self, G: Graphics) -> None: ...
    def RenderBackground_Alternative(self, G: Graphics, colourOverride: Color, drawAlphaGrid: bool) -> None: ...
    def RenderBackground(self, G: Graphics, zoom: Single, style: GH_PaletteStyle) -> None: ...
    def RenderBoundaryDots(self, G: Graphics, count: int, style: GH_PaletteStyle) -> None: ...
    def RenderGrips_Alternative(self, G: Graphics) -> None: ...
    def RenderGrips(self, G: Graphics) -> None: ...
    def RenderHighlight(self, G: Graphics) -> None: ...
    @overload
    def RenderIcon(self, G: Graphics, icon: Image, offsetX: int, offsetY: int) -> None: ...
    @overload
    def RenderIcon(self, G: Graphics, icon: Image, box: RectangleF, offsetX: int, offsetY: int) -> None: ...
    def RenderInputGrip(G: Graphics, zoom: Single, loc: PointF, full: bool) -> None: ...
    def RenderMessage(self, G: Graphics, message: str, style: GH_PaletteStyle) -> Rectangle: ...
    def RenderOutlines(self, G: Graphics, zoom: Single, style: GH_PaletteStyle) -> None: ...
    def RenderOutputGrip(G: Graphics, zoom: Single, loc: PointF, full: bool) -> None: ...
    def RenderText(self, G: Graphics, colour: Color) -> None: ...


class GH_DisplayMatrix:
    CanvasToControl = 0
    ControlToCanvas = 1


class GH_DocDiagramPainter:
    def __init__(self): ...
    @property
    def BoundingBox(self) -> RectangleF: ...
    @property
    def DrawingBox(self) -> Rectangle: ...
    @property
    def IgnoreSelectedStates(self) -> bool: ...
    @property
    def Image(self) -> Bitmap: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Zoom(self) -> Single: ...
    @overload
    def MapPoint(self, pt: PointF) -> PointF: ...
    @overload
    def MapPoint(self, pt: Point) -> Point: ...
    def MapRectangle(self, rec: Rectangle) -> Rectangle: ...
    @overload
    def MapX(self, x: Single) -> Single: ...
    @overload
    def MapX(self, x: int) -> int: ...
    @overload
    def MapY(self, y: int) -> int: ...
    @overload
    def MapY(self, y: Single) -> Single: ...
    @overload
    def PaintDiagram(self, objs: Iterable[IGH_DocumentObject], approx_size: int, inflate: int) -> bool: ...
    @overload
    def PaintDiagram(self, objs: Iterable[IGH_DocumentObject], mapWidth: int, mapHeight: int, inflate: int) -> bool: ...
    @IgnoreSelectedStates.setter
    def IgnoreSelectedStates(self, Value: bool) -> None: ...
    def UnmapPoint(self, pt: Point) -> Point: ...
    def UnmapRectangle(self, rec: Rectangle) -> Rectangle: ...
    def UnmapX(self, x: int) -> int: ...
    def UnmapY(self, y: int) -> int: ...


class GH_DragDropFileAction:
    #None = 0
    Open = 1
    Examine = 2
    Insert = 3
    Group = 4
    Cluster = 5


class GH_FilePanel:
    def Dispose(self) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def ClientBounds(self) -> Rectangle: ...
    @property
    def Color(self) -> Color: ...
    @property
    def DisplayDate(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Hover(self) -> bool: ...
    @property
    def ImageBounds(self) -> Rectangle: ...
    @property
    def IsAnimating(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def TargetDate(self) -> DateTime: ...
    @property
    def TargetFile(self) -> str: ...
    @property
    def TargetThumbnail(self) -> Bitmap: ...
    @property
    def TextBounds(self) -> Rectangle: ...
    def MouseEnter(self) -> None: ...
    def MouseLeave(self) -> None: ...
    def NewPanel(targetFile: str, targetDate: DateTime) -> GH_FilePanel: ...
    def RenderPanel(self, graphics: Graphics) -> None: ...
    @Color.setter
    def Color(self, AutoPropertyValue: Color) -> None: ...
    @Hover.setter
    def Hover(self, AutoPropertyValue: bool) -> None: ...
    @Location.setter
    def Location(self, Value: Point) -> None: ...
    @TargetDate.setter
    def TargetDate(self, AutoPropertyValue: DateTime) -> None: ...
    @TargetFile.setter
    def TargetFile(self, AutoPropertyValue: str) -> None: ...
    @TargetThumbnail.setter
    def TargetThumbnail(self, AutoPropertyValue: Bitmap) -> None: ...
    def SetNewLocation(self, point: Point, start: int, duration: int) -> None: ...
    def TargetFileChanged(self, watcher: GH_AsynchFileData) -> None: ...


class GH_ImageSettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, folder: str, filename: str, extension: str): ...
    @property
    def BackColour(self) -> Color: ...
    @property
    def Extension(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Folder(self) -> str: ...
    @property
    def TileSize() -> Size: ...
    @property
    def Zoom(self) -> Single: ...
    @BackColour.setter
    def BackColour(self, Value: Color) -> None: ...
    @Extension.setter
    def Extension(self, Value: str) -> None: ...
    @FileName.setter
    def FileName(self, Value: str) -> None: ...
    @Folder.setter
    def Folder(self, Value: str) -> None: ...
    @Zoom.setter
    def Zoom(self, Value: Single) -> None: ...


class GH_NamedView:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, view_box: Rectangle, target_box: RectangleF): ...
    @overload
    def __init__(self, view: GH_Viewport, region: Rectangle, target: PointF): ...
    @overload
    def __init__(self, view: GH_Viewport, point: Point, target: PointF): ...
    @overload
    def __init__(self, view_name: str, view_point: PointF, view_zoom: Single, view_type: GH_NamedViewType): ...
    def add_SmoothFrame(self, obj: SmoothFrameEventHandler) -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def Point(self) -> PointF: ...
    @property
    def Type(self) -> GH_NamedViewType: ...
    @property
    def Zoom(self) -> Single: ...
    def LoadFromViewport(self, vp: GH_Viewport, view_type: GH_NamedViewType) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def remove_SmoothFrame(self, obj: SmoothFrameEventHandler) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @Point.setter
    def Point(self, Value: PointF) -> None: ...
    @Type.setter
    def Type(self, Value: GH_NamedViewType) -> None: ...
    @Zoom.setter
    def Zoom(self, Value: Single) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas) -> None: ...
    @overload
    def SetToViewport(self, vp: GH_Viewport) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas, length: int) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_NamedViewEditor:
    def __init__(self): ...
    def add_NamedViewChanged(self, obj: NamedViewChangedEventHandler) -> None: ...
    def LoadNamedView(self, view: GH_NamedView) -> None: ...
    def OnNamedViewChanged(self) -> None: ...
    def remove_NamedViewChanged(self, obj: NamedViewChangedEventHandler) -> None: ...


class GH_NamedViewType:
    target = 0
    center = 1


class GH_NavigationPaneDialog:
    def __init__(self): ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Pane(self) -> GH_DocDiagramPainter: ...
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...
    @Pane.setter
    def Pane(self, Value: GH_DocDiagramPainter) -> None: ...


class GH_ObjectResponse:
    Ignore = 0
    Capture = 1
    Release = 2
    Handled = 3


class GH_Orientation:
    horizontal_center = 0
    horizontal_near = 1
    horizontal_far = 2
    vertical_center = 10
    vertical_near = 11
    vertical_far = 12


class GH_Painter:
    def __init__(self, owner: GH_Canvas): ...
    def ConnectionPath(pointA: PointF, pointB: PointF, directionA: GH_WireDirection, directionB: GH_WireDirection) -> GraphicsPath: ...
    def ConnectionPathBezier(source: PointF, target: PointF) -> BezierF: ...
    def ConnectionVisible(self, a: PointF, b: PointF) -> bool: ...
    def DetermineWireType(target: IGH_Structure) -> GH_WireType: ...
    def DrawBackground(self, viewport: GH_Viewport) -> None: ...
    def DrawConnection(self, pointA: PointF, pointB: PointF, directionA: GH_WireDirection, directionB: GH_WireDirection, selectedA: bool, selectedB: bool, type: GH_WireType) -> None: ...
    def DrawMiddleGround(self, doc: GH_Document, channel: GH_CanvasChannel) -> None: ...
    def DrawNoDocumentMessage(self) -> None: ...
    def DrawNULLBuffer(self) -> None: ...
    def DrawPivots(self, doc: GH_Document) -> None: ...
    def DrawRecipientLinks(self, doc: GH_Document) -> None: ...
    def DrawStateFlags(self, doc: GH_Document) -> None: ...
    def GenerateWirePen_Fill(self, a: PointF, b: PointF, asel: bool, bsel: bool, empty: bool) -> Brush: ...


class GH_Palette:
    Normal = 0
    Hidden = 1
    Locked = 2
    Warning = 3
    Error = 4
    White = 5
    Grey = 6
    Black = 7
    Brown = 8
    Pink = 9
    Blue = 10
    Transparent = 11


class GH_PaletteStyle:
    @overload
    def __init__(self, fill: Color): ...
    @overload
    def __init__(self, fill: Color, edge: Color): ...
    @overload
    def __init__(self, fill: Color, edge: Color, text: Color): ...
    def CreateBrush(self, rec: RectangleF, zoom: Single) -> Brush: ...
    @property
    def Edge(self) -> Color: ...
    @property
    def Fill(self) -> Color: ...
    @property
    def Text(self) -> Color: ...
    @Edge.setter
    def Edge(self, Value: Color) -> None: ...
    @Fill.setter
    def Fill(self, Value: Color) -> None: ...
    @Text.setter
    def Text(self, Value: Color) -> None: ...


class GH_PopupSearchDialog:
    def __init__(self): ...
    def ClearMessage(self) -> None: ...
    @property
    def BasePoint(self) -> Point: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @BasePoint.setter
    def BasePoint(self, AutoPropertyValue: Point) -> None: ...
    @Canvas.setter
    def Canvas(self, AutoPropertyValue: GH_Canvas) -> None: ...
    def SetDefaultMessage(self) -> None: ...
    def SetMessage(self, msg: str) -> None: ...
    def SetNoResultsMessage(self) -> None: ...


class GH_ResizeBorder(GH_Border):
    @overload
    def __init__(self, borders: GH_Border): ...
    @overload
    def __init__(self, region: RectangleF, topology: GH_BorderTopology): ...
    @property
    def Anchor(self) -> PointF: ...
    @Anchor.setter
    def Anchor(self, Value: PointF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF, MinSize: SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF, MinSize: SizeF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF, MinSize: SizeF, MaxSize: SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF, MinSize: SizeF, MaxSize: SizeF) -> None: ...
    def Solve(self, nCursor: PointF) -> Tuple[RectangleF, PointF]: ...


class GH_Skin:
    def LoadSkin() -> None: ...
    def SaveSkin() -> None: ...


class GH_Viewport:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, target: Point): ...
    @overload
    def __init__(self, viewport: GH_Viewport): ...
    @overload
    def __init__(self, target: Point, zoom: Single): ...
    def ApplyProjection(self, G: Graphics) -> None: ...
    def ComputeProjection(self) -> None: ...
    def DollyZoom(self, e: GH_CanvasMouseEvent) -> bool: ...
    def Duplicate(self) -> GH_Viewport: ...
    @overload
    def Focus(self, pt: Point) -> None: ...
    @overload
    def Focus(self, attributes: List) -> None: ...
    @overload
    def Focus(self, attribute: IGH_Attributes) -> None: ...
    @overload
    def Focus(self, pt: PointF) -> None: ...
    @property
    def ControlMidPoint(self) -> PointF: ...
    @property
    def Diagonal(self) -> Single: ...
    @property
    def Height(self) -> int: ...
    @property
    def MidPoint(self) -> PointF: ...
    @property
    def ScreenPort(self) -> Rectangle: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Target(self) -> Point: ...
    @property
    def TargetRatio(self) -> SizeF: ...
    @property
    def Tx(self) -> int: ...
    @property
    def Ty(self) -> int: ...
    @property
    def VisibleRegion(self) -> RectangleF: ...
    @property
    def Width(self) -> int: ...
    @property
    def Zoom(self) -> Single: ...
    @property
    def ZoomInverse(self) -> Single: ...
    @overload
    def IsVisible(self, rec: RectangleF, margin: Single) -> Tuple[bool, RectangleF]: ...
    @overload
    def IsVisible(self, pt: PointF, margin: Single) -> Tuple[bool, PointF]: ...
    def LimitUnit(self, guide_value: Single, no_less_than: Single, no_more_than: Single) -> Single: ...
    def Project(self, pt: PointF) -> Tuple[PointF]: ...
    def ProjectPoint(self, pt: PointF) -> PointF: ...
    def ProjectRectangle(self, rec: RectangleF) -> RectangleF: ...
    def ProjectX(self, x: Single) -> Single: ...
    def ProjectY(self, y: Single) -> Single: ...
    @Height.setter
    def Height(self, Value: int) -> None: ...
    @MidPoint.setter
    def MidPoint(self, Value: PointF) -> None: ...
    def Set(self, other: GH_Viewport) -> None: ...
    @Size.setter
    def Size(self, Value: Size) -> None: ...
    @Target.setter
    def Target(self, Value: Point) -> None: ...
    @TargetRatio.setter
    def TargetRatio(self, Value: SizeF) -> None: ...
    @Tx.setter
    def Tx(self, Value: int) -> None: ...
    @Ty.setter
    def Ty(self, Value: int) -> None: ...
    @Width.setter
    def Width(self, Value: int) -> None: ...
    @Zoom.setter
    def Zoom(self, Value: Single) -> None: ...
    @Zoom.setter
    def Zoom(self, adjustTarget: bool, Value: Single) -> None: ...
    def SolveUnit(self, desired: Single, no_less_than: Single, no_more_than: Single) -> Single: ...
    def Unproject(self, pt: PointF) -> Tuple[PointF]: ...
    def UnprojectPoint(self, pt: PointF) -> PointF: ...
    def UnprojectRectangle(self, rec: RectangleF) -> RectangleF: ...
    def UnprojectX(self, x: Single) -> Single: ...
    def UnprojectY(self, y: Single) -> Single: ...
    def XFormMatrix(self, projection: GH_DisplayMatrix) -> Matrix: ...


class GH_WireDirection:
    left = 0
    right = 1


class GH_WireType:
    dynamic = 0
    wireless = 1
    generic = 2
    faint = 3
    null = 4
    item = 5
    list = 6
    tree = 7
    dynamicAlternative1 = 8


class IGH_CanvasValidator:
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    def AppliesToDocument(self, id: Guid) -> bool: ...
    def CanAcceptObject(self, id: Guid) -> bool: ...
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    def CanNavigateCanvas(self) -> bool: ...
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...


class IGH_ResponsiveObject:
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...


class IGH_TooltipAwareObject:
    @property
    def TooltipEnabled(self) -> bool: ...
    def IsTooltipRegion(self, canvasPoint: PointF) -> bool: ...
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...


class ModifiersChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: EventArgs) -> None: ...


class NamedViewChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView) -> None: ...


class NavigationSettingsChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self) -> None: ...


class SmoothFrameEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_NamedView, canvas: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_NamedView, canvas: GH_Canvas) -> None: ...


class ViewportChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_CanvasViewportChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_CanvasViewportChangedEventArgs) -> None: ...


class WidgetListCreatedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_CanvasWidgetListEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: Object, e: GH_CanvasWidgetListEventArgs) -> None: ...
