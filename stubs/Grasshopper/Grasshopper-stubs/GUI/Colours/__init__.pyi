from typing import Tuple, Set, Iterable, List, overload


class GH_ColourBucket:
    def __init__(self): ...
    def Draw(self, g: Graphics) -> None: ...
    @property
    def Bucket(self) -> Rectangle: ...
    @property
    def Colour(self) -> Color: ...
    @property
    def State(self) -> GH_ColourBucketState: ...
    @Bucket.setter
    def Bucket(self, Value: Rectangle) -> None: ...
    @Colour.setter
    def Colour(self, Value: Color) -> None: ...
    @State.setter
    def State(self, Value: GH_ColourBucketState) -> None: ...


class GH_ColourBucketState:
    Blank = 0
    Selected = 1
    Active = 2


class GH_MultiColourPalette:
    def __init__(self): ...
    def ActiveBuckets(self) -> List: ...
    def add_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    def AddColour(self, nColour: Color) -> GH_ColourBucket: ...
    def AnyActiveBuckets(self) -> bool: ...
    def BlankAllBuckets(self) -> None: ...
    def ClearBuckets(self) -> None: ...
    def DesiredHeight(self) -> int: ...
    @property
    def BucketCount(self) -> int: ...
    @property
    def Buckets(self) -> List: ...
    @property
    def Colours(self) -> List: ...
    def LayoutBuckets(self) -> None: ...
    def OnSelectionChanged(self) -> None: ...
    def remove_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    def RemoveColour(self, at: int) -> None: ...
    def RemoveSelected(self) -> None: ...


class GH_MultiColourPaletteEventArgs:
    def __init__(self, nBuckets: List): ...
    @property
    def ActiveBuckets(self) -> List: ...
    @property
    def BlankBuckets(self) -> List: ...
    @property
    def SelectedBuckets(self) -> List: ...


class GH_MultiColourPicker:
    def __init__(self): ...
    def GetColours(self) -> List: ...
    def RegisterColours(self, c_list: List) -> None: ...


class SelectionChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_MultiColourPalette, e: GH_MultiColourPaletteEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Invoke(self, sender: GH_MultiColourPalette, e: GH_MultiColourPaletteEventArgs) -> None: ...
