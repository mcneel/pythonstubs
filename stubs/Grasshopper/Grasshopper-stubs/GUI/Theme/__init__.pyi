from typing import Tuple, Set, Iterable, List, overload


class GH_BackgroundSettings:
    @property
    def Colour1(self) -> Color: ...
    @property
    def Colour2(self) -> Color: ...
    @property
    def Hatch(self) -> HatchStyle: ...
    @property
    def Style(self) -> GH_BackgroundStyle: ...
    @Colour1.setter
    def Colour1(self, AutoPropertyValue: Color) -> None: ...
    @Colour2.setter
    def Colour2(self, AutoPropertyValue: Color) -> None: ...
    @Hatch.setter
    def Hatch(self, AutoPropertyValue: HatchStyle) -> None: ...
    @Style.setter
    def Style(self, AutoPropertyValue: GH_BackgroundStyle) -> None: ...


class GH_BackgroundStyle:
    Solid = 0
    Hatch = 1
    GradientLeftRight = 10
    GradientTopBottom = 11


class GH_ObjectSettings:
    @property
    def GroupColour(self) -> Color: ...
    @property
    def PanelColour(self) -> Color: ...
    @property
    def ZuiEdgeColour(self) -> Color: ...
    @property
    def ZuiFillColour(self) -> Color: ...
    @GroupColour.setter
    def GroupColour(self, AutoPropertyValue: Color) -> None: ...
    @PanelColour.setter
    def PanelColour(self, AutoPropertyValue: Color) -> None: ...
    @ZuiEdgeColour.setter
    def ZuiEdgeColour(self, AutoPropertyValue: Color) -> None: ...
    @ZuiFillColour.setter
    def ZuiFillColour(self, AutoPropertyValue: Color) -> None: ...


class GH_PageSettings:
    @property
    def DrawGrid(self) -> bool: ...
    @property
    def DrawPage(self) -> bool: ...
    @property
    def DrawShadow(self) -> bool: ...
    @property
    def EdgeColour(self) -> Color: ...
    @property
    def FillColour(self) -> Color: ...
    @property
    def GridColour(self) -> Color: ...
    @property
    def GridHeight(self) -> int: ...
    @property
    def GridPattern(self) -> Set(Single): ...
    @property
    def GridWidth(self) -> int: ...
    @property
    def ShadowColour(self) -> Color: ...
    @property
    def ShadowSize(self) -> int: ...
    @DrawGrid.setter
    def DrawGrid(self, AutoPropertyValue: bool) -> None: ...
    @DrawPage.setter
    def DrawPage(self, AutoPropertyValue: bool) -> None: ...
    @DrawShadow.setter
    def DrawShadow(self, AutoPropertyValue: bool) -> None: ...
    @EdgeColour.setter
    def EdgeColour(self, AutoPropertyValue: Color) -> None: ...
    @FillColour.setter
    def FillColour(self, AutoPropertyValue: Color) -> None: ...
    @GridColour.setter
    def GridColour(self, AutoPropertyValue: Color) -> None: ...
    @GridHeight.setter
    def GridHeight(self, AutoPropertyValue: int) -> None: ...
    @GridPattern.setter
    def GridPattern(self, AutoPropertyValue: Set(Single)) -> None: ...
    @GridWidth.setter
    def GridWidth(self, AutoPropertyValue: int) -> None: ...
    @ShadowColour.setter
    def ShadowColour(self, AutoPropertyValue: Color) -> None: ...
    @ShadowSize.setter
    def ShadowSize(self, AutoPropertyValue: int) -> None: ...


class GH_PaletteSettings:
    @property
    def ErrorSelected(self) -> GH_PaletteStyle: ...
    @property
    def ErrorStandard(self) -> GH_PaletteStyle: ...
    @property
    def HiddenSelected(self) -> GH_PaletteStyle: ...
    @property
    def HiddenStandard(self) -> GH_PaletteStyle: ...
    @property
    def LockedSelected(self) -> GH_PaletteStyle: ...
    @property
    def LockedStandard(self) -> GH_PaletteStyle: ...
    @property
    def NormalSelected(self) -> GH_PaletteStyle: ...
    @property
    def NormalStandard(self) -> GH_PaletteStyle: ...
    @property
    def WarningSelected(self) -> GH_PaletteStyle: ...
    @property
    def WarningStandard(self) -> GH_PaletteStyle: ...
    @ErrorSelected.setter
    def ErrorSelected(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @ErrorStandard.setter
    def ErrorStandard(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @HiddenSelected.setter
    def HiddenSelected(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @HiddenStandard.setter
    def HiddenStandard(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @LockedSelected.setter
    def LockedSelected(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @LockedStandard.setter
    def LockedStandard(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @NormalSelected.setter
    def NormalSelected(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @NormalStandard.setter
    def NormalStandard(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @WarningSelected.setter
    def WarningSelected(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...
    @WarningStandard.setter
    def WarningStandard(self, AutoPropertyValue: GH_PaletteStyle) -> None: ...


class GH_Theme:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Theme): ...
    @property
    def BackGround(self) -> GH_BackgroundSettings: ...
    @property
    def DefaultTheme() -> GH_Theme: ...
    @property
    def Objects(self) -> GH_ObjectSettings: ...
    @property
    def Page(self) -> GH_PageSettings: ...
    @property
    def Palettes(self) -> GH_PaletteSettings: ...
    @property
    def Wires(self) -> GH_WireSettings: ...
    def LoadTheme(self) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def SaveTheme(self) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_WireSettings:
    @property
    def DefaultColour(self) -> Color: ...
    @property
    def EmptyColour(self) -> Color: ...
    @property
    def SelectedColour0(self) -> Color: ...
    @property
    def SelectedColour1(self) -> Color: ...
    @DefaultColour.setter
    def DefaultColour(self, AutoPropertyValue: Color) -> None: ...
    @EmptyColour.setter
    def EmptyColour(self, AutoPropertyValue: Color) -> None: ...
    @SelectedColour0.setter
    def SelectedColour0(self, AutoPropertyValue: Color) -> None: ...
    @SelectedColour1.setter
    def SelectedColour1(self, AutoPropertyValue: Color) -> None: ...
