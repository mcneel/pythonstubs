__all__ = ['Transforms']
from typing import Tuple, Set, Iterable, List, overload


class Complex:
    @overload
    def __init__(self, real_component: float): ...
    @overload
    def __init__(self, real_component: float, imaginary_component: float): ...
    def ACos(self) -> Complex: ...
    def ASin(self) -> Complex: ...
    def ATan(self) -> Complex: ...
    def Cos(self) -> Complex: ...
    def Cosecant(self) -> Complex: ...
    def CoTan(self) -> Complex: ...
    def Exponential(self) -> Complex: ...
    @property
    def Argument(self) -> float: ...
    @property
    def ComplexUnit() -> Complex: ...
    @property
    def Imaginary(self) -> float: ...
    @property
    def Infinity() -> Complex: ...
    @property
    def IsReal(self) -> bool: ...
    @property
    def IsRealNonNegative(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def NaN() -> Complex: ...
    @property
    def NegativeInfinity() -> Complex: ...
    @property
    def Real(self) -> float: ...
    @property
    def Zero() -> Complex: ...
    def GetHashCode(self) -> int: ...
    def Log(self) -> Complex: ...
    def Log10(self) -> Complex: ...
    def Modulus(self) -> float: ...
    def ModulusSquared(self) -> float: ...
    @overload
    def op_Addition(A: Complex, B: Complex) -> Complex: ...
    @overload
    def op_Addition(A: Complex, B: float) -> Complex: ...
    @overload
    def op_Addition(A: float, B: Complex) -> Complex: ...
    @overload
    def op_Division(dividend: float, divisor: Complex) -> Complex: ...
    @overload
    def op_Division(dividend: Complex, divisor: Complex) -> Complex: ...
    @overload
    def op_Division(dividend: Complex, divisor: float) -> Complex: ...
    @overload
    def op_Multiply(A: Complex, B: float) -> Complex: ...
    @overload
    def op_Multiply(A: float, B: Complex) -> Complex: ...
    @overload
    def op_Multiply(A: Complex, B: Complex) -> Complex: ...
    @overload
    def op_Subtraction(A: Complex, B: Complex) -> Complex: ...
    @overload
    def op_Subtraction(A: float, B: Complex) -> Complex: ...
    @overload
    def op_Subtraction(A: Complex, B: float) -> Complex: ...
    def op_UnaryNegation(subtrahend: Complex) -> Complex: ...
    def op_UnaryPlus(summand: Complex) -> Complex: ...
    def Power(self, exponent: Complex) -> Complex: ...
    def Root(self, rootexponent: Complex) -> Complex: ...
    def Secant(self) -> Complex: ...
    @Argument.setter
    def Argument(self, Value: float) -> None: ...
    @Imaginary.setter
    def Imaginary(self, Value: float) -> None: ...
    @Real.setter
    def Real(self, Value: float) -> None: ...
    def Sin(self) -> Complex: ...
    def Square(self) -> Complex: ...
    def SquareRoot(self) -> Complex: ...
    def Tan(self) -> Complex: ...


class GH_Arc:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, arc: Arc): ...
    @overload
    def __init__(self, other: GH_Arc): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateArc(self) -> GH_Arc: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Boolean:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bool: bool): ...
    @overload
    def __init__(self, other: GH_Boolean): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateBoolean(self) -> GH_Boolean: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Box:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, box: Box): ...
    @overload
    def __init__(self, box: BoundingBox): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_Box): ...
    def AppendRenderGeometry(self, args: GH_RenderArgs, materialHint: RenderMaterial) -> None: ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def Brep(self) -> Brep: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateBox(self) -> GH_Box: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    def Geometry(self, brp: Brep, crv: Curve, pt: Point) -> Tuple[bool, Brep, Curve, Point]: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Box: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Mesh(self) -> Mesh: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    @Value.setter
    def Value(self, Value: Box) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_BoxProxy:
    def __init__(self, Value: GH_Box): ...
    def Construct(self) -> None: ...
    @property
    def Area(self) -> str: ...
    @property
    def ObjectID(self) -> str: ...
    @property
    def Origin(self) -> GH_Point3d_Wrapper: ...
    @property
    def Volume(self) -> str: ...
    @property
    def XAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def XSize(self) -> GH_Interval_Wrapper: ...
    @property
    def YAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def YSize(self) -> GH_Interval_Wrapper: ...
    @property
    def ZAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def ZSize(self) -> GH_Interval_Wrapper: ...
    @ObjectID.setter
    def ObjectID(self, Value: str) -> None: ...


class GH_Brep:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, brep: Brep): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_Brep): ...
    def AppendRenderGeometry(self, args: GH_RenderArgs, materialHint: RenderMaterial) -> None: ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def BrepTightBoundingBox(in: Brep) -> BoundingBox: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DestroyPreviewMeshes(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateBrep(self) -> GH_Brep: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Brep: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def GetPreviewMeshes(self) -> Set(Mesh): ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    @Value.setter
    def Value(self, Value: Brep) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_BrepProxy:
    def __init__(self, Value: GH_Brep): ...
    def Construct(self) -> None: ...
    def FromString(self, in: str) -> bool: ...
    @property
    def Area(self) -> str: ...
    @property
    def EdgeCount(self) -> int: ...
    @property
    def FaceCount(self) -> int: ...
    @property
    def LoopCount(self) -> int: ...
    @property
    def Manifold(self) -> bool: ...
    @property
    def ObjectID(self) -> str: ...
    @property
    def Solid(self) -> bool: ...
    @property
    def VertexCount(self) -> int: ...
    @property
    def Volume(self) -> str: ...
    @ObjectID.setter
    def ObjectID(self, Value: str) -> None: ...


class GH_Circle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, circle: Circle): ...
    @overload
    def __init__(self, other: GH_Circle): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateCircle(self) -> GH_Circle: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_CircleProxy:
    def __init__(self, nOwner: GH_Circle): ...
    def Construct(self) -> None: ...
    @property
    def Area(self) -> str: ...
    @property
    def Center(self) -> GH_Point3d_Wrapper: ...
    @property
    def Circumference(self) -> str: ...
    @property
    def Normal(self) -> GH_Vector3d_Wrapper: ...
    @property
    def Radius(self) -> str: ...
    @Area.setter
    def Area(self, Value: str) -> None: ...
    @Circumference.setter
    def Circumference(self, Value: str) -> None: ...
    @Radius.setter
    def Radius(self, Value: str) -> None: ...


class GH_Colour:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colour: Color): ...
    @overload
    def __init__(self, other: GH_Colour): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateColour(self) -> GH_Colour: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_ComplexNumber:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, number: Complex): ...
    @overload
    def __init__(self, other: GH_ComplexNumber): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateComplex(self) -> GH_ComplexNumber: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Culture:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, culture: CultureInfo): ...
    @overload
    def __init__(self, other: GH_Culture): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateCulture(self) -> GH_Culture: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Curve:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, curve: Curve): ...
    @overload
    def __init__(self, ref_guid: Guid): ...
    @overload
    def __init__(self, other: GH_Curve): ...
    @overload
    def __init__(self, ref_guid: Guid, ref_edge: int): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateCurve(self) -> GH_Curve: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceEdge(self) -> int: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Curve: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def MakeDeformable(self) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceEdge.setter
    def ReferenceEdge(self, Value: int) -> None: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    @Value.setter
    def Value(self, Value: Curve) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_CurveProxy:
    def __init__(self, owner: GH_Curve): ...
    def Construct(self) -> None: ...
    def FromString(self, in: str) -> bool: ...
    @property
    def Closed(self) -> bool: ...
    @property
    def Deformable(self) -> bool: ...
    @property
    def Domain(self) -> str: ...
    @property
    def Length(self) -> str: ...
    @property
    def Linear(self) -> bool: ...
    @property
    def ObjectID(self) -> str: ...
    @property
    def Periodic(self) -> bool: ...
    @property
    def Planar(self) -> bool: ...
    @property
    def Type(self) -> str: ...
    @ObjectID.setter
    def ObjectID(self, Value: str) -> None: ...


class GH_DifferentialSolver:
    #None = 0
    Euler = 1
    RungeKutta2 = 2
    RungeKutta3 = 3
    RungeKutta4 = 4


class GH_Field:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Field): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def CurvatureAt(self, location: Point3d) -> float: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def Elements(self) -> List: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    def SolveStep(self, location: Point3d, factor: float, method: GH_DifferentialSolver) -> Vector3d: ...
    def SolveSteps(self, location: Point3d, accuracy: float, count: int, method: GH_DifferentialSolver) -> Point3dList: ...
    def TensorAt(self, location: Point3d) -> Vector3d: ...
    @overload
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_FieldElement:
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_FieldElement: ...
    def Force(self, location: Point3d) -> Vector3d: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def ElementGuid(self) -> Guid: ...
    @property
    def IsLimited(self) -> bool: ...
    @property
    def Limits(self) -> Box: ...
    def IsCoincident(self, point: Point3d, tolerance: float) -> bool: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @IsLimited.setter
    def IsLimited(self, Value: bool) -> None: ...
    @Limits.setter
    def Limits(self, Value: Box) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...




class GH_GeometricGooWrapper:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, goo: IGH_GeometricGoo): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def InternalGoo(self) -> IGH_GeometricGoo: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsReferencedGeometry(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self) -> bool: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GeometryGroup:
    def __init__(self): ...
    def AppendRenderGeometry(self, args: GH_RenderArgs, material: RenderMaterial) -> None: ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsReferencedGeometry(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def Objects(self) -> List: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self) -> bool: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GeometryGroupProxy:
    def __init__(self, owner: GH_GeometryGroup): ...






class GH_Guid:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_Guid): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGuid(self) -> GH_Guid: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Integer:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, number: int): ...
    @overload
    def __init__(self, other: GH_Integer): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateInteger(self) -> GH_Integer: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Interval:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, interval: Interval): ...
    @overload
    def __init__(self, other: GH_Interval): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateInterval(self) -> GH_Interval: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Interval2D:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, uv: UVInterval): ...
    @overload
    def __init__(self, other: GH_Interval2D): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateInterval(self) -> GH_Interval2D: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Interval2DProxy:
    def __init__(self, nValue: GH_Interval2D): ...
    @property
    def Area(self) -> float: ...
    @property
    def U0(self) -> float: ...
    @property
    def U1(self) -> float: ...
    @property
    def UIsIncreasing(self) -> bool: ...
    @property
    def UIsNormalized(self) -> bool: ...
    @property
    def ULength(self) -> float: ...
    @property
    def UMiddle(self) -> float: ...
    @property
    def V0(self) -> float: ...
    @property
    def V1(self) -> float: ...
    @property
    def VIsIncreasing(self) -> bool: ...
    @property
    def VIsNormalized(self) -> bool: ...
    @property
    def VLength(self) -> float: ...
    @property
    def VMiddle(self) -> float: ...
    @U0.setter
    def U0(self, Value: float) -> None: ...
    @U1.setter
    def U1(self, Value: float) -> None: ...
    @UIsIncreasing.setter
    def UIsIncreasing(self, Value: bool) -> None: ...
    @UIsNormalized.setter
    def UIsNormalized(self, Value: bool) -> None: ...
    @V0.setter
    def V0(self, Value: float) -> None: ...
    @V1.setter
    def V1(self, Value: float) -> None: ...
    @VIsIncreasing.setter
    def VIsIncreasing(self, Value: bool) -> None: ...
    @VIsNormalized.setter
    def VIsNormalized(self, Value: bool) -> None: ...


class GH_Line:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, line: Line): ...
    @overload
    def __init__(self, other: GH_Line): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicateLine(self) -> GH_Line: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_LineCharge(GH_FieldElement):
    def __init__(self): ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_FieldElement: ...
    def Force(self, location: Point3d) -> Vector3d: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def Charge(self) -> float: ...
    @property
    def ElementGuid(self) -> Guid: ...
    @property
    def Segment(self) -> Line: ...
    def IsCoincident(self, point: Point3d, tolerance: float) -> bool: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Charge.setter
    def Charge(self, Value: float) -> None: ...
    @Segment.setter
    def Segment(self, Value: Line) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_LineProxy:
    def __init__(self, nOwner: GH_Line): ...
    def Construct(self) -> None: ...
    @property
    def Ax(self) -> str: ...
    @property
    def Ay(self) -> str: ...
    @property
    def Az(self) -> str: ...
    @property
    def Bx(self) -> str: ...
    @property
    def By(self) -> str: ...
    @property
    def Bz(self) -> str: ...
    @property
    def Length(self) -> str: ...
    @Ax.setter
    def Ax(self, Value: str) -> None: ...
    @Ay.setter
    def Ay(self, Value: str) -> None: ...
    @Az.setter
    def Az(self, Value: str) -> None: ...
    @Bx.setter
    def Bx(self, Value: str) -> None: ...
    @By.setter
    def By(self, Value: str) -> None: ...
    @Bz.setter
    def Bz(self, Value: str) -> None: ...
    @Length.setter
    def Length(self, Value: str) -> None: ...


class GH_LonLatCoordinate:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, longitude: float, latitude: float): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def SphereUParameter(self) -> float: ...
    @property
    def SphereVParameter(self) -> float: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @Latitude.setter
    def Latitude(self, Value: float) -> None: ...
    @Longitude.setter
    def Longitude(self, Value: float) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Material:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rdkId: Guid): ...
    @overload
    def __init__(self, rdkXml: str): ...
    @overload
    def __init__(self, diffuse: Color): ...
    @overload
    def __init__(self, material: DisplayMaterial): ...
    @overload
    def __init__(self, material: RenderMaterial): ...
    @overload
    def __init__(self, other: GH_Material): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def CreateRhinoMaterial(colour: Color) -> Material: ...
    def CreateStandardMaterial(colour: Color) -> DisplayMaterial: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateMaterial(self) -> GH_Material: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def RdkMaterialId(self) -> Guid: ...
    @property
    def RdkMaterialRmtl(self) -> str: ...
    @property
    def RdkMaterialXml(self) -> str: ...
    @property
    def Type(self) -> MaterialType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def MaterialBestGuess(self) -> RenderMaterial: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @RdkMaterialId.setter
    def RdkMaterialId(self, AutoPropertyValue: Guid) -> None: ...
    @RdkMaterialRmtl.setter
    def RdkMaterialRmtl(self, AutoPropertyValue: str) -> None: ...
    @RdkMaterialXml.setter
    def RdkMaterialXml(self, AutoPropertyValue: str) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Material_Proxy:
    def __init__(self, nValue: GH_Material): ...
    @property
    def Diffuse(self) -> Color: ...
    @property
    def Emission(self) -> Color: ...
    @property
    def IsRDKMaterial(self) -> bool: ...
    @property
    def Shine(self) -> float: ...
    @property
    def Specular(self) -> Color: ...
    @property
    def Transparency(self) -> float: ...
    @Diffuse.setter
    def Diffuse(self, Value: Color) -> None: ...
    @Emission.setter
    def Emission(self, Value: Color) -> None: ...
    @Shine.setter
    def Shine(self, Value: float) -> None: ...
    @Specular.setter
    def Specular(self, Value: Color) -> None: ...
    @Transparency.setter
    def Transparency(self, Value: float) -> None: ...


class GH_Matrix:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, matrix: Matrix): ...
    @overload
    def __init__(self, other: GH_Matrix): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def CloneMatrix(matrix: Matrix) -> Matrix: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateMatrix(self) -> GH_Matrix: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Mesh:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mesh: Mesh): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_Mesh): ...
    def AppendRenderGeometry(self, args: GH_RenderArgs, materialHint: RenderMaterial) -> None: ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicateMesh(self) -> GH_Mesh: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_MeshFace:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: MeshFace): ...
    @overload
    def __init__(self, other: GH_MeshFace): ...
    @overload
    def __init__(self, nA: int, nB: int, nC: int): ...
    @overload
    def __init__(self, nA: int, nB: int, nC: int, nD: int): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: T) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateMeshFace(self) -> GH_MeshFace: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_MeshFaceProxy:
    def __init__(self, nValue: GH_MeshFace): ...
    @property
    def A(self) -> int: ...
    @property
    def B(self) -> int: ...
    @property
    def C(self) -> int: ...
    @property
    def D(self) -> int: ...
    @property
    def Kind(self) -> str: ...
    @A.setter
    def A(self, Value: int) -> None: ...
    @B.setter
    def B(self, Value: int) -> None: ...
    @C.setter
    def C(self, Value: int) -> None: ...
    @D.setter
    def D(self, Value: int) -> None: ...


class GH_MeshingParameters:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: MeshingParameters): ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateMesherSettings(self) -> GH_MeshingParameters: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_MeshProxy:
    def __init__(self, Value: GH_Mesh): ...
    def Construct(self) -> None: ...
    @property
    def Area(self) -> str: ...
    @property
    def EdgeCount(self) -> int: ...
    @property
    def FaceCount(self) -> int: ...
    @property
    def Manifold(self) -> bool: ...
    @property
    def ObjectID(self) -> str: ...
    @property
    def Solid(self) -> bool: ...
    @property
    def VertexCount(self) -> int: ...
    @property
    def Volume(self) -> str: ...
    @ObjectID.setter
    def ObjectID(self, Value: str) -> None: ...


class GH_Number:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, number: float): ...
    @overload
    def __init__(self, other: GH_Number): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateNumber(self) -> GH_Number: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_ObjectWrapper:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, obj: Object): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateObject(self) -> GH_ObjectWrapper: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    def ToString(self) -> str: ...


class GH_Plane:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, plane: Plane): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_Plane): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def DrawPlane(display: DisplayPipeline, plane: Plane) -> None: ...
    @overload
    def DrawPlane(display: DisplayPipeline, plane: Plane, size: float, frequency: int) -> None: ...
    @overload
    def DrawPlane(display: DisplayPipeline, plane: Plane, size: float, frequency: int, grid_color: Color, x_color: Color, y_color: Color) -> None: ...
    @overload
    def DrawPlane(display: DisplayPipeline, plane: Plane, size: float, frequency: int, grid_color: Color, x_color: Color, y_color: Color, back_color: Color) -> None: ...
    def DrawPlaneIcon(display: DisplayPipeline, plane: Plane, size: float, edgeColour: Color, fillColour: Color) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicatePlane(self) -> GH_Plane: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PlaneProxy:
    def __init__(self, nOwner: GH_Plane): ...
    def Construct(self) -> None: ...
    @property
    def Origin(self) -> GH_Point3d_Wrapper: ...
    @property
    def XAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def YAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def ZAxis(self) -> GH_Vector3d_Wrapper: ...


class GH_Point:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pt: Point3d): ...
    @overload
    def __init__(self, iOther: GH_Point): ...
    @overload
    def __init__(self, rh_obj_id: Guid): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def CreateFromCoordinate(self, pt: Point3d) -> None: ...
    def CreateFromCurveDistance(self, crv_id: Guid, crv: Curve, t: float, bFromStart: bool) -> None: ...
    def CreateFromCurveRatio(self, crv_id: Guid, crv: Curve, t: float) -> None: ...
    def CreateFromEdgeDistance(self, brp_id: Guid, edge: Curve, e_index: int, t: float, bFromStart: bool) -> None: ...
    def CreateFromEdgeRatio(self, brp_id: Guid, edge: Curve, e_index: int, t: float) -> None: ...
    def CreateFromPointObject(self, id: Guid) -> None: ...
    def CreateFromSurfaceParam(self, brp_id: Guid, f_index: int, srf: Surface, u: float, v: float) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicatePoint(self) -> GH_Point: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    def EnsureReferenceData(self) -> None: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsReferencedGeometry(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def ReferenceData(self) -> GH_PointRefData: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Point3d: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self) -> bool: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ReferenceCurve(self) -> Curve: ...
    @overload
    def ReferenceCurve(self, ref: RhinoObject) -> Curve: ...
    @overload
    def ReferenceIndex(self) -> int: ...
    @overload
    def ReferenceIndex(self, new_index: int) -> None: ...
    @overload
    def ReferenceParam(self, index: int) -> float: ...
    @overload
    def ReferenceParam(self, index: int, new_param: float) -> None: ...
    def ReferencesCurve(self) -> bool: ...
    def ReferencesEdge(self) -> bool: ...
    def ReferenceSurface(self) -> BrepFace: ...
    @overload
    def ReferenceType(self) -> GH_PointRefType: ...
    @overload
    def ReferenceType(self, new_type: GH_PointRefType) -> None: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceData.setter
    def ReferenceData(self, Value: GH_PointRefData) -> None: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    @Value.setter
    def Value(self, new_value: Point3d) -> None: ...
    def SetReferenceParams(self, u: float, v: float) -> None: ...
    @overload
    def ShowReferenceDialog(self) -> DialogResult: ...
    @overload
    def ShowReferenceDialog(self, owner: IWin32Window) -> DialogResult: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PointCharge(GH_FieldElement):
    def __init__(self): ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_FieldElement: ...
    def Force(self, location: Point3d) -> Vector3d: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def Charge(self) -> float: ...
    @property
    def Decay(self) -> float: ...
    @property
    def ElementGuid(self) -> Guid: ...
    @property
    def Location(self) -> Point3d: ...
    def IsCoincident(self, point: Point3d, tolerance: float) -> bool: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Charge.setter
    def Charge(self, Value: float) -> None: ...
    @Decay.setter
    def Decay(self, Value: float) -> None: ...
    @Location.setter
    def Location(self, Value: Point3d) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PointProxy:
    def __init__(self, Value: GH_Point): ...
    def Construct(self) -> None: ...
    @property
    def Distance(self) -> str: ...
    @property
    def Referenced(self) -> bool: ...
    @property
    def ReferenceID(self) -> str: ...
    @property
    def ReferenceType(self) -> str: ...
    @property
    def TParameterRatio(self) -> str: ...
    @property
    def UVParameterRatio(self) -> GH_PointRefUV_Wrapper: ...
    @property
    def X(self) -> str: ...
    @property
    def Y(self) -> str: ...
    @property
    def Z(self) -> str: ...
    @Distance.setter
    def Distance(self, Value: str) -> None: ...
    @TParameterRatio.setter
    def TParameterRatio(self, Value: str) -> None: ...
    @X.setter
    def X(self, Value: str) -> None: ...
    @Y.setter
    def Y(self, Value: str) -> None: ...
    @Z.setter
    def Z(self, Value: str) -> None: ...


class GH_PointRefData:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, iOther: GH_PointRefData): ...
    def EvCurve(self, c: Curve) -> Point3d: ...
    def EvCurveParam(self, c: Curve) -> float: ...
    def EvSurface(self, s: Surface) -> Point3d: ...
    def SetCurveParam(self, c: Curve, t: float) -> bool: ...
    def SetSurfaceParam(self, srf: Surface, u: float, v: float) -> bool: ...


class GH_PointRefType:
    coordinate = 1
    point_object = 2
    curve_ratio = 10
    curve_dist_start = 11
    curve_dist_end = 12
    srf_param = 20


class GH_PointUtil:
    def FitPlaneThroughPoints(pts: Iterable[GH_Point]) -> Plane: ...
    def ProjectPointsToPlane(pts: Iterable[GH_Point], plane: Plane, include_nulls: bool) -> List: ...
    def PullPointsToPlane(pts: Iterable[GH_Point], plane: Plane, include_nulls: bool) -> List: ...
    def RemapPointsToPlane(pts: Iterable[GH_Point], plane: Plane, include_nulls: bool) -> List: ...


class GH_QuickCastType:
    bool = 0
    int = 1
    num = 2
    text = 3
    col = 4
    pt = 5
    vec = 6
    complex = 7
    interval = 8
    matrix = 9


class GH_Rectangle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rec: Rectangle3d): ...
    @overload
    def __init__(self, other: GH_Rectangle): ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicateRectangle(self) -> GH_Rectangle: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_RectangleProxy:
    def __init__(self, nOwner: GH_Rectangle): ...
    def Construct(self) -> None: ...
    @property
    def Area(self) -> str: ...
    @property
    def Circumference(self) -> str: ...
    @property
    def Height(self) -> GH_Interval_Wrapper: ...
    @property
    def Origin(self) -> GH_Point3d_Wrapper: ...
    @property
    def Width(self) -> GH_Interval_Wrapper: ...
    @property
    def XAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def YAxis(self) -> GH_Vector3d_Wrapper: ...
    @property
    def ZAxis(self) -> GH_Vector3d_Wrapper: ...


class GH_SpinForce(GH_FieldElement):
    def __init__(self): ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_FieldElement: ...
    def Force(self, location: Point3d) -> Vector3d: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def Decay(self) -> float: ...
    @property
    def ElementGuid(self) -> Guid: ...
    @property
    def Plane(self) -> Plane: ...
    @property
    def Radius(self) -> float: ...
    @property
    def Strength(self) -> float: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Decay.setter
    def Decay(self, Value: float) -> None: ...
    @Plane.setter
    def Plane(self, Value: Plane) -> None: ...
    @Radius.setter
    def Radius(self, Value: float) -> None: ...
    @Strength.setter
    def Strength(self, Value: float) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_String:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, str: str): ...
    @overload
    def __init__(self, other: GH_String): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateString(self) -> GH_String: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_StructurePath:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: GH_Path): ...
    @overload
    def __init__(self, other: GH_StructurePath): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicatePath(self) -> GH_StructurePath: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> GH_Path: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @Value.setter
    def Value(self, Value: GH_Path) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SubD:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, subd: SubD): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_SubD): ...
    def AppendRenderGeometry(self, args: GH_RenderArgs, materialHint: RenderMaterial) -> None: ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DestroyPreviewMeshes(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicateSubD(self) -> GH_SubD: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> SubD: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def GetPreviewMeshes(self) -> Set(Mesh): ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    @Value.setter
    def Value(self, Value: SubD) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Surface:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, srf: Surface): ...
    @overload
    def __init__(self, brep: Brep): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, other: GH_Surface): ...
    def AppendRenderGeometry(self, args: GH_RenderArgs, materialHint: RenderMaterial) -> None: ...
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_guid: Guid) -> Tuple[bool, Guid]: ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def ClearCaches(self) -> None: ...
    def DestroyPreviewMeshes(self) -> None: ...
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    def DuplicateSurface(self) -> GH_Surface: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def Face(self) -> BrepFace: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def ReferenceID(self) -> Guid: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Brep: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    def GetPreviewMeshes(self) -> Set(Mesh): ...
    def IsPointOnDomain(self, u: float, v: float) -> bool: ...
    def IsPointOnFace(self, u: float, v: float) -> bool: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    @Value.setter
    def Value(self, new_value: Brep) -> None: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...
    def Untrim(self) -> bool: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SurfaceProxy:
    def __init__(self, Value: GH_Surface): ...
    def Construct(self) -> None: ...
    def FromString(self, in: str) -> bool: ...
    @property
    def Area(self) -> str: ...
    @property
    def Closed(self) -> bool: ...
    @property
    def Deformable(self) -> bool: ...
    @property
    def EdgeCount(self) -> int: ...
    @property
    def LoopCount(self) -> int: ...
    @property
    def ObjectID(self) -> str: ...
    @property
    def Periodic(self) -> bool: ...
    @property
    def Planar(self) -> bool: ...
    @property
    def Singular(self) -> bool: ...
    @property
    def Solid(self) -> bool: ...
    @property
    def Trimmed(self) -> bool: ...
    @property
    def VertexCount(self) -> int: ...
    @property
    def Volume(self) -> str: ...
    @ObjectID.setter
    def ObjectID(self, Value: str) -> None: ...


class GH_Time:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, time: DateTime): ...
    @overload
    def __init__(self, other: GH_Time): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateDateTime(self) -> GH_Time: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Transform:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, transform: ITransform): ...
    @overload
    def __init__(self, transform: Transform): ...
    @overload
    def __init__(self, other: GH_Transform): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self, target: Q) -> Tuple[bool, Q]: ...
    def ClearCaches(self) -> None: ...
    def Duplicate(self) -> IGH_Goo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def CompoundTransforms(self) -> List: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Transform: ...
    def GetInverse(self) -> GH_Transform: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ScriptVariable(self) -> Object: ...
    @Value.setter
    def Value(self, Value: Transform) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_Vector:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, vector: Vector3d): ...
    @overload
    def __init__(self, other: GH_Vector): ...
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def DuplicateVector(self) -> GH_Vector: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_VectorForce(GH_FieldElement):
    def __init__(self): ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    def Duplicate(self) -> IGH_FieldElement: ...
    def Force(self, location: Point3d) -> Vector3d: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def Chord(self) -> Line: ...
    @property
    def ElementGuid(self) -> Guid: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Chord.setter
    def Chord(self, Value: Line) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_VectorProxy:
    def __init__(self, nOwner: GH_Vector): ...
    def Construct(self) -> None: ...
    def FromString(self, in: str) -> bool: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def Length(self) -> str: ...
    @property
    def X(self) -> str: ...
    @property
    def Y(self) -> str: ...
    @property
    def Z(self) -> str: ...
    @Length.setter
    def Length(self, Value: str) -> None: ...
    @X.setter
    def X(self, Value: str) -> None: ...
    @Y.setter
    def Y(self, Value: str) -> None: ...
    @Z.setter
    def Z(self, Value: str) -> None: ...
    def ToString(self) -> str: ...




class IGH_FieldElement:
    def Duplicate(self) -> IGH_FieldElement: ...
    def Force(self, location: Point3d) -> Vector3d: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def ElementGuid(self) -> Guid: ...
    @property
    def IsLimited(self) -> bool: ...
    @property
    def Limits(self) -> Box: ...
    def IsCoincident(self, point: Point3d, tolerance: float) -> bool: ...
    @IsLimited.setter
    def IsLimited(self, Value: bool) -> None: ...
    @Limits.setter
    def Limits(self, Value: Box) -> None: ...


class IGH_GeometricGoo:
    def ClearCaches(self) -> None: ...
    def DuplicateGeometry(self) -> IGH_GeometricGoo: ...
    @property
    def Boundingbox(self) -> BoundingBox: ...
    @property
    def IsGeometryLoaded(self) -> bool: ...
    @property
    def IsReferencedGeometry(self) -> bool: ...
    @property
    def ReferenceID(self) -> Guid: ...
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def LoadGeometry(self) -> bool: ...
    @overload
    def LoadGeometry(self, doc: RhinoDoc) -> bool: ...
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    @ReferenceID.setter
    def ReferenceID(self, Value: Guid) -> None: ...
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...


class IGH_Goo:
    def CastFrom(self, source: Object) -> bool: ...
    def CastTo(self) -> Tuple[bool, T]: ...
    def Duplicate(self) -> IGH_Goo: ...
    def EmitProxy(self) -> IGH_GooProxy: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    def ScriptVariable(self) -> Object: ...
    def ToString(self) -> str: ...


class IGH_GooProxy:
    def Construct(self) -> None: ...
    def FormatInstance(self) -> str: ...
    def FromString(self, in: str) -> bool: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def ProxyOwner(self) -> IGH_Goo: ...
    @property
    def UserString(self) -> str: ...
    @property
    def Valid(self) -> bool: ...
    def MutateString(self, in: str) -> str: ...
    @UserString.setter
    def UserString(self, Value: str) -> None: ...


class IGH_QuickCast:
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    def QC_Bool(self) -> bool: ...
    def QC_Col(self) -> Color: ...
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    def QC_Complex(self) -> Complex: ...
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    def QC_Hash(self) -> int: ...
    def QC_Int(self) -> int: ...
    def QC_Interval(self) -> Interval: ...
    def QC_Matrix(self) -> Matrix: ...
    def QC_Num(self) -> float: ...
    def QC_Pt(self) -> Point3d: ...
    def QC_Text(self) -> str: ...
    def QC_Vec(self) -> Vector3d: ...


class MaterialType:
    Shader = 0
    RhinoMaterial = 1
    XmlMaterial = 2
    RmtlMaterial = 3


class RhMesherSettings_Proxy:
    def __init__(self, owner: GH_MeshingParameters): ...
    @property
    def AngleTolerance(self) -> float: ...
    @property
    def AspectRatio(self) -> float: ...
    @property
    def GridMaxCount(self) -> int: ...
    @property
    def GridMinCount(self) -> int: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def JaggedSeams(self) -> bool: ...
    @property
    def MaxEdgeLength(self) -> float: ...
    @property
    def MinEdgeLength(self) -> float: ...
    @property
    def Refine(self) -> bool: ...
    @property
    def SimplePlanes(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @AngleTolerance.setter
    def AngleTolerance(self, Value: float) -> None: ...
    @AspectRatio.setter
    def AspectRatio(self, Value: float) -> None: ...
    @GridMaxCount.setter
    def GridMaxCount(self, Value: int) -> None: ...
    @GridMinCount.setter
    def GridMinCount(self, Value: int) -> None: ...
    @JaggedSeams.setter
    def JaggedSeams(self, Value: bool) -> None: ...
    @MaxEdgeLength.setter
    def MaxEdgeLength(self, Value: float) -> None: ...
    @MinEdgeLength.setter
    def MinEdgeLength(self, Value: float) -> None: ...
    @Refine.setter
    def Refine(self, Value: bool) -> None: ...
    @SimplePlanes.setter
    def SimplePlanes(self, Value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, Value: float) -> None: ...


class UVInterval:
    def __init__(self, newU: Interval, newV: Interval): ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def U(self) -> Interval: ...
    @property
    def U0(self) -> float: ...
    @property
    def U1(self) -> float: ...
    @property
    def V(self) -> Interval: ...
    @property
    def V0(self) -> float: ...
    @property
    def V1(self) -> float: ...
    @U.setter
    def U(self, Value: Interval) -> None: ...
    @U0.setter
    def U0(self, Value: float) -> None: ...
    @U1.setter
    def U1(self, Value: float) -> None: ...
    @V.setter
    def V(self, Value: Interval) -> None: ...
    @V0.setter
    def V0(self, Value: float) -> None: ...
    @V1.setter
    def V1(self, Value: float) -> None: ...
