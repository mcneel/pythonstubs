from typing import Tuple, Set, Iterable, List, overload


class GH_SketchBox:
    def __init__(self): ...


class GH_SketchCloud:
    def __init__(self): ...


class GH_SketchElement:
    @property
    def BoundingBox(self) -> RectangleF: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphicsPath(self) -> GraphicsPath: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Image: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def IsPickPoint(self, pt: PointF) -> bool: ...
    @overload
    def IsPickPoint(self, box: RectangleF, bCrossingBox: GH_PickBox) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SketchEllipse:
    def __init__(self): ...


class GH_SketchFreehandStroke:
    def __init__(self): ...


class GH_SketchLine:
    def __init__(self): ...


class IGH_SketchElement:
    @property
    def BoundingBox(self) -> RectangleF: ...
    @property
    def GraphicsPath(self) -> GraphicsPath: ...
    @property
    def Icon_24x24(self) -> Image: ...
    @overload
    def IsPickPoint(self, pt: PointF) -> bool: ...
    @overload
    def IsPickPoint(self, box: RectangleF, bCrossingBox: GH_PickBox) -> bool: ...
