__all__ = ['ThemedControls']
from typing import Tuple, Set, Iterable, List, overload


class AboutDialog(CommonDialog):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assembly: Assembly): ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> Set(str): ...
    @property
    def Developers(self) -> Set(str): ...
    @property
    def Documenters(self) -> Set(str): ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Image: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> None: ...
    @Designers.setter
    def Designers(self, value: Set(str)) -> None: ...
    @Developers.setter
    def Developers(self, value: Set(str)) -> None: ...
    @Documenters.setter
    def Documenters(self, value: Set(str)) -> None: ...
    @License.setter
    def License(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Image) -> None: ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: str) -> None: ...
    @ProgramName.setter
    def ProgramName(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...
    @Website.setter
    def Website(self, value: Uri) -> None: ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: str) -> None: ...




class Application(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, platformType: str): ...
    @overload
    def __init__(self, platform: Platform): ...
    def add_Initialized(self, value: EventHandler) -> None: ...
    def add_LocalizeString(self, value: EventHandler) -> None: ...
    def add_NotificationActivated(self, value: EventHandler) -> None: ...
    def add_Terminating(self, value: EventHandler) -> None: ...
    def add_UnhandledException(self, value: EventHandler) -> None: ...
    def AsyncInvoke(self, action: Action) -> None: ...
    def Attach(self, context: Object) -> Application: ...
    @property
    def AlternateModifier(self) -> Keys: ...
    @property
    def BadgeLabel(self) -> str: ...
    @property
    def CommonModifier(self) -> Keys: ...
    @property
    def Instance() -> Application: ...
    @property
    def MainForm(self) -> Form: ...
    @property
    def Name(self) -> str: ...
    @property
    def QuitIsSupported(self) -> bool: ...
    @property
    def Windows(self) -> Iterable[Window]: ...
    @overload
    def Invoke(self, func: Func) -> T: ...
    @overload
    def Invoke(self, action: Action) -> None: ...
    @overload
    def InvokeAsync(self, action: Action) -> Task: ...
    @overload
    def InvokeAsync(self, func: Func) -> Task: ...
    def Localize(self, source: Object, text: str) -> str: ...
    def Open(self, url: str) -> None: ...
    def Quit(self) -> None: ...
    def remove_Initialized(self, value: EventHandler) -> None: ...
    def remove_LocalizeString(self, value: EventHandler) -> None: ...
    def remove_NotificationActivated(self, value: EventHandler) -> None: ...
    def remove_Terminating(self, value: EventHandler) -> None: ...
    def remove_UnhandledException(self, value: EventHandler) -> None: ...
    def Restart(self) -> None: ...
    @overload
    def Run(self) -> None: ...
    @overload
    def Run(self, dialog: Dialog) -> None: ...
    @overload
    def Run(self, mainForm: Form) -> None: ...
    def RunIteration(self) -> None: ...
    @BadgeLabel.setter
    def BadgeLabel(self, value: str) -> None: ...
    @MainForm.setter
    def MainForm(self, value: Form) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...


class AutoSelectMode:
    OnFocus = 0
    Never = 1
    Always = 2




class BindableExtensions:
    @overload
    def Bind(bindable: IBindable, widgetPropertyName: str, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(bindable: IBindable, controlBinding: IndirectBinding, valueBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(control: TWidget, controlProperty: Expression, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(bindable: IBindable, propertyName: str, source: Object, sourcePropertyName: str, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(control: TWidget, controlProperty: Expression, source: TSource, sourceProperty: Expression, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(control: TWidget, controlProperty: Expression, source: TSource, sourceBinding: IndirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    def Bind(bindable: IBindable, controlBinding: IndirectBinding, objectValue: Object, objectBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    def BindDataContext(control: TWidget, controlProperty: Expression, sourceProperty: Expression, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    def BindDataContext(control: TWidget, controlProperty: Expression, sourceBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    def BindDataContext(bindable: IBindable, controlPropertyName: str, dataContextPropertyName: str, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    def BindDataContext(bindable: IBindable, controlBinding: IndirectBinding, dataContextBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    def DefaultIfNull(binding: BindableBinding, defaultValue: Nullable) -> BindableBinding: ...
    @overload
    def DefaultIfNull(binding: BindableBinding, defaultValue: TValue) -> BindableBinding: ...
    @overload
    def Inverse(binding: BindableBinding) -> BindableBinding: ...
    @overload
    def Inverse(binding: BindableBinding) -> BindableBinding: ...
    @overload
    def Inverse(binding: DirectBinding) -> DirectBinding: ...
    @overload
    def Inverse(binding: DirectBinding) -> DirectBinding: ...


class BindableWidget(Widget):
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def DataContext(self) -> Object: ...
    @property
    def Parent(self) -> Widget: ...
    @property
    def Parents(self) -> Iterable[Widget]: ...
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @DataContext.setter
    def DataContext(self, value: Object) -> None: ...
    def Unbind(self) -> None: ...
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class Binding:
    def add_Changed(self, value: EventHandler) -> None: ...
    def add_Changing(self, value: EventHandler) -> None: ...
    @overload
    def AddPropertyEvent(obj: T, propertyExpression: Expression, eh: EventHandler) -> None: ...
    @overload
    def AddPropertyEvent(obj: Object, propertyName: str, eh: EventHandler) -> None: ...
    @overload
    def Delegate(getValue: Func, setValue: Action, addChangeEvent: Action, removeChangeEvent: Action) -> DirectBinding: ...
    @overload
    def Delegate(getValue: Func, setValue: Action, addChangeEvent: Action, removeChangeEvent: Action, defaultGetValue: TValue, defaultSetValue: TValue) -> IndirectBinding: ...
    @overload
    def ExecuteCommand(dataContext: Object, commandExpression: Expression, parameter: Object) -> None: ...
    @overload
    def ExecuteCommand(dataContext: Object, commandBinding: IndirectBinding, parameter: Object) -> None: ...
    @overload
    def Property(propertyName: str) -> IndirectBinding: ...
    @overload
    def Property(propertyExpression: Expression) -> IndirectBinding: ...
    @overload
    def Property(model: T, propertyExpression: Expression) -> DirectBinding: ...
    @overload
    def Property(propertyName: str, ignoreCase: bool) -> IndirectBinding: ...
    def remove_Changed(self, value: EventHandler) -> None: ...
    def remove_Changing(self, value: EventHandler) -> None: ...
    def RemovePropertyEvent(obj: Object, eh: EventHandler) -> None: ...
    def Unbind(self) -> None: ...
    def Update(self, mode: BindingUpdateMode) -> None: ...


class BindingChangedEventArgs:
    def __init__(self, value: Object): ...
    @property
    def Value(self) -> Object: ...


class BindingChangingEventArgs:
    def __init__(self, value: Object): ...
    @property
    def Value(self) -> Object: ...
    @Value.setter
    def Value(self, value: Object) -> None: ...


class BindingCollection:
    def __init__(self): ...
    def Unbind(self) -> None: ...
    def Update(self, mode: BindingUpdateMode) -> None: ...


class BindingExtensions:
    def WhenLostFocus(binding: BindableBinding) -> BindableBinding: ...


class BindingUpdateMode:
    Source = 0
    Destination = 1


class BorderType:
    Bezel = 0
    Line = 1
    #None = 2


class Button(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: EventHandler): ...
    def add_Click(self, value: EventHandler) -> None: ...
    @property
    def Command(self) -> ICommand: ...
    @property
    def CommandParameter(self) -> Object: ...
    @property
    def Height(self) -> int: ...
    @property
    def Image(self) -> Image: ...
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Width(self) -> int: ...
    def PerformClick(self) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    @Command.setter
    def Command(self, value: ICommand) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImagePosition.setter
    def ImagePosition(self, value: ButtonImagePosition) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class ButtonImagePosition:
    Left = 0
    Right = 1
    Above = 2
    Below = 3
    Overlay = 4


class ButtonMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: EventHandler): ...
    @overload
    def __init__(self, command: Command): ...
    @property
    def Image(self) -> Image: ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def Trim(self) -> bool: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Trim.setter
    def Trim(self, value: bool) -> None: ...


class ButtonSegmentedItem(SegmentedItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: Command): ...


class ButtonToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: EventHandler): ...
    @overload
    def __init__(self, command: Command): ...


class Calendar(Control):
    def __init__(self): ...
    def add_SelectedDateChanged(self, value: EventHandler) -> None: ...
    def add_SelectedRangeChanged(self, value: EventHandler) -> None: ...
    @property
    def MaxDate(self) -> DateTime: ...
    @property
    def MinDate(self) -> DateTime: ...
    @property
    def Mode(self) -> CalendarMode: ...
    @property
    def SelectedDate(self) -> DateTime: ...
    @property
    def SelectedRange(self) -> Range: ...
    def remove_SelectedDateChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedRangeChanged(self, value: EventHandler) -> None: ...
    @MaxDate.setter
    def MaxDate(self, value: DateTime) -> None: ...
    @MinDate.setter
    def MinDate(self, value: DateTime) -> None: ...
    @Mode.setter
    def Mode(self, value: CalendarMode) -> None: ...
    @SelectedDate.setter
    def SelectedDate(self, value: DateTime) -> None: ...
    @SelectedRange.setter
    def SelectedRange(self, value: Range) -> None: ...


class CalendarMode:
    Single = 0
    Range = 1


class Cell(Widget):
    pass


class CellEventArgs:
    @overload
    def __init__(self, row: int, item: Object, cellState: CellStates): ...
    @overload
    def __init__(self, grid: Grid, cell: Cell, row: int, item: Object, cellState: CellStates): ...
    @overload
    def __init__(self, grid: Grid, cell: Cell, row: int, column: int, item: Object, cellState: CellStates, control: Control): ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @property
    def Cell(self) -> Cell: ...
    @property
    def CellState(self) -> CellStates: ...
    @property
    def CellTextColor(self) -> Color: ...
    @property
    def Column(self) -> int: ...
    @property
    def Control(self) -> Control: ...
    @property
    def Grid(self) -> Grid: ...
    @property
    def GridColumn(self) -> GridColumn: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Row(self) -> int: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class CellPaintEventArgs(PaintEventArgs):
    def __init__(self, graphics: Graphics, clipRectangle: RectangleF, cellState: CellStates, item: Object): ...
    @property
    def CellState(self) -> CellStates: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def Item(self) -> Object: ...


class CellStates:
    #None = 0
    Selected = 1
    Editing = 2


class CheckBox(TextControl):
    def __init__(self): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> Nullable: ...
    @property
    def CheckedBinding(self) -> BindableBinding: ...
    @property
    def ThreeState(self) -> bool: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: Nullable) -> None: ...
    @ThreeState.setter
    def ThreeState(self, value: bool) -> None: ...


class CheckBoxCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...


class CheckBoxList(Panel):
    def __init__(self): ...
    def add_SelectedKeysChanged(self, value: EventHandler) -> None: ...
    def add_SelectedValuesChanged(self, value: EventHandler) -> None: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def Items(self) -> ListItemCollection: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def ItemToolTipBinding(self) -> IIndirectBinding: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SelectedKeys(self) -> Iterable[str]: ...
    @property
    def SelectedKeysBinding(self) -> BindableBinding: ...
    @property
    def SelectedValues(self) -> Iterable[Object]: ...
    @property
    def SelectedValuesBinding(self) -> BindableBinding: ...
    @property
    def Spacing(self) -> Size: ...
    @property
    def TextColor(self) -> Color: ...
    def remove_SelectedKeysChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedValuesChanged(self, value: EventHandler) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: IIndirectBinding) -> None: ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: IIndirectBinding) -> None: ...
    @ItemToolTipBinding.setter
    def ItemToolTipBinding(self, value: IIndirectBinding) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @SelectedKeys.setter
    def SelectedKeys(self, value: Iterable[str]) -> None: ...
    @SelectedValues.setter
    def SelectedValues(self, value: Iterable[Object]) -> None: ...
    @Spacing.setter
    def Spacing(self, value: Size) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class CheckCommand(Command):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: EventHandler): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    def CreateMenuItem(self) -> MenuItem: ...
    def CreateToolItem(self) -> ToolItem: ...
    @property
    def Checked(self) -> bool: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class CheckMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    def PerformClick(self) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class CheckToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    def OnCheckedChanged(self, e: EventArgs) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class Clipboard(Widget):
    def __init__(self): ...
    def Clear(self) -> None: ...
    def Contains(self, type: str) -> bool: ...
    @property
    def ContainsHtml(self) -> bool: ...
    @property
    def ContainsImage(self) -> bool: ...
    @property
    def ContainsText(self) -> bool: ...
    @property
    def ContainsUris(self) -> bool: ...
    @property
    def Html(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Instance() -> Clipboard: ...
    @property
    def Text(self) -> str: ...
    @property
    def Types(self) -> Set(str): ...
    @property
    def Uris(self) -> Set(Uri): ...
    def GetData(self, type: str) -> Set(Byte): ...
    def GetDataStream(self, type: str) -> Stream: ...
    @overload
    def GetObject(self, type: str) -> T: ...
    @overload
    def GetObject(self, type: str) -> Object: ...
    def GetString(self, type: str) -> str: ...
    @Html.setter
    def Html(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Uris.setter
    def Uris(self, value: Set(Uri)) -> None: ...
    def SetData(self, value: Set(Byte), type: str) -> None: ...
    def SetDataStream(self, stream: Stream, type: str) -> None: ...
    def SetObject(self, value: Object, type: str) -> None: ...
    def SetString(self, value: str, type: str) -> None: ...


class CollectionEditor(Control):
    def __init__(self): ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def ElementType(self) -> Type: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @ElementType.setter
    def ElementType(self, value: Type) -> None: ...


class ColorDialog(CommonDialog):
    def __init__(self): ...
    def add_ColorChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    def remove_ColorChanged(self, value: EventHandler) -> None: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: bool) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...


class ColorPicker(Control):
    def __init__(self): ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @property
    def Value(self) -> Color: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Color) -> None: ...




class ComboBox(DropDown):
    def __init__(self): ...
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @AutoComplete.setter
    def AutoComplete(self, value: bool) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class ComboBoxCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def ComboKeyBinding(self) -> IIndirectBinding: ...
    @property
    def ComboTextBinding(self) -> IIndirectBinding: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @ComboKeyBinding.setter
    def ComboKeyBinding(self, value: IIndirectBinding) -> None: ...
    @ComboTextBinding.setter
    def ComboTextBinding(self, value: IIndirectBinding) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...


class Command:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: EventHandler): ...
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_Executed(self, value: EventHandler) -> None: ...
    def CreateMenuItem(self) -> MenuItem: ...
    def CreateToolItem(self) -> ToolItem: ...
    def Execute(self) -> None: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def CommandParameter(self) -> Object: ...
    @property
    def DataContext(self) -> Object: ...
    @property
    def DelegatedCommand(self) -> ICommand: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def MenuText(self) -> str: ...
    @property
    def Parent(self) -> IBindable: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def ToolBarText(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @overload
    def op_Implicit(command: Command) -> ToolItem: ...
    @overload
    def op_Implicit(command: Command) -> MenuItem: ...
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_Executed(self, value: EventHandler) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...
    @DataContext.setter
    def DataContext(self, value: Object) -> None: ...
    @DelegatedCommand.setter
    def DelegatedCommand(self, value: ICommand) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @MenuText.setter
    def MenuText(self, value: str) -> None: ...
    @Parent.setter
    def Parent(self, value: IBindable) -> None: ...
    @Shortcut.setter
    def Shortcut(self, value: Keys) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @ToolBarText.setter
    def ToolBarText(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...


class CommonControl(Control):
    @property
    def Font(self) -> Font: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...


class CommonDialog(Widget):
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...


class Container(Control):
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @property
    def Children(self) -> Iterable[Control]: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    def RemoveAll(self) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @StyleProvider.setter
    def StyleProvider(self, value: IStyleProvider) -> None: ...


class ContextMenu(Menu):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def __init__(self, items: Set(MenuItem)): ...
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: EventHandler) -> None: ...
    def add_Opening(self, value: EventHandler) -> None: ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def Trim(self) -> bool: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: EventHandler) -> None: ...
    def remove_Opening(self, value: EventHandler) -> None: ...
    @Trim.setter
    def Trim(self, value: bool) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, location: PointF) -> None: ...
    @overload
    def Show(self, relativeTo: Control) -> None: ...
    @overload
    def Show(self, relativeTo: Control, location: Nullable) -> None: ...


class Control(BindableWidget):
    def __init__(self, handler: IHandler): ...
    def add_DragDrop(self, value: EventHandler) -> None: ...
    def add_DragEnter(self, value: EventHandler) -> None: ...
    def add_DragLeave(self, value: EventHandler) -> None: ...
    def add_DragOver(self, value: EventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_KeyDown(self, value: EventHandler) -> None: ...
    def add_KeyUp(self, value: EventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: EventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: EventHandler) -> None: ...
    def add_MouseUp(self, value: EventHandler) -> None: ...
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    def add_PreLoad(self, value: EventHandler) -> None: ...
    def add_Shown(self, value: EventHandler) -> None: ...
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    def add_TextInput(self, value: EventHandler) -> None: ...
    def add_UnLoad(self, value: EventHandler) -> None: ...
    def AttachNative(self) -> None: ...
    def Detach(self) -> None: ...
    def DetachNative(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def op_Implicit(image: Image) -> Control: ...
    @overload
    def op_Implicit(labelText: str) -> Control: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    def remove_DragOver(self, value: EventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    def remove_Shown(self, value: EventHandler) -> None: ...
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    def remove_TextInput(self, value: EventHandler) -> None: ...
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SuspendLayout(self) -> None: ...


class Cursor(Widget):
    @overload
    def __init__(self, type: CursorType): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, image: Bitmap, hotspot: PointF): ...
    @overload
    def __init__(self, image: Icon, hotspot: PointF): ...
    @overload
    def FromResource(resourceName: str, assembly: Assembly) -> Cursor: ...
    @overload
    def FromResource(resourceName: str, type: Type) -> Cursor: ...


class Cursors:
    def Cached(type: CursorType) -> Cursor: ...
    def ClearCache() -> None: ...
    @property
    def Arrow() -> Cursor: ...
    @property
    def Crosshair() -> Cursor: ...
    @property
    def Default() -> Cursor: ...
    @property
    def HorizontalSplit() -> Cursor: ...
    @property
    def IBeam() -> Cursor: ...
    @property
    def Move() -> Cursor: ...
    @property
    def Pointer() -> Cursor: ...
    @property
    def VerticalSplit() -> Cursor: ...


class CursorType:
    Default = 0
    Arrow = 1
    Crosshair = 2
    Pointer = 3
    Move = 4
    IBeam = 5
    VerticalSplit = 6
    HorizontalSplit = 7


class CustomCell(Cell):
    def __init__(self): ...
    def add_BeginEdit(self, value: EventHandler) -> None: ...
    def add_CancelEdit(self, value: EventHandler) -> None: ...
    def add_CommitEdit(self, value: EventHandler) -> None: ...
    def add_Paint(self, value: EventHandler) -> None: ...
    def Create() -> CustomCell: ...
    @property
    def ConfigureCell(self) -> Action: ...
    @property
    def CreateCell(self) -> Func: ...
    @property
    def GetIdentifier(self) -> Func: ...
    @property
    def GetPreferredWidth(self) -> Func: ...
    @property
    def SupportsControlView() -> bool: ...
    def remove_BeginEdit(self, value: EventHandler) -> None: ...
    def remove_CancelEdit(self, value: EventHandler) -> None: ...
    def remove_CommitEdit(self, value: EventHandler) -> None: ...
    def remove_Paint(self, value: EventHandler) -> None: ...
    @ConfigureCell.setter
    def ConfigureCell(self, value: Action) -> None: ...
    @CreateCell.setter
    def CreateCell(self, value: Func) -> None: ...
    @GetIdentifier.setter
    def GetIdentifier(self, value: Func) -> None: ...
    @GetPreferredWidth.setter
    def GetPreferredWidth(self, value: Func) -> None: ...


class DataFormats:
    @property
    def Color() -> str: ...
    @property
    def Html() -> str: ...
    @property
    def Text() -> str: ...


class DataObject(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    def Clear(self) -> None: ...
    def Contains(self, type: str) -> bool: ...
    @property
    def ContainsHtml(self) -> bool: ...
    @property
    def ContainsImage(self) -> bool: ...
    @property
    def ContainsText(self) -> bool: ...
    @property
    def ContainsUris(self) -> bool: ...
    @property
    def Html(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    @property
    def Types(self) -> Set(str): ...
    @property
    def Uris(self) -> Set(Uri): ...
    def GetData(self, type: str) -> Set(Byte): ...
    def GetDataStream(self, type: str) -> Stream: ...
    @overload
    def GetObject(self, type: str) -> Object: ...
    @overload
    def GetObject(self, type: str) -> T: ...
    def GetString(self, type: str) -> str: ...
    @Html.setter
    def Html(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Uris.setter
    def Uris(self, value: Set(Uri)) -> None: ...
    def SetData(self, value: Set(Byte), type: str) -> None: ...
    def SetDataStream(self, stream: Stream, type: str) -> None: ...
    def SetObject(self, value: Object, type: str) -> None: ...
    def SetString(self, value: str, type: str) -> None: ...






class DateTimePicker(CommonControl):
    def __init__(self): ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def MaxDate(self) -> DateTime: ...
    @property
    def MinDate(self) -> DateTime: ...
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def Value(self) -> Nullable: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @MaxDate.setter
    def MaxDate(self, value: DateTime) -> None: ...
    @MinDate.setter
    def MinDate(self, value: DateTime) -> None: ...
    @Mode.setter
    def Mode(self, value: DateTimePickerMode) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @Value.setter
    def Value(self, value: Nullable) -> None: ...


class DateTimePickerMode:
    Date = 1
    Time = 2
    DateTime = 3






class Dialog(Window):
    def __init__(self): ...
    @property
    def AbortButton(self) -> Button: ...
    @property
    def DefaultButton(self) -> Button: ...
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    @property
    def NegativeButtons(self) -> Collection: ...
    @property
    def PositiveButtons(self) -> Collection: ...
    @AbortButton.setter
    def AbortButton(self, value: Button) -> None: ...
    @DefaultButton.setter
    def DefaultButton(self, value: Button) -> None: ...
    @DisplayMode.setter
    def DisplayMode(self, value: DialogDisplayMode) -> None: ...
    @overload
    def ShowModal(self) -> None: ...
    @overload
    def ShowModal(self, owner: Control) -> None: ...
    @overload
    def ShowModalAsync(self) -> Task: ...
    @overload
    def ShowModalAsync(self, owner: Control) -> Task: ...




class DialogDisplayMode:
    Default = 0
    Attached = 1
    Separate = 2
    Navigation = 4


class DialogResult:
    #None = 0
    Ok = 1
    Cancel = 2
    Yes = 3
    No = 4
    Abort = 5
    Ignore = 6
    Retry = 7




class DockPosition:
    Top = 0
    Left = 1
    Right = 2
    Bottom = 3


class DocumentControl(Container):
    def __init__(self): ...
    def add_PageClosed(self, value: EventHandler) -> None: ...
    def add_PageReordered(self, value: EventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Pages(self) -> List[DocumentPage]: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedPage(self) -> DocumentPage: ...
    def remove_PageClosed(self, value: EventHandler) -> None: ...
    def remove_PageReordered(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @AllowReordering.setter
    def AllowReordering(self, value: bool) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedPage.setter
    def SelectedPage(self, value: DocumentPage) -> None: ...


class DocumentPage(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, padding: Nullable): ...
    def add_Click(self, value: EventHandler) -> None: ...
    def add_Closed(self, value: EventHandler) -> None: ...
    @property
    def Closable(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    @Closable.setter
    def Closable(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class DocumentPageEventArgs:
    def __init__(self, page: DocumentPage): ...
    @property
    def Page(self) -> DocumentPage: ...


class DocumentPageReorderEventArgs(DocumentPageEventArgs):
    def __init__(self, page: DocumentPage, oldIndex: int, newIndex: int): ...
    @property
    def NewIndex(self) -> int: ...
    @property
    def OldIndex(self) -> int: ...


class DragEffects:
    #None = 0
    Copy = 1
    Move = 2
    Link = 4
    All = 7


class DragEventArgs:
    def __init__(self, source: Control, data: DataObject, allowedEffects: DragEffects, location: PointF, modifiers: Keys, buttons: MouseButtons, controlObject: Object): ...
    @property
    def AllowedEffects(self) -> DragEffects: ...
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Data(self) -> DataObject: ...
    @property
    def Effects(self) -> DragEffects: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Source(self) -> Control: ...
    @property
    def SupportsDropDescription(self) -> bool: ...
    @Effects.setter
    def Effects(self, value: DragEffects) -> None: ...
    def SetDropDescription(self, format: str, inner: str) -> None: ...


class Drawable(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, largeCanvas: bool): ...
    def add_Paint(self, value: EventHandler) -> None: ...
    def CreateGraphics(self) -> Graphics: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def SupportsCreateGraphics(self) -> bool: ...
    def remove_Paint(self, value: EventHandler) -> None: ...
    @CanFocus.setter
    def CanFocus(self, value: bool) -> None: ...
    def Update(self, region: Rectangle) -> None: ...


class DrawableCell(Cell):
    def __init__(self): ...
    def add_Paint(self, value: EventHandler) -> None: ...
    def remove_Paint(self, value: EventHandler) -> None: ...


class DropDown(ListControl):
    def __init__(self): ...
    def add_DropDownClosed(self, value: EventHandler) -> None: ...
    def add_DropDownOpening(self, value: EventHandler) -> None: ...
    def add_FormatItem(self, value: EventHandler) -> None: ...
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    @property
    def ShowBorder(self) -> bool: ...
    def remove_DropDownClosed(self, value: EventHandler) -> None: ...
    def remove_DropDownOpening(self, value: EventHandler) -> None: ...
    def remove_FormatItem(self, value: EventHandler) -> None: ...
    @ItemImageBinding.setter
    def ItemImageBinding(self, value: IIndirectBinding) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...


class DropDownFormatEventArgs:
    def __init__(self, item: Object, row: int, font: Font): ...
    @property
    def Font(self) -> Font: ...
    @property
    def IsFontSet(self) -> bool: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Row(self) -> int: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...




class DualBindingMode:
    OneWay = 0
    TwoWay = 1
    OneWayToSource = 2
    OneTime = 3
    Manual = 4


class DynamicControl(DynamicItem):
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def Control(self) -> Control: ...
    @Control.setter
    def Control(self, value: Control) -> None: ...


class DynamicGroup(DynamicTable):
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def GroupBox(self) -> GroupBox: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class DynamicItem:
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @property
    def XScale(self) -> Nullable: ...
    @property
    def YScale(self) -> Nullable: ...
    @overload
    def op_Implicit(control: Control) -> DynamicItem: ...
    @overload
    def op_Implicit(label: str) -> DynamicItem: ...
    @XScale.setter
    def XScale(self, value: Nullable) -> None: ...
    @YScale.setter
    def YScale(self, value: Nullable) -> None: ...


class DynamicLayout(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: Set(DynamicRow)): ...
    @overload
    def __init__(self, rows: Iterable[DynamicRow]): ...
    def Add(self, control: Control, xscale: Nullable, yscale: Nullable) -> DynamicControl: ...
    def AddAutoSized(self, control: Control, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, centered: bool) -> None: ...
    def AddCentered(self, control: Control, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, horizontalCenter: bool, verticalCenter: bool) -> None: ...
    def AddColumn(self, controls: Set(Control)) -> None: ...
    @overload
    def AddRange(self, controls: Iterable[Control]) -> None: ...
    @overload
    def AddRange(self, controls: Set(Control)) -> None: ...
    def AddRow(self, controls: Set(Control)) -> DynamicRow: ...
    @overload
    def AddSeparateColumn(self, controls: Set(Control)) -> DynamicTable: ...
    @overload
    def AddSeparateColumn(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, controls: Iterable[Control]) -> DynamicTable: ...
    @overload
    def AddSeparateRow(self, controls: Set(Control)) -> DynamicRow: ...
    @overload
    def AddSeparateRow(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, controls: Iterable[Control]) -> DynamicRow: ...
    def AddSpace(self, xscale: Nullable, yscale: Nullable) -> DynamicControl: ...
    def BeginCentered(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> None: ...
    def BeginGroup(self, title: str, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicGroup: ...
    def BeginHorizontal(self, yscale: Nullable) -> DynamicRow: ...
    def BeginScrollable(self, border: BorderType, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicScrollable: ...
    def BeginVertical(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicTable: ...
    def Clear(self) -> None: ...
    def Create(self) -> None: ...
    def EndBeginHorizontal(self, yscale: Nullable) -> DynamicRow: ...
    def EndBeginVertical(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicTable: ...
    def EndCentered(self) -> None: ...
    def EndGroup(self) -> None: ...
    def EndHorizontal(self) -> None: ...
    def EndScrollable(self) -> None: ...
    def EndVertical(self) -> None: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def DefaultPadding(self) -> Nullable: ...
    @property
    def DefaultSpacing(self) -> Nullable: ...
    @property
    def IsCreated(self) -> bool: ...
    @property
    def Padding(self) -> Nullable: ...
    @property
    def Rows(self) -> Collection: ...
    @property
    def Spacing(self) -> Nullable: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @DefaultPadding.setter
    def DefaultPadding(self, value: Nullable) -> None: ...
    @DefaultSpacing.setter
    def DefaultSpacing(self, value: Nullable) -> None: ...
    @Padding.setter
    def Padding(self, value: Nullable) -> None: ...
    @Spacing.setter
    def Spacing(self, value: Nullable) -> None: ...


class DynamicRow:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Set(DynamicItem)): ...
    @overload
    def __init__(self, items: Iterable[DynamicItem]): ...
    @overload
    def __init__(self, controls: Iterable[Control], xscale: Nullable, yscale: Nullable): ...
    @overload
    def Add(self, controls: Set(Control)) -> None: ...
    @overload
    def Add(self, items: Set(DynamicItem)) -> None: ...
    @overload
    def Add(self, items: Iterable[DynamicItem]) -> None: ...
    @overload
    def Add(self, controls: Iterable[Control], xscale: Nullable, yscale: Nullable) -> None: ...
    @property
    def Items(self) -> Collection: ...
    @property
    def Table(self) -> DynamicTable: ...
    def op_Implicit(control: Control) -> DynamicRow: ...


class DynamicScrollable(DynamicTable):
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def Scrollable(self) -> Scrollable: ...
    @Border.setter
    def Border(self, value: BorderType) -> None: ...


class DynamicTable(DynamicItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: Set(DynamicRow)): ...
    @overload
    def __init__(self, rows: Iterable[DynamicRow]): ...
    def Add(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, row: DynamicRow) -> None: ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @property
    def Padding(self) -> Nullable: ...
    @property
    def Parent(self) -> DynamicTable: ...
    @property
    def Rows(self) -> Collection: ...
    @property
    def Spacing(self) -> Nullable: ...
    @property
    def Table(self) -> TableLayout: ...
    @property
    def Visible(self) -> bool: ...
    @Padding.setter
    def Padding(self, value: Nullable) -> None: ...
    @Spacing.setter
    def Spacing(self, value: Nullable) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...








class Expander(Panel):
    def __init__(self): ...
    def add_ExpandedChanged(self, value: EventHandler) -> None: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Header(self) -> Control: ...
    def remove_ExpandedChanged(self, value: EventHandler) -> None: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @Header.setter
    def Header(self, value: Control) -> None: ...


class FileDialog(CommonDialog):
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def Directory(self) -> Uri: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Filters(self) -> Collection: ...
    @property
    def Title(self) -> str: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: bool) -> None: ...
    @CurrentFilter.setter
    def CurrentFilter(self, value: FileFilter) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: int) -> None: ...
    @Directory.setter
    def Directory(self, value: Uri) -> None: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class FileFilter:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, extensions: Set(str)): ...
    @property
    def Extensions(self) -> Set(str): ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def op_Implicit(filter: str) -> FileFilter: ...
    @Extensions.setter
    def Extensions(self, value: Set(str)) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class FilePicker(Control):
    def __init__(self): ...
    def add_FilePathChanged(self, value: EventHandler) -> None: ...
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def FileAction(self) -> FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def Filters(self) -> Collection: ...
    @property
    def Title(self) -> str: ...
    def remove_FilePathChanged(self, value: EventHandler) -> None: ...
    @CurrentFilter.setter
    def CurrentFilter(self, value: FileFilter) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: int) -> None: ...
    @FileAction.setter
    def FileAction(self, value: FileAction) -> None: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...




class FixedMaskedTextProvider:
    def __init__(self, mask: str, culture: CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool): ...
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def AutoAdvance(self) -> bool: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @property
    def IncludeLiterals(self) -> bool: ...
    @property
    def IncludePrompt(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsPassword(self) -> bool: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def PromptChar(self) -> Char: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @AutoAdvance.setter
    def AutoAdvance(self, value: bool) -> None: ...
    @IncludeLiterals.setter
    def IncludeLiterals(self, value: bool) -> None: ...
    @IncludePrompt.setter
    def IncludePrompt(self, value: bool) -> None: ...
    @IsPassword.setter
    def IsPassword(self, value: bool) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @PromptChar.setter
    def PromptChar(self, value: Char) -> None: ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...




class FloatingForm(Form):
    def __init__(self): ...


class FontDialog(CommonDialog):
    def __init__(self): ...
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @property
    def Font(self) -> Font: ...
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...


class FontPicker(Control):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, font: Font): ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def Value(self) -> Font: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @Value.setter
    def Value(self, value: Font) -> None: ...


class Form(Window):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def ShowActivated(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: bool) -> None: ...
    @ShowActivated.setter
    def ShowActivated(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def Show(self) -> None: ...


class Grid(Control):
    def add_CellClick(self, value: EventHandler) -> None: ...
    def add_CellDoubleClick(self, value: EventHandler) -> None: ...
    def add_CellEdited(self, value: EventHandler) -> None: ...
    def add_CellEditing(self, value: EventHandler) -> None: ...
    def add_CellFormatting(self, value: EventHandler) -> None: ...
    def add_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    def add_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    def add_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    def BeginEdit(self, row: int, column: int) -> None: ...
    def CancelEdit(self) -> bool: ...
    def CommitEdit(self) -> bool: ...
    @property
    def AllowColumnReordering(self) -> bool: ...
    @property
    def AllowEmptySelection(self) -> bool: ...
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def Columns(self) -> GridColumnCollection: ...
    @property
    def GridLines(self) -> GridLines: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def RowHeight(self) -> int: ...
    @property
    def SelectedItem(self) -> Object: ...
    @property
    def SelectedItemBinding(self) -> BindableBinding: ...
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @property
    def SelectedRow(self) -> int: ...
    @property
    def SelectedRows(self) -> Iterable[int]: ...
    @property
    def ShowHeader(self) -> bool: ...
    def remove_CellClick(self, value: EventHandler) -> None: ...
    def remove_CellDoubleClick(self, value: EventHandler) -> None: ...
    def remove_CellEdited(self, value: EventHandler) -> None: ...
    def remove_CellEditing(self, value: EventHandler) -> None: ...
    def remove_CellFormatting(self, value: EventHandler) -> None: ...
    def remove_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    def remove_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    def ScrollToRow(self, row: int) -> None: ...
    def SelectAll(self) -> None: ...
    def SelectRow(self, row: int) -> None: ...
    @AllowColumnReordering.setter
    def AllowColumnReordering(self, value: bool) -> None: ...
    @AllowEmptySelection.setter
    def AllowEmptySelection(self, value: bool) -> None: ...
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self, value: bool) -> None: ...
    @Border.setter
    def Border(self, value: BorderType) -> None: ...
    @GridLines.setter
    def GridLines(self, value: GridLines) -> None: ...
    @RowHeight.setter
    def RowHeight(self, value: int) -> None: ...
    @SelectedRow.setter
    def SelectedRow(self, value: int) -> None: ...
    @SelectedRows.setter
    def SelectedRows(self, value: Iterable[int]) -> None: ...
    @ShowHeader.setter
    def ShowHeader(self, value: bool) -> None: ...
    def UnselectAll(self) -> None: ...
    def UnselectRow(self, row: int) -> None: ...


class GridCell:
    @property
    def Column(self) -> GridColumn: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def Item(self) -> Object: ...
    @property
    def RowIndex(self) -> int: ...


class GridCellFormatEventArgs:
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Column(self) -> GridColumn: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForegroundColor(self) -> Color: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Row(self) -> int: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForegroundColor.setter
    def ForegroundColor(self, value: Color) -> None: ...


class GridCellMouseEventArgs(MouseEventArgs):
    def __init__(self, gridColumn: GridColumn, row: int, column: int, item: Object, buttons: MouseButtons, modifiers: Keys, location: PointF, delta: Nullable, pressure: Single): ...
    @property
    def Column(self) -> int: ...
    @property
    def GridColumn(self) -> GridColumn: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Row(self) -> int: ...


class GridColumn(Widget):
    def __init__(self): ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def DataCell(self) -> Cell: ...
    @property
    def Editable(self) -> bool: ...
    @property
    def Expand(self) -> bool: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def HeaderTextAlignment(self) -> TextAlignment: ...
    @property
    def MaxWidth(self) -> int: ...
    @property
    def MinWidth(self) -> int: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def Sortable(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @DataCell.setter
    def DataCell(self, value: Cell) -> None: ...
    @Editable.setter
    def Editable(self, value: bool) -> None: ...
    @Expand.setter
    def Expand(self, value: bool) -> None: ...
    @HeaderText.setter
    def HeaderText(self, value: str) -> None: ...
    @HeaderTextAlignment.setter
    def HeaderTextAlignment(self, value: TextAlignment) -> None: ...
    @MaxWidth.setter
    def MaxWidth(self, value: int) -> None: ...
    @MinWidth.setter
    def MinWidth(self, value: int) -> None: ...
    @Resizable.setter
    def Resizable(self, value: bool) -> None: ...
    @Sortable.setter
    def Sortable(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class GridColumnCollection:
    def __init__(self): ...


class GridColumnEventArgs:
    def __init__(self, column: GridColumn): ...
    @property
    def Column(self) -> GridColumn: ...


class GridDragPosition:
    Over = 0
    Before = 1
    After = 2


class GridItem:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Set(Object)): ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Values(self) -> Set(Object): ...
    def GetValue(self, column: int) -> Object: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Values.setter
    def Values(self, value: Set(Object)) -> None: ...
    def SetValue(self, column: int, value: Object) -> None: ...


class GridLines:
    #None = 0
    Horizontal = 1
    Vertical = 2
    Both = 3


class GridView(Grid):
    def __init__(self): ...
    @property
    def CanDeleteItem(self) -> Func: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def DeleteConfirmationTitle(self) -> Func: ...
    @property
    def DeleteItemHandler(self) -> Func: ...
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @property
    def SelectionPreserver(self) -> ISelectionPreserver: ...
    @property
    def ShowCellBorders(self) -> bool: ...
    def GetCellAt(self, location: PointF) -> GridCell: ...
    def GetDragInfo(self, args: DragEventArgs) -> GridViewDragInfo: ...
    @overload
    def ReloadData(self, range: Range) -> None: ...
    @overload
    def ReloadData(self, rows: Iterable[int]) -> None: ...
    @overload
    def ReloadData(self, row: int) -> None: ...
    @CanDeleteItem.setter
    def CanDeleteItem(self, value: Func) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @DeleteConfirmationTitle.setter
    def DeleteConfirmationTitle(self, value: Func) -> None: ...
    @DeleteItemHandler.setter
    def DeleteItemHandler(self, value: Func) -> None: ...
    @ShowCellBorders.setter
    def ShowCellBorders(self, value: bool) -> None: ...




class GridViewCellEventArgs:
    def __init__(self, gridColumn: GridColumn, row: int, column: int, item: Object): ...
    @property
    def Column(self) -> int: ...
    @property
    def GridColumn(self) -> GridColumn: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Row(self) -> int: ...


class GridViewDragInfo:
    def __init__(self, control: GridView, item: Object, index: int, position: GridDragPosition): ...
    @property
    def Control(self) -> GridView: ...
    @property
    def Index(self) -> int: ...
    @property
    def InsertIndex(self) -> int: ...
    @property
    def IsChanged(self) -> bool: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Position(self) -> GridDragPosition: ...
    def RestrictToInsert(self) -> None: ...
    def RestrictToOver(self) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Position.setter
    def Position(self, value: GridDragPosition) -> None: ...


class GroupBox(Panel):
    def __init__(self): ...
    @property
    def Font(self) -> Font: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Color: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class HorizontalAlignment:
    Left = 0
    Center = 1
    Right = 2
    Stretch = 3


class IBindable:
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def DataContext(self) -> Object: ...
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @DataContext.setter
    def DataContext(self, value: Object) -> None: ...


class IBindableWidgetContainer:
    @property
    def Children(self) -> Iterable[BindableWidget]: ...


class IBinding:
    def Unbind(self) -> None: ...
    def Update(self, mode: BindingUpdateMode) -> None: ...


class ICallback:
    def OnValueChanged(self, widget: DateTimePicker, e: EventArgs) -> None: ...


class ICallback:
    def OnActivated(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    def OnCollapsed(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    def OnCollapsing(self, widget: TreeGridView, e: TreeGridViewItemCancelEventArgs) -> None: ...
    def OnExpanded(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    def OnExpanding(self, widget: TreeGridView, e: TreeGridViewItemCancelEventArgs) -> None: ...
    def OnSelectedItemChanged(self, widget: TreeGridView, e: EventArgs) -> None: ...


class ICallback:
    def OnValueChanged(self, widget: FontPicker, e: EventArgs) -> None: ...


class ICallback:
    def OnCheckedChanged(self, widget: ToggleButton, e: EventArgs) -> None: ...


class ICallback:
    def OnCellClick(self, widget: Grid, e: GridCellMouseEventArgs) -> None: ...
    def OnCellDoubleClick(self, widget: Grid, e: GridCellMouseEventArgs) -> None: ...
    def OnCellEdited(self, widget: Grid, e: GridViewCellEventArgs) -> None: ...
    def OnCellEditing(self, widget: Grid, e: GridViewCellEventArgs) -> None: ...
    def OnCellFormatting(self, widget: Grid, e: GridCellFormatEventArgs) -> None: ...
    def OnColumnHeaderClick(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    def OnSelectionChanged(self, widget: Grid, e: EventArgs) -> None: ...


class ICallback:
    def OnPageClosed(self, widget: DocumentControl, e: DocumentPageEventArgs) -> None: ...
    def OnPageReordered(self, widget: DocumentControl, e: DocumentPageReorderEventArgs) -> None: ...
    def OnSelectedIndexChanged(self, widget: DocumentControl, e: EventArgs) -> None: ...


class ICallback:
    def OnStep(self, widget: TextStepper, e: StepperEventArgs) -> None: ...


class ICallback:
    def OnClick(self, widget: LinkButton, e: EventArgs) -> None: ...


class ICallback:
    def OnTextChanged(self, widget: TextControl, e: EventArgs) -> None: ...


class ICallback:
    def OnTextChanging(self, widget: TextBox, e: TextChangingEventArgs) -> None: ...


class ICallback:
    def OnActivated(self, widget: ListBox, e: EventArgs) -> None: ...


class ICallback:
    def OnValueChanged(self, widget: Slider, e: EventArgs) -> None: ...


class ICallback:
    def OnCaretIndexChanged(self, widget: TextArea, e: EventArgs) -> None: ...
    def OnSelectionChanged(self, widget: TextArea, e: EventArgs) -> None: ...


class ICallback:
    def OnSelectedIndexChanged(self, widget: ListControl, e: EventArgs) -> None: ...


class ICallback:
    def OnItemRemoved(self, widget: Navigation, e: NavigationItemEventArgs) -> None: ...
    def OnItemShown(self, widget: Navigation, e: NavigationItemEventArgs) -> None: ...


class ICallback:
    def OnSelectedIndexChanged(self, widget: TabControl, e: EventArgs) -> None: ...


class ICallback:
    def OnValueChanged(self, widget: NumericStepper, e: EventArgs) -> None: ...


class ICallback:
    def OnStep(self, widget: Stepper, e: StepperEventArgs) -> None: ...


class ICallback:
    def OnPropertyValueChanged(self, widget: PropertyGrid, e: PropertyValueChangedEventArgs) -> None: ...


class ICallback:
    def OnPositionChanged(self, widget: Splitter, e: EventArgs) -> None: ...
    def OnPositionChanging(self, widget: Splitter, e: SplitterPositionChangingEventArgs) -> None: ...


class ICallback:
    def OnCheckedChanged(self, widget: RadioButton, e: EventArgs) -> None: ...
    def OnClick(self, widget: RadioButton, e: EventArgs) -> None: ...


class ICallback:
    def OnScroll(self, widget: Scrollable, e: ScrollEventArgs) -> None: ...


class ICallback:
    def OnFilePathChanged(self, widget: FilePicker, e: EventArgs) -> None: ...


class ICallback:
    def OnActivated(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    def OnCollapsed(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    def OnCollapsing(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    def OnExpanded(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    def OnExpanding(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    def OnLabelEdited(self, widget: TreeView, e: TreeViewItemEditEventArgs) -> None: ...
    def OnLabelEditing(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    def OnNodeMouseClick(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    def OnSelectionChanged(self, widget: TreeView, e: EventArgs) -> None: ...


class ICallback:
    def OnElapsed(self, widget: UITimer, e: EventArgs) -> None: ...


class ICallback:
    def OnDocumentLoaded(self, widget: WebView, e: WebViewLoadedEventArgs) -> None: ...
    def OnDocumentLoading(self, widget: WebView, e: WebViewLoadingEventArgs) -> None: ...
    def OnDocumentTitleChanged(self, widget: WebView, e: WebViewTitleEventArgs) -> None: ...
    def OnNavigated(self, widget: WebView, e: WebViewLoadedEventArgs) -> None: ...
    def OnOpenNewWindow(self, widget: WebView, e: WebViewNewWindowEventArgs) -> None: ...


class ICallback:
    def OnClick(self, widget: MenuItem, e: EventArgs) -> None: ...
    def OnValidate(self, widget: MenuItem, e: EventArgs) -> None: ...


class ICallback:
    def OnPrinted(self, widget: PrintDocument, e: EventArgs) -> None: ...
    def OnPrinting(self, widget: PrintDocument, e: EventArgs) -> None: ...
    def OnPrintPage(self, widget: PrintDocument, e: PrintPageEventArgs) -> None: ...


class ICallback:
    def OnDragDrop(self, widget: Control, e: DragEventArgs) -> None: ...
    def OnDragEnter(self, widget: Control, e: DragEventArgs) -> None: ...
    def OnDragLeave(self, widget: Control, e: DragEventArgs) -> None: ...
    def OnDragOver(self, widget: Control, e: DragEventArgs) -> None: ...
    def OnEnabledChanged(self, widget: Control, e: EventArgs) -> None: ...
    def OnGotFocus(self, widget: Control, e: EventArgs) -> None: ...
    def OnKeyDown(self, widget: Control, e: KeyEventArgs) -> None: ...
    def OnKeyUp(self, widget: Control, e: KeyEventArgs) -> None: ...
    def OnLostFocus(self, widget: Control, e: EventArgs) -> None: ...
    def OnMouseDoubleClick(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnMouseDown(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnMouseEnter(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnMouseLeave(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnMouseMove(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnMouseUp(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnMouseWheel(self, widget: Control, e: MouseEventArgs) -> None: ...
    def OnShown(self, widget: Control, e: EventArgs) -> None: ...
    def OnSizeChanged(self, widget: Control, e: EventArgs) -> None: ...
    def OnTextInput(self, widget: Control, e: TextInputEventArgs) -> None: ...


class ICallback:
    def OnClosed(self, widget: ContextMenu, e: EventArgs) -> None: ...
    def OnClosing(self, widget: ContextMenu, e: EventArgs) -> None: ...
    def OnOpening(self, widget: ContextMenu, e: EventArgs) -> None: ...


class ICallback:
    def OnClosed(self, widget: Window, e: EventArgs) -> None: ...
    def OnClosing(self, widget: Window, e: CancelEventArgs) -> None: ...
    def OnLocationChanged(self, widget: Window, e: EventArgs) -> None: ...
    def OnLogicalPixelSizeChanged(self, widget: Window, e: EventArgs) -> None: ...
    def OnWindowStateChanged(self, widget: Window, e: EventArgs) -> None: ...


class ICallback:
    def OnCheckedChanged(self, widget: CheckMenuItem, e: EventArgs) -> None: ...


class ICallback:
    def OnDropDownClosed(self, widget: DropDown, e: EventArgs) -> None: ...
    def OnDropDownOpening(self, widget: DropDown, e: EventArgs) -> None: ...
    def OnFormatItem(self, widget: DropDown, e: DropDownFormatEventArgs) -> None: ...


class ICallback:
    def OnExpandedChanged(self, widget: Expander, e: EventArgs) -> None: ...


class ICallback:
    def OnTextChanged(self, widget: ComboBox, e: EventArgs) -> None: ...


class ICallback:
    def OnColorChanged(self, widget: ColorPicker, e: EventArgs) -> None: ...


class ICallback:
    def OnCheckedChanged(self, widget: RadioMenuItem, e: EventArgs) -> None: ...


class ICallback:
    def OnItemClicked(self, widget: SegmentedButton, e: SegmentedItemClickEventArgs) -> None: ...
    def OnSelectedIndexesChanged(self, widget: SegmentedButton, e: EventArgs) -> None: ...


class ICallback:
    def OnCheckedChanged(self, widget: CheckBox, e: EventArgs) -> None: ...


class ICallback:
    def OnSelectedDateChanged(self, widget: Calendar, e: EventArgs) -> None: ...
    def OnSelectedRangeChanged(self, widget: Calendar, e: EventArgs) -> None: ...


class ICallback:
    def OnFontChanged(self, widget: FontDialog, e: EventArgs) -> None: ...


class ICallback:
    def OnClick(self, widget: Button, e: EventArgs) -> None: ...


class ICallback:
    def OnPaint(self, widget: Drawable, e: PaintEventArgs) -> None: ...


class ICallback:
    def OnClosed(self, widget: SubMenuItem, e: EventArgs) -> None: ...
    def OnClosing(self, widget: SubMenuItem, e: EventArgs) -> None: ...
    def OnOpening(self, widget: SubMenuItem, e: EventArgs) -> None: ...


class ICallback:
    def OnPaint(self, widget: DrawableCell, e: DrawableCellPaintEventArgs) -> None: ...


class ICallback:
    def OnBeginEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    def OnCancelEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    def OnCommitEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    def OnConfigureCell(self, widget: CustomCell, args: CellEventArgs, control: Control) -> None: ...
    def OnCreateCell(self, widget: CustomCell, args: CellEventArgs) -> Control: ...
    def OnGetIdentifier(self, widget: CustomCell, args: CellEventArgs) -> str: ...
    def OnGetPreferredWidth(self, widget: CustomCell, args: CellEventArgs) -> Single: ...
    def OnPaint(self, widget: CustomCell, args: CellPaintEventArgs) -> None: ...


class ICallback:
    def OnInitialized(self, widget: Application, e: EventArgs) -> None: ...
    def OnNotificationActivated(self, wiget: Application, e: NotificationEventArgs) -> None: ...
    def OnTerminating(self, widget: Application, e: CancelEventArgs) -> None: ...
    def OnUnhandledException(self, widget: Application, e: UnhandledExceptionEventArgs) -> None: ...


class ICallback:
    def OnActivated(self, widget: TrayIndicator, e: EventArgs) -> None: ...


class ICallback:
    def OnClick(self, widget: SegmentedItem, e: EventArgs) -> None: ...
    def OnSelectedChanged(self, widget: SegmentedItem, e: EventArgs) -> None: ...


class ICallback:
    def OnColorChanged(self, widget: ColorDialog, e: EventArgs) -> None: ...


class IColumnItem:
    def GetValue(self, column: int) -> Object: ...
    def SetValue(self, column: int, value: Object) -> None: ...


class ICommandItem:
    def add_Click(self, value: EventHandler) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...


class IContextMenuHost:
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...


class IDataObject:
    def Clear(self) -> None: ...
    def Contains(self, type: str) -> bool: ...
    @property
    def ContainsHtml(self) -> bool: ...
    @property
    def ContainsImage(self) -> bool: ...
    @property
    def ContainsText(self) -> bool: ...
    @property
    def ContainsUris(self) -> bool: ...
    @property
    def Html(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    @property
    def Types(self) -> Set(str): ...
    @property
    def Uris(self) -> Set(Uri): ...
    def GetData(self, type: str) -> Set(Byte): ...
    def GetObject(self, type: str) -> T: ...
    def GetString(self, type: str) -> str: ...
    @Html.setter
    def Html(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Uris.setter
    def Uris(self, value: Set(Uri)) -> None: ...
    def SetData(self, value: Set(Byte), type: str) -> None: ...
    def SetObject(self, value: Object, type: str) -> None: ...
    def SetString(self, value: str, type: str) -> None: ...




class IHandler:
    @property
    def Border(self) -> BorderType: ...
    @property
    def ExpandContentHeight(self) -> bool: ...
    @property
    def ExpandContentWidth(self) -> bool: ...
    @property
    def MaximumZoom(self) -> Single: ...
    @property
    def MinimumZoom(self) -> Single: ...
    @property
    def ScrollPosition(self) -> Point: ...
    @property
    def ScrollSize(self) -> Size: ...
    @property
    def VisibleRect(self) -> Rectangle: ...
    @property
    def Zoom(self) -> Single: ...
    @Border.setter
    def Border(self, value: BorderType) -> None: ...
    @ExpandContentHeight.setter
    def ExpandContentHeight(self, value: bool) -> None: ...
    @ExpandContentWidth.setter
    def ExpandContentWidth(self, value: bool) -> None: ...
    @MaximumZoom.setter
    def MaximumZoom(self, value: Single) -> None: ...
    @MinimumZoom.setter
    def MinimumZoom(self, value: Single) -> None: ...
    @ScrollPosition.setter
    def ScrollPosition(self, value: Point) -> None: ...
    @ScrollSize.setter
    def ScrollSize(self, value: Size) -> None: ...
    @Zoom.setter
    def Zoom(self, value: Single) -> None: ...
    def UpdateScrollSizes(self) -> None: ...


class IHandler:
    def ClearItems(self) -> None: ...
    def ClearSelection(self) -> None: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Iterable[int]: ...
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    def InsertItem(self, index: int, item: SegmentedItem) -> None: ...
    def RemoveItem(self, index: int, item: SegmentedItem) -> None: ...
    def SelectAll(self) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: Iterable[int]) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: SegmentedSelectionMode) -> None: ...
    def SetItem(self, index: int, item: SegmentedItem) -> None: ...


class IHandler:
    @property
    def Checked(self) -> Nullable: ...
    @property
    def ThreeState(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: Nullable) -> None: ...
    @ThreeState.setter
    def ThreeState(self, value: bool) -> None: ...


class IHandler:
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def ElementType(self) -> Type: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @ElementType.setter
    def ElementType(self, value: Type) -> None: ...


class IHandler:
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @CanSelect.setter
    def CanSelect(self, value: bool) -> None: ...
    @Menu.setter
    def Menu(self, value: ContextMenu) -> None: ...


class IHandler:
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: bool) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...


class IHandler:
    pass


class IHandler:
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def IsPrimary(self) -> bool: ...
    @property
    def RealScale(self) -> Single: ...
    @property
    def Scale(self) -> Single: ...
    @property
    def WorkingArea(self) -> RectangleF: ...
    def GetImage(self, rect: RectangleF) -> Image: ...


class IHandler:
    @property
    def AutoComplete(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @AutoComplete.setter
    def AutoComplete(self, value: bool) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class IHandler:
    @property
    def Font(self) -> Font: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...


class IHandler:
    pass


class IHandler:
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Width(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...


class IHandler:
    @property
    def Collate(self) -> bool: ...
    @property
    def Copies(self) -> int: ...
    @property
    def MaximumPageRange(self) -> Range: ...
    @property
    def Orientation(self) -> PageOrientation: ...
    @property
    def PrintSelection(self) -> PrintSelection: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def SelectedPageRange(self) -> Range: ...
    @Collate.setter
    def Collate(self, value: bool) -> None: ...
    @Copies.setter
    def Copies(self, value: int) -> None: ...
    @MaximumPageRange.setter
    def MaximumPageRange(self, value: Range) -> None: ...
    @Orientation.setter
    def Orientation(self, value: PageOrientation) -> None: ...
    @PrintSelection.setter
    def PrintSelection(self, value: PrintSelection) -> None: ...
    @Reverse.setter
    def Reverse(self, value: bool) -> None: ...
    @SelectedPageRange.setter
    def SelectedPageRange(self, value: Range) -> None: ...


class IHandler:
    @property
    def Name(self) -> str: ...
    @property
    def PageCount(self) -> int: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    def Print(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PageCount.setter
    def PageCount(self, value: int) -> None: ...
    @PrintSettings.setter
    def PrintSettings(self, value: PrintSettings) -> None: ...


class IHandler:
    @property
    def MaxDate(self) -> DateTime: ...
    @property
    def MinDate(self) -> DateTime: ...
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def Value(self) -> Nullable: ...
    @MaxDate.setter
    def MaxDate(self, value: DateTime) -> None: ...
    @MinDate.setter
    def MinDate(self, value: DateTime) -> None: ...
    @Mode.setter
    def Mode(self, value: DateTimePickerMode) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @Value.setter
    def Value(self, value: Nullable) -> None: ...


class IHandler:
    @property
    def AllowPageRange(self) -> bool: ...
    @property
    def AllowSelection(self) -> bool: ...
    @property
    def Document(self) -> PrintDocument: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @AllowPageRange.setter
    def AllowPageRange(self, value: bool) -> None: ...
    @AllowSelection.setter
    def AllowSelection(self, value: bool) -> None: ...
    @Document.setter
    def Document(self, value: PrintDocument) -> None: ...
    @PrintSettings.setter
    def PrintSettings(self, value: PrintSettings) -> None: ...


class IHandler:
    @property
    def PrintableArea(self) -> RectangleF: ...


class IHandler:
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...


class IHandler:
    @property
    def Filenames(self) -> Iterable[str]: ...
    @property
    def MultiSelect(self) -> bool: ...
    @MultiSelect.setter
    def MultiSelect(self, value: bool) -> None: ...


class IHandler:
    @property
    def ContentImage(self) -> Image: ...
    @property
    def Message(self) -> str: ...
    @property
    def RequiresTrayIndicator(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def UserData(self) -> str: ...
    @ContentImage.setter
    def ContentImage(self, value: Image) -> None: ...
    @Message.setter
    def Message(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @UserData.setter
    def UserData(self, value: str) -> None: ...
    def Show(self, indicator: TrayIndicator) -> None: ...


class IHandler:
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def Position(self) -> PointF: ...
    @Position.setter
    def Position(self, value: PointF) -> None: ...
    def SetCursor(self, cursor: Cursor) -> None: ...


class IHandler:
    @property
    def Buttons(self) -> MessageBoxButtons: ...
    @property
    def Caption(self) -> str: ...
    @property
    def DefaultButton(self) -> MessageBoxDefaultButton: ...
    @property
    def Text(self) -> str: ...
    @property
    def Type(self) -> MessageBoxType: ...
    @Buttons.setter
    def Buttons(self, value: MessageBoxButtons) -> None: ...
    @Caption.setter
    def Caption(self, value: str) -> None: ...
    @DefaultButton.setter
    def DefaultButton(self, value: MessageBoxDefaultButton) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: MessageBoxType) -> None: ...
    def ShowDialog(self, parent: Control) -> DialogResult: ...


class IHandler:
    pass


class IHandler:
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class IHandler:
    @property
    def Directory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @Directory.setter
    def Directory(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class IHandler:
    @property
    def MaxDate(self) -> DateTime: ...
    @property
    def MinDate(self) -> DateTime: ...
    @property
    def Mode(self) -> CalendarMode: ...
    @property
    def SelectedDate(self) -> DateTime: ...
    @property
    def SelectedRange(self) -> Range: ...
    @MaxDate.setter
    def MaxDate(self, value: DateTime) -> None: ...
    @MinDate.setter
    def MinDate(self, value: DateTime) -> None: ...
    @Mode.setter
    def Mode(self, value: CalendarMode) -> None: ...
    @SelectedDate.setter
    def SelectedDate(self, value: DateTime) -> None: ...
    @SelectedRange.setter
    def SelectedRange(self, value: Range) -> None: ...


class IHandler:
    def SetProgress(self, state: TaskbarProgressState, progress: Single) -> None: ...


class IHandler:
    @property
    def Interval(self) -> float: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...


class IHandler:
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> Set(str): ...
    @property
    def Developers(self) -> Set(str): ...
    @property
    def Documenters(self) -> Set(str): ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Image: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> None: ...
    @Designers.setter
    def Designers(self, value: Set(str)) -> None: ...
    @Developers.setter
    def Developers(self, value: Set(str)) -> None: ...
    @Documenters.setter
    def Documenters(self, value: Set(str)) -> None: ...
    @License.setter
    def License(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Image) -> None: ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: str) -> None: ...
    @ProgramName.setter
    def ProgramName(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...
    @Website.setter
    def Website(self, value: Uri) -> None: ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: str) -> None: ...


class IHandler:
    @property
    def Image(self) -> Image: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @property
    def Title(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Menu.setter
    def Menu(self, value: ContextMenu) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class IHandler:
    def AsyncInvoke(self, action: Action) -> None: ...
    def Attach(self, context: Object) -> None: ...
    @property
    def AlternateModifier(self) -> Keys: ...
    @property
    def BadgeLabel(self) -> str: ...
    @property
    def CommonModifier(self) -> Keys: ...
    @property
    def QuitIsSupported(self) -> bool: ...
    def Invoke(self, action: Action) -> None: ...
    def OnMainFormChanged(self) -> None: ...
    def Open(self, url: str) -> None: ...
    def Quit(self) -> None: ...
    def Restart(self) -> None: ...
    def Run(self) -> None: ...
    def RunIteration(self) -> None: ...
    @BadgeLabel.setter
    def BadgeLabel(self, value: str) -> None: ...


class IHandler:
    pass


class IHandler:
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...


class IHandler:
    pass


class IHandler:
    def CreateFromCommand(self, command: Command) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class IHandler:
    def AddButton(self, button: ToolItem, index: int) -> None: ...
    def Clear(self) -> None: ...
    @property
    def Dock(self) -> ToolBarDock: ...
    @property
    def TextAlign(self) -> ToolBarTextAlign: ...
    def RemoveButton(self, button: ToolItem, index: int) -> None: ...
    @Dock.setter
    def Dock(self, value: ToolBarDock) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ToolBarTextAlign) -> None: ...


class IHandler:
    pass


class IHandler:
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: VerticalAlignment) -> None: ...


class IHandler:
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    def GetPage(self, index: int) -> DocumentPage: ...
    def GetPageCount(self) -> int: ...
    def InsertPage(self, index: int, page: DocumentPage) -> None: ...
    def RemovePage(self, index: int) -> None: ...
    @AllowReordering.setter
    def AllowReordering(self, value: bool) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...


class IHandler:
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...


class IHandler:
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: VerticalAlignment) -> None: ...


class IHandler:
    def TryGetObject(self, type: str) -> Tuple[bool, Object]: ...
    def TrySetObject(self, value: Object, type: str) -> bool: ...


class IHandler:
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...


class IHandler:
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: bool) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...


class IHandler:
    def ShowDialog(self, parent: Window) -> DialogResult: ...


class IHandler:
    @property
    def ClientSize(self) -> Size: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...


class IHandler:
    @property
    def Type(self) -> SeparatorToolItemType: ...
    @Type.setter
    def Type(self, value: SeparatorToolItemType) -> None: ...


class IHandler:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class IHandler:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class IHandler:
    pass


class IHandler:
    @property
    def Image(self) -> Image: ...
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @property
    def MinimumSize(self) -> Size: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @ImagePosition.setter
    def ImagePosition(self, value: ButtonImagePosition) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...


class IHandler:
    pass


class IHandler:
    @property
    def Closable(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    @Closable.setter
    def Closable(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class IHandler:
    @overload
    def Create(self) -> None: ...
    @overload
    def Create(self, largeCanvas: bool) -> None: ...
    def CreateGraphics(self) -> Graphics: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def SupportsCreateGraphics(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: bool) -> None: ...
    def Update(self, region: Rectangle) -> None: ...


class IHandler:
    pass


class IHandler:
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    def GetCellAt(self, location: PointF) -> Tuple[Object, int, int]: ...
    def GetDragInfo(self, args: DragEventArgs) -> GridViewDragInfo: ...
    def ReloadData(self, rows: Iterable[int]) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...


class IHandler:
    @property
    def Font(self) -> Font: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Color: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class IHandler:
    @property
    def Image(self) -> Image: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...


class IHandler:
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @property
    def Wrap(self) -> WrapMode: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: VerticalAlignment) -> None: ...
    @Wrap.setter
    def Wrap(self, value: WrapMode) -> None: ...


class IHandler:
    @property
    def Text(self) -> str: ...
    @property
    def TextColor(self) -> Color: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class IHandler:
    @property
    def DisabledTextColor(self) -> Color: ...
    @DisabledTextColor.setter
    def DisabledTextColor(self, value: Color) -> None: ...


class IHandler:
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    def SelectAll(self) -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @CaretIndex.setter
    def CaretIndex(self, value: int) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Selection.setter
    def Selection(self, value: Range) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...


class IHandler:
    pass


class IHandler:
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def SpellCheck(self) -> bool: ...
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @property
    def Wrap(self) -> bool: ...
    def SelectAll(self) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @CaretIndex.setter
    def CaretIndex(self, value: int) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @Selection.setter
    def Selection(self, value: Range) -> None: ...
    @SpellCheck.setter
    def SpellCheck(self, value: bool) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @TextReplacements.setter
    def TextReplacements(self, value: TextReplacements) -> None: ...
    @Wrap.setter
    def Wrap(self, value: bool) -> None: ...


class IHandler:
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class IHandler:
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def TextColor(self) -> Color: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: IIndirectBinding) -> None: ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: IIndirectBinding) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class IHandler:
    @property
    def AutoSize(self) -> bool: ...
    @property
    def DataCell(self) -> Cell: ...
    @property
    def Editable(self) -> bool: ...
    @property
    def Expand(self) -> bool: ...
    @property
    def HeaderText(self) -> str: ...
    @property
    def HeaderTextAlignment(self) -> TextAlignment: ...
    @property
    def MaxWidth(self) -> int: ...
    @property
    def MinWidth(self) -> int: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def Sortable(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @DataCell.setter
    def DataCell(self, value: Cell) -> None: ...
    @Editable.setter
    def Editable(self, value: bool) -> None: ...
    @Expand.setter
    def Expand(self, value: bool) -> None: ...
    @HeaderText.setter
    def HeaderText(self, value: str) -> None: ...
    @HeaderTextAlignment.setter
    def HeaderTextAlignment(self, value: TextAlignment) -> None: ...
    @MaxWidth.setter
    def MaxWidth(self, value: int) -> None: ...
    @MinWidth.setter
    def MinWidth(self, value: int) -> None: ...
    @Resizable.setter
    def Resizable(self, value: bool) -> None: ...
    @Sortable.setter
    def Sortable(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class IHandler:
    def ClearTabs(self) -> None: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def TabPosition(self) -> DockPosition: ...
    def InsertTab(self, index: int, page: TabPage) -> None: ...
    def RemoveTab(self, index: int, page: TabPage) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @TabPosition.setter
    def TabPosition(self, value: DockPosition) -> None: ...


class IHandler:
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...


class IHandler:
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def Increment(self) -> float: ...
    @property
    def MaximumDecimalPlaces(self) -> int: ...
    @property
    def MaxValue(self) -> float: ...
    @property
    def MinValue(self) -> float: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def Value(self) -> float: ...
    @CultureInfo.setter
    def CultureInfo(self, value: CultureInfo) -> None: ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: int) -> None: ...
    @FormatString.setter
    def FormatString(self, value: str) -> None: ...
    @Increment.setter
    def Increment(self, value: float) -> None: ...
    @MaximumDecimalPlaces.setter
    def MaximumDecimalPlaces(self, value: int) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: float) -> None: ...
    @MinValue.setter
    def MinValue(self, value: float) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @Value.setter
    def Value(self, value: float) -> None: ...


class IHandler:
    @property
    def Content(self) -> Control: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Padding(self) -> Padding: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...


class IHandler:
    @property
    def MaxLength(self) -> int: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def ReadOnly(self) -> bool: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...


class IHandler:
    @property
    def Indeterminate(self) -> bool: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @Indeterminate.setter
    def Indeterminate(self, value: bool) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: int) -> None: ...
    @MinValue.setter
    def MinValue(self, value: int) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...


class IHandler:
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Panel1(self) -> Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def SplitterWidth(self) -> int: ...
    @FixedPanel.setter
    def FixedPanel(self, value: SplitterFixedPanel) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Panel1.setter
    def Panel1(self, value: Control) -> None: ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: int) -> None: ...
    @Panel2.setter
    def Panel2(self, value: Control) -> None: ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: int) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @RelativePosition.setter
    def RelativePosition(self, value: float) -> None: ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: int) -> None: ...


class IHandler:
    @property
    def SelectedObject(self) -> Object: ...
    @property
    def SelectedObjects(self) -> Iterable[Object]: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    def Refresh(self) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: Object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Iterable[Object]) -> None: ...
    @ShowCategories.setter
    def ShowCategories(self, value: bool) -> None: ...
    @ShowDescription.setter
    def ShowDescription(self, value: bool) -> None: ...


class IHandler:
    pass


class IHandler:
    def Create(self, controller: RadioButton) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class IHandler:
    @property
    def Buffer(self) -> ITextBuffer: ...
    @property
    def SelectionBackground(self) -> Color: ...
    @property
    def SelectionBold(self) -> bool: ...
    @property
    def SelectionFamily(self) -> FontFamily: ...
    @property
    def SelectionFont(self) -> Font: ...
    @property
    def SelectionForeground(self) -> Color: ...
    @property
    def SelectionItalic(self) -> bool: ...
    @property
    def SelectionStrikethrough(self) -> bool: ...
    @property
    def SelectionTypeface(self) -> FontTypeface: ...
    @property
    def SelectionUnderline(self) -> bool: ...
    @SelectionBackground.setter
    def SelectionBackground(self, value: Color) -> None: ...
    @SelectionBold.setter
    def SelectionBold(self, value: bool) -> None: ...
    @SelectionFamily.setter
    def SelectionFamily(self, value: FontFamily) -> None: ...
    @SelectionFont.setter
    def SelectionFont(self, value: Font) -> None: ...
    @SelectionForeground.setter
    def SelectionForeground(self, value: Color) -> None: ...
    @SelectionItalic.setter
    def SelectionItalic(self, value: bool) -> None: ...
    @SelectionStrikethrough.setter
    def SelectionStrikethrough(self, value: bool) -> None: ...
    @SelectionTypeface.setter
    def SelectionTypeface(self, value: FontTypeface) -> None: ...
    @SelectionUnderline.setter
    def SelectionUnderline(self, value: bool) -> None: ...


class IHandler:
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SnapToTick(self) -> bool: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @MaxValue.setter
    def MaxValue(self, value: int) -> None: ...
    @MinValue.setter
    def MinValue(self, value: int) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @SnapToTick.setter
    def SnapToTick(self, value: bool) -> None: ...
    @TickFrequency.setter
    def TickFrequency(self, value: int) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...


class IHandler:
    def Pop(self) -> None: ...
    def Push(self, item: INavigationItem) -> None: ...


class IHandler:
    def BeginEdit(self, row: int, column: int) -> None: ...
    def CancelEdit(self) -> bool: ...
    def CommitEdit(self) -> bool: ...
    @property
    def AllowColumnReordering(self) -> bool: ...
    @property
    def AllowEmptySelection(self) -> bool: ...
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def GridLines(self) -> GridLines: ...
    @property
    def IsEditing(self) -> bool: ...
    @property
    def RowHeight(self) -> int: ...
    @property
    def SelectedRows(self) -> Iterable[int]: ...
    @property
    def ShowHeader(self) -> bool: ...
    def ScrollToRow(self, row: int) -> None: ...
    def SelectAll(self) -> None: ...
    def SelectRow(self, row: int) -> None: ...
    @AllowColumnReordering.setter
    def AllowColumnReordering(self, value: bool) -> None: ...
    @AllowEmptySelection.setter
    def AllowEmptySelection(self, value: bool) -> None: ...
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self, value: bool) -> None: ...
    @Border.setter
    def Border(self, value: BorderType) -> None: ...
    @GridLines.setter
    def GridLines(self, value: GridLines) -> None: ...
    @RowHeight.setter
    def RowHeight(self, value: int) -> None: ...
    @SelectedRows.setter
    def SelectedRows(self, value: Iterable[int]) -> None: ...
    @ShowHeader.setter
    def ShowHeader(self, value: bool) -> None: ...
    def UnselectAll(self) -> None: ...
    def UnselectRow(self, row: int) -> None: ...


class IHandler:
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @ShowStepper.setter
    def ShowStepper(self, value: bool) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...


class IHandler:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class IHandler:
    def Create(self, controller: RadioMenuItem) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class IHandler:
    def CreateFromCommand(self, command: Command) -> None: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Shortcut.setter
    def Shortcut(self, value: Keys) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class IHandler:
    def CreateLegacySystemMenu(self) -> None: ...
    def CreateSystemMenu(self) -> None: ...
    @property
    def ApplicationMenu(self) -> ButtonMenuItem: ...
    @property
    def HelpMenu(self) -> ButtonMenuItem: ...
    def GetSystemCommands(self) -> Iterable[Command]: ...
    def SetAboutItem(self, item: MenuItem) -> None: ...
    def SetQuitItem(self, item: MenuItem) -> None: ...


class IHandler:
    def Show(self, relativeTo: Control, location: Nullable) -> None: ...


class IHandler:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class IHandler:
    @property
    def Image(self) -> Image: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...


class IHandler:
    @property
    def ShowBorder(self) -> bool: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...


class IHandler:
    def Create(self, mask: str, culture: CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool) -> None: ...
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @property
    def AsciiOnly(self) -> bool: ...
    @property
    def AutoAdvance(self) -> bool: ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def IncludeLiterals(self) -> bool: ...
    @property
    def IncludePrompt(self) -> bool: ...
    @property
    def IsPassword(self) -> bool: ...
    @property
    def Mask(self) -> str: ...
    @property
    def MaskFull(self) -> bool: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def PromptChar(self) -> Char: ...
    @property
    def SkipLiterals(self) -> bool: ...
    @AutoAdvance.setter
    def AutoAdvance(self, value: bool) -> None: ...
    @IncludeLiterals.setter
    def IncludeLiterals(self, value: bool) -> None: ...
    @IncludePrompt.setter
    def IncludePrompt(self, value: bool) -> None: ...
    @IsPassword.setter
    def IsPassword(self, value: bool) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @PromptChar.setter
    def PromptChar(self, value: Char) -> None: ...
    @SkipLiterals.setter
    def SkipLiterals(self, value: bool) -> None: ...


class IHandler:
    @property
    def Expanded(self) -> bool: ...
    @property
    def Header(self) -> Control: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @Header.setter
    def Header(self, value: Control) -> None: ...


class IHandler:
    def CreateControl(self, columns: int, rows: int) -> None: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Spacing(self) -> Size: ...
    def GetColumnScale(self, column: int) -> bool: ...
    def GetRowScale(self, row: int) -> bool: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Spacing.setter
    def Spacing(self, value: Size) -> None: ...
    def SetColumnScale(self, column: int, scale: bool) -> None: ...
    def SetRowScale(self, row: int, scale: bool) -> None: ...


class IHandler:
    pass


class IHandler:
    def Update(self) -> None: ...


class IHandler:
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def SupportedLockKeys(self) -> Iterable[Keys]: ...
    def IsKeyLocked(self, key: Keys) -> bool: ...


class IHandler:
    @property
    def CanFocus(self) -> bool: ...
    @property
    def ShowActivated(self) -> bool: ...
    @CanFocus.setter
    def CanFocus(self, value: bool) -> None: ...
    @ShowActivated.setter
    def ShowActivated(self, value: bool) -> None: ...
    def Show(self) -> None: ...


class IHandler:
    @property
    def Font(self) -> Font: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...


class IHandler:
    pass


class IHandler:
    def ClearFilters(self) -> None: ...
    @property
    def CheckFileExists(self) -> bool: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def Directory(self) -> Uri: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    def InsertFilter(self, index: int, filter: FileFilter) -> None: ...
    def RemoveFilter(self, index: int) -> None: ...
    @CheckFileExists.setter
    def CheckFileExists(self, value: bool) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: int) -> None: ...
    @Directory.setter
    def Directory(self, value: Uri) -> None: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class IHandler:
    @property
    def AbortButton(self) -> Button: ...
    @property
    def DefaultButton(self) -> Button: ...
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    def InsertDialogButton(self, positive: bool, index: int, item: Button) -> None: ...
    def RemoveDialogButton(self, positive: bool, index: int, item: Button) -> None: ...
    @AbortButton.setter
    def AbortButton(self, value: Button) -> None: ...
    @DefaultButton.setter
    def DefaultButton(self, value: Button) -> None: ...
    @DisplayMode.setter
    def DisplayMode(self, value: DialogDisplayMode) -> None: ...
    def ShowModal(self) -> None: ...
    def ShowModalAsync(self) -> Task: ...


class IHandler:
    def TryGetObject(self, type: str) -> Tuple[bool, Object]: ...
    def TrySetObject(self, value: Object, type: str) -> bool: ...


class IHandler:
    @property
    def Color(self) -> str: ...
    @property
    def Html(self) -> str: ...
    @property
    def Text(self) -> str: ...


class IHandler:
    @overload
    def Create(self, type: CursorType) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, image: Image, hotspot: PointF) -> None: ...


class IHandler:
    @property
    def DataStore(self) -> ITreeStore: ...
    @property
    def LabelEdit(self) -> bool: ...
    @property
    def SelectedItem(self) -> ITreeItem: ...
    @property
    def TextColor(self) -> Color: ...
    def GetNodeAt(self, point: PointF) -> ITreeItem: ...
    def RefreshData(self) -> None: ...
    def RefreshItem(self, item: ITreeItem) -> None: ...
    @DataStore.setter
    def DataStore(self, value: ITreeStore) -> None: ...
    @LabelEdit.setter
    def LabelEdit(self, value: bool) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: ITreeItem) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class IHandler:
    def ClearFilters(self) -> None: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def FileAction(self) -> FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def Title(self) -> str: ...
    def InsertFilter(self, index: int, filter: FileFilter) -> None: ...
    def RemoveFilter(self, index: int) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: int) -> None: ...
    @FileAction.setter
    def FileAction(self, value: FileAction) -> None: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class IHandler:
    @property
    def DataStore(self) -> ITreeGridStore: ...
    @property
    def SelectedItem(self) -> ITreeGridItem: ...
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    def GetCellAt(self, location: PointF) -> Tuple[ITreeGridItem, int]: ...
    def GetDragInfo(self, args: DragEventArgs) -> TreeGridViewDragInfo: ...
    def ReloadData(self) -> None: ...
    def ReloadItem(self, item: ITreeGridItem, reloadChildren: bool) -> None: ...
    @DataStore.setter
    def DataStore(self, value: ITreeGridStore) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: ITreeGridItem) -> None: ...


class IHandler:
    @property
    def Value(self) -> Font: ...
    @Value.setter
    def Value(self, value: Font) -> None: ...


class IHandler:
    pass


class IHandler:
    def ExecuteScript(self, script: str) -> str: ...
    def ExecuteScriptAsync(self, script: str) -> Task: ...
    @property
    def BrowserContextMenuEnabled(self) -> bool: ...
    @property
    def CanGoBack(self) -> bool: ...
    @property
    def CanGoForward(self) -> bool: ...
    @property
    def DocumentTitle(self) -> str: ...
    @property
    def Url(self) -> Uri: ...
    def GoBack(self) -> None: ...
    def GoForward(self) -> None: ...
    def LoadHtml(self, html: str, baseUri: Uri) -> None: ...
    def Reload(self) -> None: ...
    @BrowserContextMenuEnabled.setter
    def BrowserContextMenuEnabled(self, value: bool) -> None: ...
    @Url.setter
    def Url(self, value: Uri) -> None: ...
    def ShowPrintDialog(self) -> None: ...
    def Stop(self) -> None: ...


class IHandler:
    def BringToFront(self) -> None: ...
    def Close(self) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalPixelSize(self) -> Single: ...
    @property
    def Maximizable(self) -> bool: ...
    @property
    def Menu(self) -> MenuBar: ...
    @property
    def Minimizable(self) -> bool: ...
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Screen(self) -> Screen: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolBar(self) -> ToolBar: ...
    @property
    def Topmost(self) -> bool: ...
    @property
    def WindowState(self) -> WindowState: ...
    @property
    def WindowStyle(self) -> WindowStyle: ...
    def SendToBack(self) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Maximizable.setter
    def Maximizable(self, value: bool) -> None: ...
    @Menu.setter
    def Menu(self, value: MenuBar) -> None: ...
    @Minimizable.setter
    def Minimizable(self, value: bool) -> None: ...
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self, value: bool) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Resizable.setter
    def Resizable(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @ToolBar.setter
    def ToolBar(self, value: ToolBar) -> None: ...
    @Topmost.setter
    def Topmost(self, value: bool) -> None: ...
    @WindowState.setter
    def WindowState(self, value: WindowState) -> None: ...
    @WindowStyle.setter
    def WindowStyle(self, value: WindowStyle) -> None: ...
    def SetOwner(self, owner: Window) -> None: ...


class IImageListItem:
    @property
    def Image(self) -> Image: ...




class IKeyboardInputSource:
    def add_KeyDown(self, value: EventHandler) -> None: ...
    def add_KeyUp(self, value: EventHandler) -> None: ...
    def add_TextInput(self, value: EventHandler) -> None: ...
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    def remove_TextInput(self, value: EventHandler) -> None: ...


class IListItem:
    @property
    def Key(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class ImageListItem(ListItem):
    def __init__(self): ...
    @property
    def Image(self) -> Image: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...


class ImageTextCell(Cell):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, imageProperty: str, textProperty: str): ...
    @overload
    def __init__(self, imageColumn: int, textColumn: int): ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def ImageBinding(self) -> IIndirectBinding: ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @ImageBinding.setter
    def ImageBinding(self, value: IIndirectBinding) -> None: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @TextBinding.setter
    def TextBinding(self, value: IIndirectBinding) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: VerticalAlignment) -> None: ...


class ImageView(Control):
    def __init__(self): ...
    @property
    def Image(self) -> Image: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...


class ImageViewCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...


class IMaskedTextProvider:
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @Text.setter
    def Text(self, value: str) -> None: ...




class IMouseInputSource:
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: EventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: EventHandler) -> None: ...
    def add_MouseUp(self, value: EventHandler) -> None: ...
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    def remove_MouseWheel(self, value: EventHandler) -> None: ...


class INavigationItem:
    @property
    def Content(self) -> Control: ...




class InsertKeyMode:
    Insert = 0
    Overwrite = 1
    Toggle = 2


class IPositionalLayoutHandler:
    def Add(self, control: Control, x: int, y: int) -> None: ...
    def Move(self, control: Control, x: int, y: int) -> None: ...
    def Remove(self, control: Control) -> None: ...


class IScreensHandler:
    @property
    def PrimaryScreen(self) -> Screen: ...
    @property
    def Screens(self) -> Iterable[Screen]: ...






class ISelectionPreserver:
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @SelectedItems.setter
    def SelectedItems(self, value: Iterable[Object]) -> None: ...


class ISubmenu:
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def Trim(self) -> bool: ...


class ISubmenuHandler:
    def AddMenu(self, index: int, item: MenuItem) -> None: ...
    def Clear(self) -> None: ...
    def RemoveMenu(self, item: MenuItem) -> None: ...


class ITextBuffer:
    def Clear(self) -> None: ...
    def Delete(self, range: Range) -> None: ...
    @property
    def SupportedFormats(self) -> Iterable[RichTextAreaFormat]: ...
    def Insert(self, position: int, text: str) -> None: ...
    def Load(self, stream: Stream, format: RichTextAreaFormat) -> None: ...
    def Save(self, stream: Stream, format: RichTextAreaFormat) -> None: ...
    def SetBackground(self, range: Range, color: Color) -> None: ...
    def SetBold(self, range: Range, bold: bool) -> None: ...
    def SetFamily(self, range: Range, family: FontFamily) -> None: ...
    def SetFont(self, range: Range, font: Font) -> None: ...
    def SetForeground(self, range: Range, color: Color) -> None: ...
    def SetItalic(self, range: Range, italic: bool) -> None: ...
    def SetStrikethrough(self, range: Range, strikethrough: bool) -> None: ...
    def SetUnderline(self, range: Range, underline: bool) -> None: ...


class ITreeGridItem:
    pass






class ITreeItem:
    pass




class ITreeStore:
    pass




class IValueConverter:
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


class Keyboard:
    @property
    def Modifiers() -> Keys: ...
    @property
    def SupportedLockKeys() -> Iterable[Keys]: ...
    def IsKeyLocked(key: Keys) -> bool: ...


class KeyEventArgs:
    def __init__(self, keyData: Keys, keyEventType: KeyEventType, keyChar: Nullable): ...
    @property
    def Alt(self) -> bool: ...
    @property
    def Application(self) -> bool: ...
    @property
    def Control(self) -> bool: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def IsChar(self) -> bool: ...
    @property
    def Key(self) -> Keys: ...
    @property
    def KeyChar(self) -> Char: ...
    @property
    def KeyData(self) -> Keys: ...
    @property
    def KeyEventType(self) -> KeyEventType: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Shift(self) -> bool: ...
    def IsKeyDown(self, key: Keys, modifier: Nullable) -> bool: ...
    def IsKeyUp(self, key: Keys, modifier: Nullable) -> bool: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class KeyEventType:
    KeyDown = 0
    KeyUp = 1


class Keys:
    #None = 0
    A = 1
    B = 2
    C = 3
    D = 4
    E = 5
    F = 6
    G = 7
    H = 8
    I = 9
    J = 10
    K = 11
    L = 12
    M = 13
    N = 14
    O = 15
    P = 16
    Q = 17
    R = 18
    S = 19
    T = 20
    U = 21
    V = 22
    W = 23
    X = 24
    Y = 25
    Z = 26
    F1 = 27
    F2 = 28
    F3 = 29
    F4 = 30
    F5 = 31
    F6 = 32
    F7 = 33
    F8 = 34
    F9 = 35
    F10 = 36
    F11 = 37
    F12 = 38
    D0 = 39
    D1 = 40
    D2 = 41
    D3 = 42
    D4 = 43
    D5 = 44
    D6 = 45
    D7 = 46
    D8 = 47
    D9 = 48
    Minus = 49
    Grave = 51
    Insert = 52
    Home = 53
    PageUp = 54
    PageDown = 55
    Delete = 56
    End = 57
    Divide = 58
    Decimal = 59
    Backspace = 60
    Up = 61
    Down = 62
    Left = 63
    Right = 64
    Tab = 65
    Space = 66
    CapsLock = 67
    ScrollLock = 68
    PrintScreen = 69
    NumberLock = 70
    Enter = 71
    Escape = 72
    Multiply = 73
    Add = 74
    Subtract = 75
    Help = 76
    Pause = 77
    Clear = 78
    KeypadEqual = 79
    Menu = 80
    Backslash = 81
    Plus = 85
    Equal = 85
    Semicolon = 86
    Quote = 87
    Comma = 88
    Period = 89
    Slash = 96
    ForwardSlash = 96
    RightBracket = 97
    LeftBracket = 98
    ContextMenu = 99
    Keypad0 = 112
    Keypad1 = 113
    Keypad2 = 114
    Keypad3 = 115
    Keypad4 = 116
    Keypad5 = 117
    Keypad6 = 118
    Keypad7 = 119
    Keypad8 = 120
    Keypad9 = 121
    LeftShift = 122
    RightShift = 123
    LeftControl = 124
    RightControl = 125
    LeftAlt = 126
    RightAlt = 127
    LeftApplication = 128
    RightApplication = 129
    F13 = 130
    F14 = 131
    F15 = 132
    F16 = 133
    F17 = 134
    F18 = 135
    F19 = 136
    F20 = 137
    F21 = 138
    F22 = 139
    F23 = 140
    F24 = 141
    KeyMask = 4095
    Shift = 4096
    Alt = 8192
    Control = 16384
    Application = 32768
    ModifierMask = 61440


class KeysExtensions:
    def ToShortcutString(key: Keys, separator: str) -> str: ...


class Label(TextControl):
    def __init__(self): ...
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlign(self) -> VerticalAlign: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @property
    def Wrap(self) -> WrapMode: ...
    @HorizontalAlign.setter
    def HorizontalAlign(self, value: HorizontalAlign) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @VerticalAlign.setter
    def VerticalAlign(self, value: VerticalAlign) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: VerticalAlignment) -> None: ...
    @Wrap.setter
    def Wrap(self, value: WrapMode) -> None: ...


class Layout(Container):
    def BeginInit(self) -> None: ...
    def EndInit(self) -> None: ...
    def Update(self) -> None: ...


class LinkButton(TextControl):
    def __init__(self): ...
    def add_Click(self, value: EventHandler) -> None: ...
    @property
    def Command(self) -> ICommand: ...
    @property
    def CommandParameter(self) -> Object: ...
    @property
    def DisabledTextColor(self) -> Color: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    @Command.setter
    def Command(self, value: ICommand) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...
    @DisabledTextColor.setter
    def DisabledTextColor(self, value: Color) -> None: ...


class ListBox(ListControl):
    def __init__(self): ...
    def add_Activated(self, value: EventHandler) -> None: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ImageBinding(self) -> IIndirectBinding: ...
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ImageBinding.setter
    def ImageBinding(self, value: IIndirectBinding) -> None: ...
    @ItemImageBinding.setter
    def ItemImageBinding(self, value: IIndirectBinding) -> None: ...


class ListControl(CommonControl):
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def Items(self) -> ListItemCollection: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedKey(self) -> str: ...
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @property
    def SelectedValue(self) -> Object: ...
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @property
    def TextColor(self) -> Color: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: IIndirectBinding) -> None: ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: IIndirectBinding) -> None: ...
    @KeyBinding.setter
    def KeyBinding(self, value: IIndirectBinding) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedKey.setter
    def SelectedKey(self, value: str) -> None: ...
    @SelectedValue.setter
    def SelectedValue(self, value: Object) -> None: ...
    @TextBinding.setter
    def TextBinding(self, value: IIndirectBinding) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class ListItem:
    def __init__(self): ...
    @property
    def Key(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    def op_Implicit(text: str) -> ListItem: ...
    @Key.setter
    def Key(self, value: str) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ListItemCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, collection: Iterable[IListItem]): ...
    @overload
    def Add(self, text: str) -> None: ...
    @overload
    def Add(self, text: str, key: str) -> None: ...


class LocalizeEventArgs:
    def __init__(self): ...
    @property
    def LocalizedText(self) -> str: ...
    @property
    def Source(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @LocalizedText.setter
    def LocalizedText(self, value: str) -> None: ...


class MaskedTextBox(TextBox):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @property
    def InsertMode(self) -> InsertKeyMode: ...
    @property
    def IsOverwrite(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @property
    def ShowPlaceholderWhenEmpty(self) -> bool: ...
    @property
    def ShowPromptMode(self) -> ShowPromptMode: ...
    @property
    def ShowPromptOnFocus(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @InsertMode.setter
    def InsertMode(self, value: InsertKeyMode) -> None: ...
    @Provider.setter
    def Provider(self, value: IMaskedTextProvider) -> None: ...
    @ShowPlaceholderWhenEmpty.setter
    def ShowPlaceholderWhenEmpty(self, value: bool) -> None: ...
    @ShowPromptMode.setter
    def ShowPromptMode(self, value: ShowPromptMode) -> None: ...
    @ShowPromptOnFocus.setter
    def ShowPromptOnFocus(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...




class MaskedTextStepper(TextStepper):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @property
    def InsertMode(self) -> InsertKeyMode: ...
    @property
    def IsOverwrite(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @property
    def ShowPlaceholderWhenEmpty(self) -> bool: ...
    @property
    def ShowPromptMode(self) -> ShowPromptMode: ...
    @property
    def ShowPromptOnFocus(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @InsertMode.setter
    def InsertMode(self, value: InsertKeyMode) -> None: ...
    @Provider.setter
    def Provider(self, value: IMaskedTextProvider) -> None: ...
    @ShowPlaceholderWhenEmpty.setter
    def ShowPlaceholderWhenEmpty(self, value: bool) -> None: ...
    @ShowPromptMode.setter
    def ShowPromptMode(self, value: ShowPromptMode) -> None: ...
    @ShowPromptOnFocus.setter
    def ShowPromptOnFocus(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...




class Menu(BindableWidget):
    pass


class MenuBar(Menu):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def __init__(self, items: Set(MenuItem)): ...
    @property
    def AboutItem(self) -> MenuItem: ...
    @property
    def ApplicationItems(self) -> MenuItemCollection: ...
    @property
    def ApplicationMenu(self) -> ButtonMenuItem: ...
    @property
    def HelpItems(self) -> MenuItemCollection: ...
    @property
    def HelpMenu(self) -> ButtonMenuItem: ...
    @property
    def IncludeSystemItems(self) -> MenuBarSystemItems: ...
    @property
    def Items(self) -> MenuItemCollection: ...
    @property
    def QuitItem(self) -> MenuItem: ...
    @property
    def SystemCommands(self) -> Collection: ...
    @property
    def Trim(self) -> bool: ...
    @AboutItem.setter
    def AboutItem(self, value: MenuItem) -> None: ...
    @IncludeSystemItems.setter
    def IncludeSystemItems(self, value: MenuBarSystemItems) -> None: ...
    @QuitItem.setter
    def QuitItem(self, value: MenuItem) -> None: ...
    @Trim.setter
    def Trim(self, value: bool) -> None: ...


class MenuBarSystemItems:
    #None = 0
    Common = 1
    Quit = 4
    All = 5


class MenuItem(Menu):
    def add_Click(self, value: EventHandler) -> None: ...
    def add_Validate(self, value: EventHandler) -> None: ...
    @property
    def Command(self) -> ICommand: ...
    @property
    def CommandParameter(self) -> Object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Order(self) -> int: ...
    @property
    def Shortcut(self) -> Keys: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def PerformClick(self) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_Validate(self, value: EventHandler) -> None: ...
    @Command.setter
    def Command(self, value: ICommand) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @Shortcut.setter
    def Shortcut(self, value: Keys) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class MenuItemCollection:
    @overload
    def Add(self, item: MenuItem) -> None: ...
    @overload
    def Add(self, command: Command, order: int) -> MenuItem: ...
    @overload
    def AddRange(self, items: Iterable[MenuItem]) -> None: ...
    @overload
    def AddRange(self, commands: Iterable[Command], order: int) -> None: ...
    def AddSeparator(self, order: int) -> None: ...
    def GetSubmenu(self, submenuText: str, order: int, plaintextMatch: bool, create: bool) -> ButtonMenuItem: ...
    def Trim(self) -> None: ...


class MenuSegmentedItem(SegmentedItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: Command): ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @CanSelect.setter
    def CanSelect(self, value: bool) -> None: ...
    @Menu.setter
    def Menu(self, value: ContextMenu) -> None: ...


class MessageBox:
    @overload
    def Show(text: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    def Show(parent: Control, text: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    def Show(parent: Control, text: str, caption: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    def Show(text: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    def Show(text: str, caption: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    def Show(parent: Control, text: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    def Show(parent: Control, text: str, caption: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...


class MessageBoxButtons:
    OK = 0
    OKCancel = 1
    YesNo = 2
    YesNoCancel = 3


class MessageBoxDefaultButton:
    Default = 0
    OK = 1
    Yes = 1
    No = 2
    Cancel = 3


class MessageBoxType:
    Information = 0
    Warning = 1
    Error = 2
    Question = 3


class Mouse:
    @property
    def Buttons() -> MouseButtons: ...
    @property
    def IsSupported() -> bool: ...
    @property
    def Position() -> PointF: ...
    def IsAnyButtonPressed(buttons: MouseButtons) -> bool: ...
    @Position.setter
    def Position(value: PointF) -> None: ...
    def SetCursor(cursor: Cursor) -> None: ...


class MouseButtons:
    #None = 0
    Primary = 1
    Alternate = 2
    Middle = 4


class MouseEventArgs:
    def __init__(self, buttons: MouseButtons, modifiers: Keys, location: PointF, delta: Nullable, pressure: Single): ...
    @property
    def Buttons(self) -> MouseButtons: ...
    @property
    def Delta(self) -> SizeF: ...
    @property
    def Handled(self) -> bool: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def Modifiers(self) -> Keys: ...
    @property
    def Pressure(self) -> Single: ...
    @Handled.setter
    def Handled(self, value: bool) -> None: ...


class Navigation(Container):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item: INavigationItem): ...
    @overload
    def __init__(self, content: Control, title: str): ...
    def add_ItemRemoved(self, value: EventHandler) -> None: ...
    def add_ItemShown(self, value: EventHandler) -> None: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def IsSupported() -> bool: ...
    def Pop(self) -> None: ...
    @overload
    def Push(self, item: INavigationItem) -> None: ...
    @overload
    def Push(self, content: Control, title: str) -> None: ...
    def remove_ItemRemoved(self, value: EventHandler) -> None: ...
    def remove_ItemShown(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...


class NavigationItem(ListItem):
    def __init__(self): ...
    @property
    def Content(self) -> Control: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...


class NavigationItemEventArgs:
    def __init__(self, item: INavigationItem): ...
    @property
    def Item(self) -> INavigationItem: ...


class Notification(Widget):
    def __init__(self): ...
    def add_Activated(self, value: EventHandler) -> None: ...
    @property
    def ContentImage(self) -> Image: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Message(self) -> str: ...
    @property
    def RequiresTrayIndicator(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def UserData(self) -> str: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    @ContentImage.setter
    def ContentImage(self, value: Image) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @Message.setter
    def Message(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @UserData.setter
    def UserData(self, value: str) -> None: ...
    def Show(self, indicator: TrayIndicator) -> None: ...


class NotificationEventArgs:
    def __init__(self, id: str, userData: str): ...
    @property
    def ID(self) -> str: ...
    @property
    def UserData(self) -> str: ...




class NumericMaskedTextProvider(VariableMaskedTextProvider):
    def __init__(self): ...
    @property
    def AllowDecimal(self) -> bool: ...
    @property
    def AllowSign(self) -> bool: ...
    @property
    def AltDecimalCharacters(self) -> Set(Char): ...
    @property
    def Culture(self) -> CultureInfo: ...
    @property
    def DecimalCharacter(self) -> Char: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def SignCharacters(self) -> Set(Char): ...
    @property
    def Validate(self) -> Func: ...
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @AllowDecimal.setter
    def AllowDecimal(self, value: bool) -> None: ...
    @AllowSign.setter
    def AllowSign(self, value: bool) -> None: ...
    @AltDecimalCharacters.setter
    def AltDecimalCharacters(self, value: Set(Char)) -> None: ...
    @Culture.setter
    def Culture(self, value: CultureInfo) -> None: ...
    @DecimalCharacter.setter
    def DecimalCharacter(self, value: Char) -> None: ...
    @SignCharacters.setter
    def SignCharacters(self, value: Set(Char)) -> None: ...
    @Validate.setter
    def Validate(self, value: Func) -> None: ...






class NumericStepper(CommonControl):
    def __init__(self): ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @property
    def DecimalPlaces(self) -> int: ...
    @property
    def FormatString(self) -> str: ...
    @property
    def Increment(self) -> float: ...
    @property
    def MaximumDecimalPlaces(self) -> int: ...
    @property
    def MaxValue(self) -> float: ...
    @property
    def MinValue(self) -> float: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def Value(self) -> float: ...
    @property
    def ValueBinding(self) -> BindableBinding: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @CultureInfo.setter
    def CultureInfo(self, value: CultureInfo) -> None: ...
    @DecimalPlaces.setter
    def DecimalPlaces(self, value: int) -> None: ...
    @FormatString.setter
    def FormatString(self, value: str) -> None: ...
    @Increment.setter
    def Increment(self, value: float) -> None: ...
    @MaximumDecimalPlaces.setter
    def MaximumDecimalPlaces(self, value: int) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: float) -> None: ...
    @MinValue.setter
    def MinValue(self, value: float) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @Value.setter
    def Value(self, value: float) -> None: ...






class OpenFileDialog(FileDialog):
    def __init__(self): ...
    @property
    def Filenames(self) -> Iterable[str]: ...
    @property
    def MultiSelect(self) -> bool: ...
    @MultiSelect.setter
    def MultiSelect(self, value: bool) -> None: ...


class OpenWithDialog(CommonDialog):
    def __init__(self, filepath: str): ...


class Orientation:
    Horizontal = 0
    Vertical = 1


class PageOrientation:
    Portrait = 0
    Landscape = 1


class PageSettings(Widget):
    def __init__(self): ...
    @property
    def PrintableArea(self) -> RectangleF: ...


class PaintEventArgs:
    def __init__(self, graphics: Graphics, clipRectangle: RectangleF): ...
    @property
    def ClipRectangle(self) -> RectangleF: ...
    @property
    def Graphics(self) -> Graphics: ...


class Panel(Container):
    def __init__(self): ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Padding(self) -> Padding: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...


class PasswordBox(TextControl):
    def __init__(self): ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PasswordChar(self) -> Char: ...
    @property
    def ReadOnly(self) -> bool: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @PasswordChar.setter
    def PasswordChar(self, value: Char) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...


class PixelLayout(Layout):
    def __init__(self): ...
    @overload
    def Add(self, control: Control, location: Point) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    def EndInit(self) -> None: ...
    @property
    def Contents(self) -> List: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    def GetLocation(control: Control) -> Point: ...
    @overload
    def Move(self, control: Control, location: Point) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    def SetLocation(control: Control, value: Point) -> None: ...


class PrintDialog(CommonDialog):
    def __init__(self): ...
    @property
    def AllowPageRange(self) -> bool: ...
    @property
    def AllowSelection(self) -> bool: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @AllowPageRange.setter
    def AllowPageRange(self, value: bool) -> None: ...
    @AllowSelection.setter
    def AllowSelection(self, value: bool) -> None: ...
    @PrintSettings.setter
    def PrintSettings(self, value: PrintSettings) -> None: ...
    @overload
    def ShowDialog(self, parent: Control, document: PrintDocument) -> DialogResult: ...


class PrintDocument(Widget):
    def __init__(self): ...
    def add_Printed(self, value: EventHandler) -> None: ...
    def add_Printing(self, value: EventHandler) -> None: ...
    def add_PrintPage(self, value: EventHandler) -> None: ...
    @property
    def Name(self) -> str: ...
    @property
    def PageCount(self) -> int: ...
    @property
    def PrintSettings(self) -> PrintSettings: ...
    def Print(self) -> None: ...
    def remove_Printed(self, value: EventHandler) -> None: ...
    def remove_Printing(self, value: EventHandler) -> None: ...
    def remove_PrintPage(self, value: EventHandler) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PageCount.setter
    def PageCount(self, value: int) -> None: ...
    @PrintSettings.setter
    def PrintSettings(self, value: PrintSettings) -> None: ...


class PrintPageEventArgs:
    def __init__(self, graphics: Graphics, pageSize: SizeF, currentPage: int): ...
    @property
    def CurrentPage(self) -> int: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def PageSize(self) -> SizeF: ...


class PrintSelection:
    AllPages = 0
    Selection = 1
    SelectedPages = 2


class PrintSettings(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @property
    def Collate(self) -> bool: ...
    @property
    def Copies(self) -> int: ...
    @property
    def MaximumPageRange(self) -> Range: ...
    @property
    def Orientation(self) -> PageOrientation: ...
    @property
    def PrintSelection(self) -> PrintSelection: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def SelectedPageRange(self) -> Range: ...
    @Collate.setter
    def Collate(self, value: bool) -> None: ...
    @Copies.setter
    def Copies(self, value: int) -> None: ...
    @MaximumPageRange.setter
    def MaximumPageRange(self, value: Range) -> None: ...
    @Orientation.setter
    def Orientation(self, value: PageOrientation) -> None: ...
    @PrintSelection.setter
    def PrintSelection(self, value: PrintSelection) -> None: ...
    @Reverse.setter
    def Reverse(self, value: bool) -> None: ...
    @SelectedPageRange.setter
    def SelectedPageRange(self, value: Range) -> None: ...


class ProgressBar(Control):
    def __init__(self): ...
    @property
    def Indeterminate(self) -> bool: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Value(self) -> int: ...
    @Indeterminate.setter
    def Indeterminate(self, value: bool) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: int) -> None: ...
    @MinValue.setter
    def MinValue(self, value: int) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...


class ProgressCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def __init__(self, property: str, ignoreCase: bool): ...




class PropertyCell(CustomCell):
    def __init__(self): ...
    @property
    def TypeBinding(self) -> IIndirectBinding: ...
    @property
    def Types(self) -> List[PropertyCellType]: ...
    @TypeBinding.setter
    def TypeBinding(self, value: IIndirectBinding) -> None: ...


class PropertyCellType:
    def CanDisplay(self, itemType: Object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...




class PropertyCellTypeBoolean:
    def __init__(self): ...
    @property
    def ItemThreeStateBinding(self) -> IndirectBinding: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemThreeStateBinding.setter
    def ItemThreeStateBinding(self, value: IndirectBinding) -> None: ...


class PropertyCellTypeColor:
    def __init__(self): ...
    @property
    def HexEditable(self) -> bool: ...
    @property
    def ShowAlpha(self) -> bool: ...
    @property
    def ShowHex(self) -> bool: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @HexEditable.setter
    def HexEditable(self, value: bool) -> None: ...
    @ShowAlpha.setter
    def ShowAlpha(self, value: bool) -> None: ...
    @ShowHex.setter
    def ShowHex(self, value: bool) -> None: ...


class PropertyCellTypeDateTime:
    def __init__(self): ...
    @property
    def Mode(self) -> DateTimePickerMode: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @Mode.setter
    def Mode(self, value: DateTimePickerMode) -> None: ...


class PropertyCellTypeDropDown:
    def __init__(self): ...
    @property
    def ItemKeyBinding(self) -> IndirectBinding: ...
    @property
    def ItemsBinding(self) -> IndirectBinding: ...
    @property
    def ItemTextBinding(self) -> IndirectBinding: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: IndirectBinding) -> None: ...
    @ItemsBinding.setter
    def ItemsBinding(self, value: IndirectBinding) -> None: ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: IndirectBinding) -> None: ...


class PropertyCellTypeEnum:
    def __init__(self): ...
    def CanDisplay(self, itemType: Object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def ItemTypeBinding(self) -> IndirectBinding: ...
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemTypeBinding.setter
    def ItemTypeBinding(self, value: IndirectBinding) -> None: ...




class PropertyCellTypeNumber:
    def __init__(self): ...
    def CanDisplay(self, itemType: Object) -> bool: ...
    @property
    def Identifier(self) -> str: ...
    @property
    def ItemTypeBinding(self) -> IndirectBinding: ...
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @ItemTypeBinding.setter
    def ItemTypeBinding(self, value: IndirectBinding) -> None: ...




class PropertyCellTypeString:
    def __init__(self): ...
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...


class PropertyGrid(Control):
    def __init__(self): ...
    def add_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @property
    def SelectedObject(self) -> Object: ...
    @property
    def SelectedObjects(self) -> Iterable[Object]: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    def Refresh(self) -> None: ...
    def remove_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: Object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Iterable[Object]) -> None: ...
    @ShowCategories.setter
    def ShowCategories(self, value: bool) -> None: ...
    @ShowDescription.setter
    def ShowDescription(self, value: bool) -> None: ...


class PropertyGridTypeEditor:
    def CreateControl(self, args: CellEventArgs) -> Control: ...
    def PaintCell(self, args: CellPaintEventArgs) -> None: ...


class PropertyValueChangedEventArgs:
    def __init__(self, propertyName: str, oldValue: Object, item: Object): ...
    @property
    def Item(self) -> Object: ...
    @property
    def OldValue(self) -> Object: ...
    @property
    def PropertyName(self) -> str: ...


class RadioButton(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, controller: RadioButton): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    def add_Click(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Command(self) -> ICommand: ...
    @property
    def CommandParameter(self) -> Object: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @Command.setter
    def Command(self, value: ICommand) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...


class RadioButtonList(Panel):
    def __init__(self): ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @property
    def Items(self) -> ListItemCollection: ...
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @property
    def ItemToolTipBinding(self) -> IIndirectBinding: ...
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedKey(self) -> str: ...
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @property
    def SelectedValue(self) -> Object: ...
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @property
    def Spacing(self) -> Size: ...
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @property
    def TextColor(self) -> Color: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ItemKeyBinding.setter
    def ItemKeyBinding(self, value: IIndirectBinding) -> None: ...
    @ItemTextBinding.setter
    def ItemTextBinding(self, value: IIndirectBinding) -> None: ...
    @ItemToolTipBinding.setter
    def ItemToolTipBinding(self, value: IIndirectBinding) -> None: ...
    @KeyBinding.setter
    def KeyBinding(self, value: IIndirectBinding) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedKey.setter
    def SelectedKey(self, value: str) -> None: ...
    @SelectedValue.setter
    def SelectedValue(self, value: Object) -> None: ...
    @Spacing.setter
    def Spacing(self, value: Size) -> None: ...
    @TextBinding.setter
    def TextBinding(self, value: IIndirectBinding) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class RadioCommand(CheckCommand):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: EventHandler): ...
    def CreateMenuItem(self) -> MenuItem: ...
    def CreateToolItem(self) -> ToolItem: ...
    @property
    def Controller(self) -> RadioCommand: ...
    @Controller.setter
    def Controller(self, value: RadioCommand) -> None: ...


class RadioMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, controller: RadioMenuItem): ...
    @overload
    def __init__(self, command: RadioCommand, controller: RadioMenuItem): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    def PerformClick(self) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class RadioToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    def OnCheckedChanged(self, e: EventArgs) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class Range:
    @overload
    def FromLength(start: int, length: int) -> Range: ...
    @overload
    def FromLength(start: Int64, length: Int64) -> Range: ...




class RangeExtensions:
    def Interval(range: Range) -> TimeSpan: ...
    def Length(range: Range) -> int: ...
    def WithLength(range: Range, length: int) -> Range: ...


class RelayCommand:
    @overload
    def __init__(self, execute: Action): ...
    @overload
    def __init__(self, execute: Action, canExecute: Func): ...








class RichTextArea(TextArea):
    def __init__(self): ...
    @property
    def Buffer(self) -> ITextBuffer: ...
    @property
    def Rtf(self) -> str: ...
    @property
    def SelectionBackground(self) -> Color: ...
    @property
    def SelectionBold(self) -> bool: ...
    @property
    def SelectionFamily(self) -> FontFamily: ...
    @property
    def SelectionFont(self) -> Font: ...
    @property
    def SelectionForeground(self) -> Color: ...
    @property
    def SelectionItalic(self) -> bool: ...
    @property
    def SelectionStrikethrough(self) -> bool: ...
    @property
    def SelectionTypeface(self) -> FontTypeface: ...
    @property
    def SelectionUnderline(self) -> bool: ...
    @Rtf.setter
    def Rtf(self, value: str) -> None: ...
    @SelectionBackground.setter
    def SelectionBackground(self, value: Color) -> None: ...
    @SelectionBold.setter
    def SelectionBold(self, value: bool) -> None: ...
    @SelectionFamily.setter
    def SelectionFamily(self, value: FontFamily) -> None: ...
    @SelectionFont.setter
    def SelectionFont(self, value: Font) -> None: ...
    @SelectionForeground.setter
    def SelectionForeground(self, value: Color) -> None: ...
    @SelectionItalic.setter
    def SelectionItalic(self, value: bool) -> None: ...
    @SelectionStrikethrough.setter
    def SelectionStrikethrough(self, value: bool) -> None: ...
    @SelectionTypeface.setter
    def SelectionTypeface(self, value: FontTypeface) -> None: ...
    @SelectionUnderline.setter
    def SelectionUnderline(self, value: bool) -> None: ...


class RichTextAreaFormat:
    Rtf = 0
    PlainText = 1


class SaveFileDialog(FileDialog):
    def __init__(self): ...


class Screen(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    def FromPoint(point: PointF) -> Screen: ...
    def FromRectangle(rectangle: RectangleF) -> Screen: ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DisplayBounds() -> RectangleF: ...
    @property
    def DPI(self) -> Single: ...
    @property
    def IsPrimary(self) -> bool: ...
    @property
    def LogicalPixelSize(self) -> Single: ...
    @property
    def PrimaryScreen() -> Screen: ...
    @property
    def RealDPI(self) -> Single: ...
    @property
    def RealScale(self) -> Single: ...
    @property
    def Scale(self) -> Single: ...
    @property
    def Screens() -> Iterable[Screen]: ...
    @property
    def WorkingArea(self) -> RectangleF: ...
    def GetImage(self, rect: RectangleF) -> Image: ...


class Scrollable(Panel):
    def __init__(self): ...
    def add_Scroll(self, value: EventHandler) -> None: ...
    @property
    def Border(self) -> BorderType: ...
    @property
    def ExpandContentHeight(self) -> bool: ...
    @property
    def ExpandContentWidth(self) -> bool: ...
    @property
    def MaximumZoom(self) -> Single: ...
    @property
    def MinimumZoom(self) -> Single: ...
    @property
    def ScrollPosition(self) -> Point: ...
    @property
    def ScrollSize(self) -> Size: ...
    @property
    def VisibleRect(self) -> Rectangle: ...
    @property
    def Zoom(self) -> Single: ...
    def remove_Scroll(self, value: EventHandler) -> None: ...
    @Border.setter
    def Border(self, value: BorderType) -> None: ...
    @ExpandContentHeight.setter
    def ExpandContentHeight(self, value: bool) -> None: ...
    @ExpandContentWidth.setter
    def ExpandContentWidth(self, value: bool) -> None: ...
    @MaximumZoom.setter
    def MaximumZoom(self, value: Single) -> None: ...
    @MinimumZoom.setter
    def MinimumZoom(self, value: Single) -> None: ...
    @ScrollPosition.setter
    def ScrollPosition(self, value: Point) -> None: ...
    @ScrollSize.setter
    def ScrollSize(self, value: Size) -> None: ...
    @Zoom.setter
    def Zoom(self, value: Single) -> None: ...
    def UpdateScrollSizes(self) -> None: ...


class ScrollEventArgs:
    def __init__(self, scrollPosition: Point): ...
    @property
    def ScrollPosition(self) -> Point: ...


class SearchBox(TextBox):
    def __init__(self): ...


class SegmentedButton(Control):
    def __init__(self): ...
    def add_ItemClick(self, value: EventHandler) -> None: ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def add_SelectedIndexesChanged(self, value: EventHandler) -> None: ...
    def add_SelectedItemChanged(self, value: EventHandler) -> None: ...
    def add_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    def ClearSelection(self) -> None: ...
    @property
    def Items(self) -> SegmentedItemCollection: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Iterable[int]: ...
    @property
    def SelectedItem(self) -> SegmentedItem: ...
    @property
    def SelectedItems(self) -> Iterable[SegmentedItem]: ...
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    def remove_ItemClick(self, value: EventHandler) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedIndexesChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedItemChanged(self, value: EventHandler) -> None: ...
    def remove_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    def SelectAll(self) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: Iterable[int]) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: SegmentedItem) -> None: ...
    @SelectedItems.setter
    def SelectedItems(self, value: Iterable[SegmentedItem]) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: SegmentedSelectionMode) -> None: ...


class SegmentedItem(BindableWidget):
    def add_Click(self, value: EventHandler) -> None: ...
    def add_SelectedChanged(self, value: EventHandler) -> None: ...
    @property
    def Command(self) -> ICommand: ...
    @property
    def CommandParameter(self) -> Object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Parent(self) -> SegmentedButton: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    def op_Implicit(image: Image) -> SegmentedItem: ...
    @overload
    def op_Implicit(command: Command) -> SegmentedItem: ...
    @overload
    def op_Implicit(text: str) -> SegmentedItem: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_SelectedChanged(self, value: EventHandler) -> None: ...
    @Command.setter
    def Command(self, value: ICommand) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...


class SegmentedItemClickEventArgs:
    def __init__(self, item: SegmentedItem, index: int): ...
    @property
    def Index(self) -> int: ...
    @property
    def Item(self) -> SegmentedItem: ...


class SegmentedItemCollection:
    def AddRange(self, items: Iterable[SegmentedItem]) -> None: ...


class SegmentedSelectionMode:
    #None = 0
    Single = 1
    Multiple = 2




class SelectFolderDialog(CommonDialog):
    def __init__(self): ...
    @property
    def Directory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @Directory.setter
    def Directory(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...


class SeparatorMenuItem(MenuItem):
    def __init__(self): ...


class SeparatorToolItem(ToolItem):
    def __init__(self): ...
    @property
    def Type(self) -> SeparatorToolItemType: ...
    @Type.setter
    def Type(self, value: SeparatorToolItemType) -> None: ...


class SeparatorToolItemType:
    Divider = 0
    Space = 1
    FlexibleSpace = 2


class ShowPromptMode:
    Always = 0
    OnFocus = 1
    Never = 2




class Slider(Control):
    def __init__(self): ...
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @property
    def MaxValue(self) -> int: ...
    @property
    def MinValue(self) -> int: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def SnapToTick(self) -> bool: ...
    @property
    def TickFrequency(self) -> int: ...
    @property
    def Value(self) -> int: ...
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @MaxValue.setter
    def MaxValue(self, value: int) -> None: ...
    @MinValue.setter
    def MinValue(self, value: int) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @SnapToTick.setter
    def SnapToTick(self, value: bool) -> None: ...
    @TickFrequency.setter
    def TickFrequency(self, value: int) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...


class Spinner(Control):
    def __init__(self): ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...


class Splitter(Container):
    def __init__(self): ...
    def add_PositionChanged(self, value: EventHandler) -> None: ...
    def add_PositionChanging(self, value: EventHandler) -> None: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @property
    def IsSupported() -> bool: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Panel1(self) -> Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def SplitterWidth(self) -> int: ...
    def remove_PositionChanged(self, value: EventHandler) -> None: ...
    def remove_PositionChanging(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @FixedPanel.setter
    def FixedPanel(self, value: SplitterFixedPanel) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Panel1.setter
    def Panel1(self, value: Control) -> None: ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: int) -> None: ...
    @Panel2.setter
    def Panel2(self, value: Control) -> None: ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: int) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @RelativePosition.setter
    def RelativePosition(self, value: float) -> None: ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: int) -> None: ...


class SplitterFixedPanel:
    Panel1 = 0
    Panel2 = 1
    #None = 2


class SplitterPositionChangingEventArgs:
    def __init__(self, newPosition: int): ...
    @property
    def NewPosition(self) -> int: ...


class StackLayout(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Set(StackLayoutItem)): ...
    @property
    def AlignLabels(self) -> bool: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def HorizontalContentAlignment(self) -> HorizontalAlignment: ...
    @property
    def Items(self) -> Collection: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Spacing(self) -> int: ...
    @property
    def VerticalContentAlignment(self) -> VerticalAlignment: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    def ResumeLayout(self) -> None: ...
    @AlignLabels.setter
    def AlignLabels(self, value: bool) -> None: ...
    @HorizontalContentAlignment.setter
    def HorizontalContentAlignment(self, value: HorizontalAlignment) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Spacing.setter
    def Spacing(self, value: int) -> None: ...
    @VerticalContentAlignment.setter
    def VerticalContentAlignment(self, value: VerticalAlignment) -> None: ...
    def SuspendLayout(self) -> None: ...


class StackLayoutItem:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, expand: bool): ...
    @overload
    def __init__(self, control: Control, alignment: Nullable, expand: bool): ...
    @overload
    def __init__(self, control: Control, alignment: Nullable, expand: bool): ...
    @property
    def Control(self) -> Control: ...
    @property
    def Expand(self) -> bool: ...
    @property
    def HorizontalAlignment(self) -> Nullable: ...
    @property
    def VerticalAlignment(self) -> Nullable: ...
    @overload
    def op_Implicit(control: Control) -> StackLayoutItem: ...
    @overload
    def op_Implicit(labelText: str) -> StackLayoutItem: ...
    @overload
    def op_Implicit(image: Image) -> StackLayoutItem: ...
    @Control.setter
    def Control(self, value: Control) -> None: ...
    @Expand.setter
    def Expand(self, value: bool) -> None: ...
    @HorizontalAlignment.setter
    def HorizontalAlignment(self, value: Nullable) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: Nullable) -> None: ...


class Stepper(Control):
    def __init__(self): ...
    def add_Step(self, value: EventHandler) -> None: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    def remove_Step(self, value: EventHandler) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...


class StepperDirection:
    Up = 0
    Down = 1


class StepperEventArgs:
    def __init__(self, direction: StepperDirection): ...
    @property
    def Direction(self) -> StepperDirection: ...


class StepperValidDirections:
    #None = 0
    Up = 1
    Down = 2
    Both = 3


class SubmenuExtensions:
    def GetChildren(submenu: ISubmenu) -> Iterable[MenuItem]: ...


class SubMenuItem(ButtonMenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Set(MenuItem)): ...
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: EventHandler) -> None: ...
    def add_Opening(self, value: EventHandler) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: EventHandler) -> None: ...
    def remove_Opening(self, value: EventHandler) -> None: ...


class TabControl(Container):
    def __init__(self): ...
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Pages(self) -> Collection: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @property
    def SelectedPage(self) -> TabPage: ...
    @property
    def TabPosition(self) -> DockPosition: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedPage.setter
    def SelectedPage(self, value: TabPage) -> None: ...
    @TabPosition.setter
    def TabPosition(self, value: DockPosition) -> None: ...


class TableCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, scaleWidth: bool): ...
    @property
    def Control(self) -> Control: ...
    @property
    def ScaleWidth(self) -> bool: ...
    @overload
    def op_Implicit(control: Control) -> TableCell: ...
    @overload
    def op_Implicit(items: Set(TableCell)) -> TableCell: ...
    @overload
    def op_Implicit(rows: Set(TableRow)) -> TableCell: ...
    @overload
    def op_Implicit(labelText: str) -> TableCell: ...
    @overload
    def op_Implicit(image: Image) -> TableCell: ...
    @Control.setter
    def Control(self, value: Control) -> None: ...
    @ScaleWidth.setter
    def ScaleWidth(self, value: bool) -> None: ...


class TableLayout(Layout):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dimensions: Size): ...
    @overload
    def __init__(self, rows: Set(TableRow)): ...
    @overload
    def __init__(self, rows: Iterable[TableRow]): ...
    @overload
    def __init__(self, columns: int, rows: int): ...
    @overload
    def __init__(self, yscale: bool, rows: Set(TableRow)): ...
    @overload
    def Add(self, control: Control, location: Point) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int, xscale: bool, yscale: bool) -> None: ...
    def AutoSized(control: Control, padding: Nullable, centered: bool) -> TableLayout: ...
    def EndInit(self) -> None: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Dimensions(self) -> Size: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Rows(self) -> Collection: ...
    @property
    def Spacing(self) -> Size: ...
    def GetColumnScale(self, column: int) -> bool: ...
    def GetRowScale(self, row: int) -> bool: ...
    @overload
    def Horizontal(cells: Set(TableCell)) -> TableLayout: ...
    @overload
    def Horizontal(spacing: int, cells: Set(TableCell)) -> TableLayout: ...
    @overload
    def HorizontalScaled(cells: Set(TableCell)) -> TableLayout: ...
    @overload
    def HorizontalScaled(spacing: int, cells: Set(TableCell)) -> TableLayout: ...
    @overload
    def Move(self, control: Control, location: Point) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    def op_Implicit(rows: Set(TableRow)) -> TableLayout: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Spacing.setter
    def Spacing(self, value: Size) -> None: ...
    def SetColumnScale(self, column: int, scale: bool) -> None: ...
    def SetRowScale(self, row: int, scale: bool) -> None: ...


class TableRow:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cells: Set(TableCell)): ...
    @overload
    def __init__(self, cells: Iterable[TableCell]): ...
    @property
    def Cells(self) -> Collection: ...
    @property
    def ScaleHeight(self) -> bool: ...
    @overload
    def op_Implicit(control: Control) -> TableRow: ...
    @overload
    def op_Implicit(cells: Set(TableCell)) -> TableRow: ...
    @overload
    def op_Implicit(labelText: str) -> TableRow: ...
    @overload
    def op_Implicit(image: Image) -> TableRow: ...
    @overload
    def op_Implicit(row: TableRow) -> Control: ...
    @overload
    def op_Implicit(row: TableRow) -> TableCell: ...
    @overload
    def Scaled(cells: Set(TableCell)) -> TableRow: ...
    @overload
    def Scaled(cells: Iterable[TableCell]) -> TableRow: ...
    @Cells.setter
    def Cells(self, value: Collection) -> None: ...
    @ScaleHeight.setter
    def ScaleHeight(self, value: bool) -> None: ...


class TabPage(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, padding: Nullable): ...
    def add_Click(self, value: EventHandler) -> None: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Text(self) -> str: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class Taskbar:
    def SetProgress(state: TaskbarProgressState, progress: Single) -> None: ...


class TaskbarProgressState:
    #None = 0
    Progress = 1
    Indeterminate = 2
    Error = 3
    Paused = 4


class TextAlignment:
    Left = 0
    Center = 1
    Right = 2


class TextArea(TextControl):
    def __init__(self): ...
    def add_CaretIndexChanged(self, value: EventHandler) -> None: ...
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @property
    def AcceptsReturn(self) -> bool: ...
    @property
    def AcceptsTab(self) -> bool: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def SpellCheck(self) -> bool: ...
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @property
    def Wrap(self) -> bool: ...
    def remove_CaretIndexChanged(self, value: EventHandler) -> None: ...
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    def SelectAll(self) -> None: ...
    @AcceptsReturn.setter
    def AcceptsReturn(self, value: bool) -> None: ...
    @AcceptsTab.setter
    def AcceptsTab(self, value: bool) -> None: ...
    @CaretIndex.setter
    def CaretIndex(self, value: int) -> None: ...
    @HorizontalAlign.setter
    def HorizontalAlign(self, value: HorizontalAlign) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @Selection.setter
    def Selection(self, value: Range) -> None: ...
    @SpellCheck.setter
    def SpellCheck(self, value: bool) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @TextReplacements.setter
    def TextReplacements(self, value: TextReplacements) -> None: ...
    @Wrap.setter
    def Wrap(self, value: bool) -> None: ...


class TextBox(TextControl):
    def __init__(self): ...
    def add_TextChanging(self, value: EventHandler) -> None: ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def SelectedText(self) -> str: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    def remove_TextChanging(self, value: EventHandler) -> None: ...
    def SelectAll(self) -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @CaretIndex.setter
    def CaretIndex(self, value: int) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @SelectedText.setter
    def SelectedText(self, value: str) -> None: ...
    @Selection.setter
    def Selection(self, value: Range) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...


class TextBoxCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @VerticalAlignment.setter
    def VerticalAlignment(self, value: VerticalAlignment) -> None: ...


class TextBufferExtensions:
    def GetRtf(buffer: ITextBuffer) -> str: ...
    def SetRtf(buffer: ITextBuffer, rtf: str) -> None: ...


class TextChangingEventArgs:
    @overload
    def __init__(self, text: str, range: Range, fromUser: bool): ...
    @overload
    def __init__(self, oldText: str, newText: str, fromUser: bool): ...
    @overload
    def __init__(self, text: str, range: Range, oldText: str, fromUser: bool): ...
    @property
    def FromUser(self) -> bool: ...
    @property
    def NewText(self) -> str: ...
    @property
    def OldText(self) -> str: ...
    @property
    def Range(self) -> Range: ...
    @property
    def Text(self) -> str: ...


class TextControl(CommonControl):
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextBinding(self) -> BindableBinding: ...
    @property
    def TextColor(self) -> Color: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...


class TextInputEventArgs:
    def __init__(self, text: str): ...
    @property
    def Text(self) -> str: ...


class TextReplacements:
    #None = 0
    Text = 1
    Quote = 2
    Dash = 4
    Spelling = 8
    All = 15


class TextStepper(TextBox):
    def __init__(self): ...
    def add_Step(self, value: EventHandler) -> None: ...
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    def remove_Step(self, value: EventHandler) -> None: ...
    @ShowStepper.setter
    def ShowStepper(self, value: bool) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...






class ToggleButton(Button):
    def __init__(self): ...
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @property
    def Checked(self) -> bool: ...
    def PerformClick(self) -> None: ...
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...


class Tool(BindableWidget):
    def __init__(self): ...


class ToolBar(Tool):
    def __init__(self): ...
    @property
    def Dock(self) -> ToolBarDock: ...
    @property
    def Items(self) -> ToolItemCollection: ...
    @property
    def TextAlign(self) -> ToolBarTextAlign: ...
    @Dock.setter
    def Dock(self, value: ToolBarDock) -> None: ...
    @TextAlign.setter
    def TextAlign(self, value: ToolBarTextAlign) -> None: ...


class ToolBarDock:
    Top = 0
    Bottom = 1


class ToolBarTextAlign:
    Right = 0
    Underneath = 1


class ToolItem(Tool):
    def add_Click(self, value: EventHandler) -> None: ...
    @property
    def Command(self) -> ICommand: ...
    @property
    def CommandParameter(self) -> Object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Order(self) -> int: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def OnClick(self, e: EventArgs) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    @Command.setter
    def Command(self, value: ICommand) -> None: ...
    @CommandParameter.setter
    def CommandParameter(self, value: Object) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Order.setter
    def Order(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...


class ToolItemCollection:
    @overload
    def Add(self, item: ToolItem) -> None: ...
    @overload
    def Add(self, command: Command, order: int) -> None: ...
    @overload
    def AddRange(self, items: Iterable[ToolItem]) -> None: ...
    @overload
    def AddRange(self, commands: Iterable[Command], order: int) -> None: ...
    def AddSeparator(self, order: int, type: SeparatorToolItemType) -> None: ...


class TrayIndicator(Widget):
    def __init__(self): ...
    def add_Activated(self, value: EventHandler) -> None: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @property
    def Title(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    def Hide(self) -> None: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Menu.setter
    def Menu(self, value: ContextMenu) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    def Show(self) -> None: ...


class TreeGridCell:
    @property
    def Column(self) -> GridColumn: ...
    @property
    def ColumnIndex(self) -> int: ...
    @property
    def Item(self) -> Object: ...


class TreeGridItem(GridItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Set(Object)): ...
    @overload
    def __init__(self, children: Iterable[ITreeGridItem], values: Set(Object)): ...
    @property
    def Children(self) -> TreeGridItemCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Item(self, index: int) -> ITreeGridItem: ...
    @property
    def Parent(self) -> ITreeGridItem: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @Parent.setter
    def Parent(self, value: ITreeGridItem) -> None: ...


class TreeGridItemCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[ITreeGridItem]): ...


class TreeGridView(Grid):
    def __init__(self): ...
    def add_Activated(self, value: EventHandler) -> None: ...
    def add_Collapsed(self, value: EventHandler) -> None: ...
    def add_Collapsing(self, value: EventHandler) -> None: ...
    def add_Expanded(self, value: EventHandler) -> None: ...
    def add_Expanding(self, value: EventHandler) -> None: ...
    def add_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def DataStore(self) -> ITreeGridStore: ...
    @property
    def SelectedItem(self) -> ITreeGridItem: ...
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    def GetCellAt(self, location: PointF) -> TreeGridCell: ...
    def GetDragInfo(self, args: DragEventArgs) -> TreeGridViewDragInfo: ...
    def ReloadData(self) -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem) -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem, reloadChildren: bool) -> None: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    def remove_Collapsed(self, value: EventHandler) -> None: ...
    def remove_Collapsing(self, value: EventHandler) -> None: ...
    def remove_Expanded(self, value: EventHandler) -> None: ...
    def remove_Expanding(self, value: EventHandler) -> None: ...
    def remove_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @DataStore.setter
    def DataStore(self, value: ITreeGridStore) -> None: ...
    @SelectedItem.setter
    def SelectedItem(self, value: ITreeGridItem) -> None: ...


class TreeGridViewDragInfo:
    def __init__(self, control: TreeGridView, parent: Object, item: Object, childIndex: Nullable, position: GridDragPosition): ...
    @property
    def ChildIndex(self) -> int: ...
    @property
    def Control(self) -> TreeGridView: ...
    @property
    def InsertIndex(self) -> int: ...
    @property
    def IsChanged(self) -> bool: ...
    @property
    def Item(self) -> Object: ...
    @property
    def Parent(self) -> Object: ...
    @property
    def Position(self) -> GridDragPosition: ...
    def RestrictToInsert(self) -> None: ...
    def RestrictToNode(self, item: Object, childLevels: int) -> bool: ...
    def RestrictToOver(self) -> None: ...
    @Item.setter
    def Item(self, value: Object) -> None: ...
    @Parent.setter
    def Parent(self, value: Object) -> None: ...
    @Position.setter
    def Position(self, value: GridDragPosition) -> None: ...


class TreeGridViewItemCancelEventArgs:
    def __init__(self, item: ITreeGridItem): ...
    @property
    def Item(self) -> ITreeGridItem: ...


class TreeGridViewItemEventArgs:
    def __init__(self, item: ITreeGridItem): ...
    @property
    def Item(self) -> ITreeGridItem: ...


class TreeItem(ImageListItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, children: Iterable[ITreeItem]): ...
    @overload
    def __init__(self, children: Set(ITreeItem)): ...
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @property
    def Children(self) -> TreeItemCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def Expandable(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def Item(self, index: int) -> ITreeItem: ...
    @property
    def Parent(self) -> ITreeItem: ...
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @Parent.setter
    def Parent(self, value: ITreeItem) -> None: ...


class TreeItemCollection:
    def __init__(self): ...


class TreeViewItemCancelEventArgs:
    def __init__(self, item: ITreeItem): ...
    @property
    def Item(self) -> ITreeItem: ...


class TreeViewItemEditEventArgs(TreeViewItemCancelEventArgs):
    def __init__(self, item: ITreeItem, label: str): ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> None: ...


class TreeViewItemEventArgs:
    def __init__(self, item: ITreeItem): ...
    @property
    def Item(self) -> ITreeItem: ...


class UITimer(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elapsedHandler: EventHandler): ...
    def add_Elapsed(self, value: EventHandler) -> None: ...
    @property
    def Interval(self) -> float: ...
    @property
    def Started(self) -> bool: ...
    def remove_Elapsed(self, value: EventHandler) -> None: ...
    @Interval.setter
    def Interval(self, value: float) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...




class VariableMaskedTextProvider:
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaskCompleted(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @Text.setter
    def Text(self, value: str) -> None: ...


class VerticalAlignment:
    Top = 0
    Center = 1
    Bottom = 2
    Stretch = 3


class WebView(Control):
    def __init__(self): ...
    def add_DocumentLoaded(self, value: EventHandler) -> None: ...
    def add_DocumentLoading(self, value: EventHandler) -> None: ...
    def add_DocumentTitleChanged(self, value: EventHandler) -> None: ...
    def add_Navigated(self, value: EventHandler) -> None: ...
    def add_OpenNewWindow(self, value: EventHandler) -> None: ...
    def ExecuteScript(self, script: str) -> str: ...
    def ExecuteScriptAsync(self, script: str) -> Task: ...
    @property
    def BrowserContextMenuEnabled(self) -> bool: ...
    @property
    def CanGoBack(self) -> bool: ...
    @property
    def CanGoForward(self) -> bool: ...
    @property
    def DocumentTitle(self) -> str: ...
    @property
    def Url(self) -> Uri: ...
    def GoBack(self) -> None: ...
    def GoForward(self) -> None: ...
    @overload
    def LoadHtml(self, stream: Stream, baseUri: Uri) -> None: ...
    @overload
    def LoadHtml(self, html: str, baseUri: Uri) -> None: ...
    def Reload(self) -> None: ...
    def remove_DocumentLoaded(self, value: EventHandler) -> None: ...
    def remove_DocumentLoading(self, value: EventHandler) -> None: ...
    def remove_DocumentTitleChanged(self, value: EventHandler) -> None: ...
    def remove_Navigated(self, value: EventHandler) -> None: ...
    def remove_OpenNewWindow(self, value: EventHandler) -> None: ...
    @BrowserContextMenuEnabled.setter
    def BrowserContextMenuEnabled(self, value: bool) -> None: ...
    @Url.setter
    def Url(self, value: Uri) -> None: ...
    def ShowPrintDialog(self) -> None: ...
    def Stop(self) -> None: ...


class WebViewLoadedEventArgs:
    def __init__(self, uri: Uri): ...
    @property
    def Uri(self) -> Uri: ...


class WebViewLoadingEventArgs(WebViewLoadedEventArgs):
    def __init__(self, uri: Uri, isMainFrame: bool): ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def IsMainFrame(self) -> bool: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...
    @IsMainFrame.setter
    def IsMainFrame(self, value: bool) -> None: ...


class WebViewNewWindowEventArgs(WebViewLoadingEventArgs):
    def __init__(self, uri: Uri, newWindowName: str): ...
    @property
    def NewWindowName(self) -> str: ...


class WebViewTitleEventArgs:
    def __init__(self, title: str): ...
    @property
    def Title(self) -> str: ...


class WidgetExtensions:
    def With(widget: T, action: Action) -> T: ...


class Window(Panel):
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: EventHandler) -> None: ...
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    def add_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    def add_WindowStateChanged(self, value: EventHandler) -> None: ...
    def BringToFront(self) -> None: ...
    def Close(self) -> None: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalPixelSize(self) -> Single: ...
    @property
    def Maximizable(self) -> bool: ...
    @property
    def Menu(self) -> MenuBar: ...
    @property
    def Minimizable(self) -> bool: ...
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Owner(self) -> Window: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Screen(self) -> Screen: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolBar(self) -> ToolBar: ...
    @property
    def Topmost(self) -> bool: ...
    @property
    def WindowState(self) -> WindowState: ...
    @property
    def WindowStyle(self) -> WindowStyle: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: EventHandler) -> None: ...
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    def remove_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    def remove_WindowStateChanged(self, value: EventHandler) -> None: ...
    def SendToBack(self) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Maximizable.setter
    def Maximizable(self, value: bool) -> None: ...
    @Menu.setter
    def Menu(self, value: MenuBar) -> None: ...
    @Minimizable.setter
    def Minimizable(self, value: bool) -> None: ...
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self, value: bool) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Window) -> None: ...
    @Resizable.setter
    def Resizable(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @ToolBar.setter
    def ToolBar(self, value: ToolBar) -> None: ...
    @Topmost.setter
    def Topmost(self, value: bool) -> None: ...
    @WindowState.setter
    def WindowState(self, value: WindowState) -> None: ...
    @WindowStyle.setter
    def WindowStyle(self, value: WindowStyle) -> None: ...


class WindowState:
    Normal = 0
    Maximized = 1
    Minimized = 2


class WindowStyle:
    Default = 0
    #None = 1
    Utility = 2


class WrapMode:
    #None = 0
    Word = 1
    Character = 2
